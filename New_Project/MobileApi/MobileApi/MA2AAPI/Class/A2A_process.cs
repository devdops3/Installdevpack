using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Collections;
using log4net;
using System.Reflection;
using System.Text;
using System.Data;
using System.IO;
using System.Drawing;
using System.Configuration;
using MA2AAPI.Class;
using System.Security.Cryptography;
using MA2AAPI;
using ICSharpCode.SharpZipLib.Zip.Compression;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using A2AAPI.Models;
using Newtonsoft.Json;
using System.Device.Location;
using MA2AAPI.Models;
using System.Xml;
using MA2AAPI.Constants;
using MA2AAPI.Service;
using System.Net;
using System.Threading.Tasks;
public class A2A_process
{
    private readonly RewardService _rewardService;
    private readonly AuthenticationService _authenticationService;
    private readonly ResponseService _responseService;
    private readonly MA2AAPI.MA2AAPIWCF.ServiceClient _agentWCF;
    private readonly TransactionManager _trasactionManager;
    
    public A2A_process()
    {
        _agentWCF = new MA2AAPI.MA2AAPIWCF.ServiceClient();
        _responseService = new ResponseService();
        _authenticationService = new AuthenticationService();
        _rewardService = new RewardService();
        _trasactionManager = new TransactionManager();
    }

    #region Log
    private static ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
    private void writeLog(string msg)
    {
        Logger.writeLog(msg, ref log);
    }
    #endregion

    
    #region Variable
   

    private int agentid = 0;
    private string agentcode = string.Empty;
    private string branchCode = string.Empty;

    private string agentuseruniqueid = string.Empty;
    private string agentFlatFee = string.Empty;
    private string agentPercent = string.Empty;

    private string agentFee = string.Empty;
    private string billerid = string.Empty;
    private string billerstatusID = string.Empty;
    private string billername = string.Empty;
    private string billerlogo = string.Empty;

    #endregion

    #region Meter Division List
    public string MeterDivisionListReq(string reqXml)
    {
        MeterDevisionListReqData _meterDevisionReqData = new MeterDevisionListReqData();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        DataSet meterDivisionDs = new DataSet();
        meterDivisionDs = null;
        string response = string.Empty;
        string errMsg = string.Empty;
        try
        {
            _meterDevisionReqData = IsValidateMeterDevisionListReq(ht);

            if (_meterDevisionReqData.validateResult)
            {
                if (_agentWCF.getMeterDivisionList(out meterDivisionDs, out errMsg))
                {
                    return response = getMeterDivisionListResponse(meterDivisionDs, _meterDevisionReqData);
                }
            }
            else
            {

                response = Utils.GetErrorResponse(_meterDevisionReqData.rescode, _meterDevisionReqData.resdesc);
                return response;
            }
        }
        catch (Exception ex)
        {
            response = Utils.GetErrorResponse("99", "System Error");

            writeLog("Exception error occur in StoreCardListRequest:" + ex.Message);
        }
        return response;
    }

    public string getMeterDivisionListResponse(DataSet meterDivisionDs, MeterDevisionListReqData _meterDevisionReqData)
    {
        StringBuilder _meterDivisionListRes = new StringBuilder();
        string totalcount = string.Empty;
        try
        {
            _meterDivisionListRes.Append("<MeterDivisionListRes>");
            _meterDivisionListRes.Append("<ResCode>00</ResCode>");
            _meterDivisionListRes.Append("<ResDesc>success</ResDesc>");
            _meterDivisionListRes.Append("<Version>" + _meterDevisionReqData.version + "</Version>");
            _meterDivisionListRes.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            _meterDivisionListRes.Append("<MessageID>" + _meterDevisionReqData.messageid + "</MessageID>");

            _meterDivisionListRes.Append("<Divisions>");
            if (meterDivisionDs.Tables[1].Rows.Count > 0)
            {
                for (int i = 0; i < meterDivisionDs.Tables[0].Rows.Count; i++)
                {
                    string divisionId = meterDivisionDs.Tables[0].Rows[i]["DIVISIONID"].ToString();
                    string divisionName = meterDivisionDs.Tables[0].Rows[i]["DIVISIONNAME"].ToString();
                    string divisionNameEng = meterDivisionDs.Tables[0].Rows[i]["DIVISIONNAMEENG"].ToString();
                    _meterDivisionListRes.Append("<Division>");
                    _meterDivisionListRes.Append("<DivisionID>" + divisionId + "</DivisionID>");
                    _meterDivisionListRes.Append("<DivisionName>" + divisionName + "</DivisionName>");
                    _meterDivisionListRes.Append("<DivisionNameEng>" + divisionNameEng + "</DivisionNameEng>");
                    _meterDivisionListRes.Append("<Townships>");
                    for (int t = 0; t < meterDivisionDs.Tables[1].Rows.Count; t++)
                    {
                        if (meterDivisionDs.Tables[1].Rows[t]["DIVISIONID"].ToString() == divisionId)
                        {
                            _meterDivisionListRes.Append("<Township>");
                            _meterDivisionListRes.Append("<TownshipCode>" + meterDivisionDs.Tables[1].Rows[t]["TOWNSHIPCODE"].ToString() + "</TownshipCode>");
                            _meterDivisionListRes.Append("<TownshipName>" + meterDivisionDs.Tables[1].Rows[t]["TOWNSHIPNAME"].ToString() + "</TownshipName>");
                            _meterDivisionListRes.Append("<TownshipNameEng>" + meterDivisionDs.Tables[1].Rows[t]["TOWNSHIPNAMEENG"].ToString() + "</TownshipNameEng>");
                            _meterDivisionListRes.Append("<Biller>" + meterDivisionDs.Tables[1].Rows[t]["BILLER"].ToString() + "</Biller>");
                            _meterDivisionListRes.Append("</Township>");
                        }
                    }
                    _meterDivisionListRes.Append("</Townships>");
                    _meterDivisionListRes.Append("</Division>");

                }
            }
            _meterDivisionListRes.Append("</Divisions>");
            _meterDivisionListRes.Append("</MeterDivisionListRes>");
        }
        catch (Exception ex)
        {
            writeLog("Exception Error occur in get StoreCard List:" + ex.Message.ToString());
        }
        return _meterDivisionListRes.ToString();

    }

    public MeterDevisionListReqData IsValidateMeterDevisionListReq(Hashtable ht)
    {
        MeterDevisionListReqData meterDivisionListReq = new MeterDevisionListReqData();


        meterDivisionListReq.validateResult = true;

        if (ht.ContainsKey("Version"))
        {
            meterDivisionListReq.version = ht["Version"].ToString();
        }
        else
        {
            meterDivisionListReq.rescode = "06";
            meterDivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            meterDivisionListReq.validateResult = false;
            return meterDivisionListReq;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            meterDivisionListReq.timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            meterDivisionListReq.rescode = "06";
            meterDivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            meterDivisionListReq.validateResult = false;
            return meterDivisionListReq;
        }
        if (ht.ContainsKey("Email"))
        {
            meterDivisionListReq.userid = ht["Email"].ToString();
        }
        else
        {
            meterDivisionListReq.rescode = "06";
            meterDivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            meterDivisionListReq.validateResult = false;
            return meterDivisionListReq;
        }

        if (ht.ContainsKey("Password"))
        {
            meterDivisionListReq.password = ht["Password"].ToString();
        }
        else
        {
            meterDivisionListReq.rescode = "06";
            meterDivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            meterDivisionListReq.validateResult = false;
            return meterDivisionListReq;
        }





        if (ht.ContainsKey("MessageID"))
        {
            meterDivisionListReq.messageid = ht["MessageID"].ToString();
        }
        else
        {
            meterDivisionListReq.rescode = "06";
            meterDivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            meterDivisionListReq.validateResult = false;
            return meterDivisionListReq;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(meterDivisionListReq.version) || String.IsNullOrEmpty(meterDivisionListReq.timeStamp) || String.IsNullOrEmpty(meterDivisionListReq.userid) || String.IsNullOrEmpty(meterDivisionListReq.password) || String.IsNullOrEmpty(meterDivisionListReq.messageid))//cardListReq.cardParPage < 1 || cardListReq.pageNo < 1 ||
        {
            meterDivisionListReq.rescode = "07";
            meterDivisionListReq.resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            meterDivisionListReq.validateResult = false;
            return meterDivisionListReq;
        }


        string code = string.Empty;
        string desp = string.Empty;

        meterDivisionListReq.validateResult = authentication(meterDivisionListReq.userid, meterDivisionListReq.password, out code, out desp);
        meterDivisionListReq.rescode = code;
        meterDivisionListReq.resdesc = desp;

        return meterDivisionListReq;

    }


    #endregion

    #region MarLarMyine product List
    public string MLMProductListReq(string reqXml)
    {
        MarlarMyineProductListReqData MLMReqData = new MarlarMyineProductListReqData();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        DataSet mlmProductDs = new DataSet();
        mlmProductDs = null;
        string response = string.Empty;
        string errMsg = string.Empty;
        try
        {
            MLMReqData = IsValidateMLMProductListReq(ht);
            if (MLMReqData.validateResult)
            {
                if (!_agentWCF.getMLMProductList(out mlmProductDs, out errMsg))
                {
                    response = Utils.GetErrorResponse("99", "System Error");
                    return response;
                }
                else
                {
                    return response = getMLMProductListResponse(mlmProductDs, MLMReqData);

                }
            }
            else
            {

                response = Utils.GetErrorResponse(MLMReqData.rescode, MLMReqData.resdesc);
                return response;
            }
        }
        catch (Exception ex)
        {
            response = Utils.GetErrorResponse("99", "System Error");

            writeLog("Exception error occur in MLMPRoductList Request:" + ex.Message);
        }
        return response;
    }

    public string getMLMProductListResponse(DataSet _mlmProductDs, MarlarMyineProductListReqData _mlmRequestData)
    {
        var _mlmProductListRes = new StringBuilder();
        try
        {
            _mlmProductListRes.Append("<MLMProductListRes>");
            _mlmProductListRes.Append("<ResCode>00</ResCode>");
            _mlmProductListRes.Append("<ResDesc>success</ResDesc>");
            _mlmProductListRes.Append("<Version>" + _mlmRequestData.version + "</Version>");
            _mlmProductListRes.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            _mlmProductListRes.Append("<MessageID>" + _mlmRequestData.messageid + "</MessageID>");

            _mlmProductListRes.Append("<Divisions>");
            if (_mlmProductDs.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < _mlmProductDs.Tables[0].Rows.Count; i++)
                {
                    string divisionId = _mlmProductDs.Tables[0].Rows[i]["DIVISIONID"].ToString();
                    string divisionName = _mlmProductDs.Tables[0].Rows[i]["DIVISIONNAME"].ToString();
                    string divisionNameMm = _mlmProductDs.Tables[0].Rows[i]["DIVISIONNAMEMM"].ToString();
                    _mlmProductListRes.Append("<Division>");
                    _mlmProductListRes.Append("<DivisionID>" + divisionId + "</DivisionID>");
                    _mlmProductListRes.Append("<DivisionName>" + divisionName + "</DivisionName>");
                    _mlmProductListRes.Append("<DivisionNameMm>" + divisionNameMm + "</DivisionNameMm>");
                    _mlmProductListRes.Append("<Townships>");
                    for (int t = 0; t < _mlmProductDs.Tables[1].Rows.Count; t++)
                    {
                        if (_mlmProductDs.Tables[1].Rows[t]["DIVISIONID"].ToString() == divisionId)
                        {
                            _mlmProductListRes.Append("<Township>");
                            _mlmProductListRes.Append("<TownshipCode>" + _mlmProductDs.Tables[1].Rows[t]["TOWNSHIPCODE"].ToString() + "</TownshipCode>");
                            _mlmProductListRes.Append("<TownshipName>" + _mlmProductDs.Tables[1].Rows[t]["TOWNSHIPNAME"].ToString() + "</TownshipName>");
                            _mlmProductListRes.Append("<TownshipNameMm>" + _mlmProductDs.Tables[1].Rows[t]["TOWNSHIPNAMEMM"].ToString() + "</TownshipNameMm>");
                            _mlmProductListRes.Append("</Township>");
                        }
                    }
                    _mlmProductListRes.Append("</Townships>");
                    _mlmProductListRes.Append("<Products>");

                    for (int u = 0; u < _mlmProductDs.Tables[2].Rows.Count; u++)
                    {
                        if (_mlmProductDs.Tables[2].Rows[u]["DIVISIONID"].ToString() == divisionId)
                        {
                            _mlmProductListRes.Append("<Product>");
                            _mlmProductListRes.Append("<ProductName>" + _mlmProductDs.Tables[2].Rows[u]["PRODUCTNAME"].ToString() + "</ProductName>");
                            _mlmProductListRes.Append("<Quantities>");
                            for (int qty = 0; qty < _mlmProductDs.Tables[3].Rows.Count; qty++)
                            {
                                if (_mlmProductDs.Tables[2].Rows[u]["PRODUCTID"].ToString() == _mlmProductDs.Tables[3].Rows[qty]["PRODUCTID"].ToString())
                                {
                                    _mlmProductListRes.Append("<Quantity>");
                                    _mlmProductListRes.Append("<QuantityName>" + _mlmProductDs.Tables[3].Rows[qty]["QUANTITY"].ToString() + "</QuantityName>");
                                    _mlmProductListRes.Append("<Prices>");
                                    for (int pri = 0; pri < _mlmProductDs.Tables[4].Rows.Count; pri++)
                                    {
                                        if (_mlmProductDs.Tables[3].Rows[qty]["PRODUCTQTYID"].ToString() == _mlmProductDs.Tables[4].Rows[pri]["PRODUCTQTYID"].ToString())
                                        {
                                            _mlmProductListRes.Append("<Price>");

                                            _mlmProductListRes.Append("<DisplayPrice>" + _mlmProductDs.Tables[4].Rows[pri]["DISPLAYPRICE"].ToString() + "</DisplayPrice>");
                                            _mlmProductListRes.Append("<Value>" + _mlmProductDs.Tables[4].Rows[pri]["PRICE"].ToString() + "</Value>");

                                            _mlmProductListRes.Append("</Price>");
                                        }
                                    }
                                    _mlmProductListRes.Append("</Prices>");
                                    _mlmProductListRes.Append("</Quantity>");
                                }
                            }
                            _mlmProductListRes.Append("</Quantities>");
                            _mlmProductListRes.Append("</Product>");
                        }
                    }

                    _mlmProductListRes.Append("</Products>");
                    _mlmProductListRes.Append("</Division>");

                }
            }
            _mlmProductListRes.Append("</Divisions>");
            _mlmProductListRes.Append("</MLMProductListRes>");
        }
        catch (Exception ex)
        {
            writeLog("Exception Error occur in get StoreCard List:" + ex.Message.ToString());
        }
        return _mlmProductListRes.ToString();

    }
    public MarlarMyineProductListReqData IsValidateMLMProductListReq(Hashtable ht)
    {
        return IsValidateMCProductListReq(ht);
    }


    #endregion

    #region MercyCrops Product List
    public string MercyCropsProductListReq(string reqXml)
    {
        MarlarMyineProductListReqData MLMReqData = new MarlarMyineProductListReqData();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        var mlmProductDs = new DataSet();
        mlmProductDs = null;
        string response = string.Empty;
        string errMsg = string.Empty;
        try
        {
            MLMReqData = IsValidateMCProductListReq(ht);
            if (MLMReqData.validateResult)
            {
                if (!_agentWCF.getMCProductList(out mlmProductDs, out errMsg))
                {
                    response = Utils.GetErrorResponse("99", "System Error");
                    return response;
                }
                else
                {
                    return response = getMCProductListResponse(mlmProductDs, MLMReqData);

                }
            }
            else
            {

                response = Utils.GetErrorResponse(MLMReqData.rescode, MLMReqData.resdesc);
                return response;
            }
        }
        catch (Exception ex)
        {
            response = Utils.GetErrorResponse("99", "System Error");

            writeLog("Exception error occur in MCPRoductList Request:" + ex.Message);
        }
        return response;
    }

    public string getMCProductListResponse(DataSet _mlmProductDs, MarlarMyineProductListReqData _mlmRequestData)
    {
        StringBuilder _mlmProductListRes = new StringBuilder();
        try
        {

            _mlmProductListRes.Append("<MercyCropsProductListRes>");
            _mlmProductListRes.Append("<ResCode>00</ResCode>");
            _mlmProductListRes.Append("<ResDesc>success</ResDesc>");
            _mlmProductListRes.Append("<Version>" + _mlmRequestData.version + "</Version>");
            _mlmProductListRes.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            _mlmProductListRes.Append("<MessageID>" + _mlmRequestData.messageid + "</MessageID>");

            _mlmProductListRes.Append("<Divisions>");
            if (_mlmProductDs.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < _mlmProductDs.Tables[0].Rows.Count; i++)
                {
                    string divisionId = _mlmProductDs.Tables[0].Rows[i]["DIVISIONID"].ToString();
                    string divisionName = _mlmProductDs.Tables[0].Rows[i]["DIVISIONNAME"].ToString();
                    string divisionNameMm = _mlmProductDs.Tables[0].Rows[i]["DIVISIONNAMEMM"].ToString();
                    _mlmProductListRes.Append("<Division>");
                    _mlmProductListRes.Append("<DivisionID>" + divisionId + "</DivisionID>");
                    _mlmProductListRes.Append("<DivisionName>" + divisionName + "</DivisionName>");
                    _mlmProductListRes.Append("<DivisionNameMm>" + divisionNameMm + "</DivisionNameMm>");
                    _mlmProductListRes.Append("<Townships>");
                    for (int t = 0; t < _mlmProductDs.Tables[1].Rows.Count; t++)
                    {
                        if (_mlmProductDs.Tables[1].Rows[t]["DIVISIONID"].ToString() == divisionId)
                        {
                            _mlmProductListRes.Append("<Township>");
                            _mlmProductListRes.Append("<TownshipCode>" + _mlmProductDs.Tables[1].Rows[t]["TOWNSHIPCODE"].ToString() + "</TownshipCode>");
                            _mlmProductListRes.Append("<TownshipName>" + _mlmProductDs.Tables[1].Rows[t]["TOWNSHIPNAME"].ToString() + "</TownshipName>");
                            _mlmProductListRes.Append("<TownshipNameMm>" + _mlmProductDs.Tables[1].Rows[t]["TOWNSHIPNAMEMM"].ToString() + "</TownshipNameMm>");
                            _mlmProductListRes.Append("</Township>");
                        }
                    }
                    _mlmProductListRes.Append("</Townships>");
                    _mlmProductListRes.Append("<Products>");

                    for (int u = 0; u < _mlmProductDs.Tables[2].Rows.Count; u++)
                    {
                        if (_mlmProductDs.Tables[2].Rows[u]["DIVISIONID"].ToString() == divisionId)
                        {
                            _mlmProductListRes.Append("<Product>");
                            _mlmProductListRes.Append("<ProductName>" + _mlmProductDs.Tables[2].Rows[u]["PRODUCTNAME"].ToString() + "</ProductName>");
                            _mlmProductListRes.Append("<Quantities>");
                            for (int qty = 0; qty < _mlmProductDs.Tables[3].Rows.Count; qty++)
                            {
                                if (_mlmProductDs.Tables[2].Rows[u]["PRODUCTID"].ToString() == _mlmProductDs.Tables[3].Rows[qty]["PRODUCTID"].ToString())
                                {
                                    _mlmProductListRes.Append("<Quantity>");
                                    _mlmProductListRes.Append("<QuantityName>" + _mlmProductDs.Tables[3].Rows[qty]["QUANTITY"].ToString() + "</QuantityName>");
                                    _mlmProductListRes.Append("<Prices>");
                                    for (int pri = 0; pri < _mlmProductDs.Tables[4].Rows.Count; pri++)
                                    {
                                        if (_mlmProductDs.Tables[3].Rows[qty]["PRODUCTQTYID"].ToString() == _mlmProductDs.Tables[4].Rows[pri]["PRODUCTQTYID"].ToString())
                                        {
                                            _mlmProductListRes.Append("<Price>");

                                            _mlmProductListRes.Append("<DisplayPrice>" + _mlmProductDs.Tables[4].Rows[pri]["DISPLAYPRICE"].ToString() + "</DisplayPrice>");
                                            _mlmProductListRes.Append("<Value>" + _mlmProductDs.Tables[4].Rows[pri]["PRICE"].ToString() + "</Value>");

                                            _mlmProductListRes.Append("</Price>");
                                        }
                                    }
                                    _mlmProductListRes.Append("</Prices>");
                                    _mlmProductListRes.Append("</Quantity>");
                                }
                            }
                            _mlmProductListRes.Append("</Quantities>");
                            _mlmProductListRes.Append("</Product>");
                        }
                    }

                    _mlmProductListRes.Append("</Products>");
                    _mlmProductListRes.Append("</Division>");
                }
            }
            _mlmProductListRes.Append("</Divisions>");
            _mlmProductListRes.Append("</MercyCropsProductListRes>");
        }
        catch (Exception ex)
        {
            writeLog("Exception Error occur in get StoreCard List:" + ex.Message.ToString());
        }
        return _mlmProductListRes.ToString();

    }
    public MarlarMyineProductListReqData IsValidateMCProductListReq(Hashtable ht)
    {
        MarlarMyineProductListReqData mlmProductListReq = new MarlarMyineProductListReqData();


        mlmProductListReq.validateResult = true;

        if (ht.ContainsKey("Version"))
        {
            mlmProductListReq.version = ht["Version"].ToString();
        }
        else
        {
            mlmProductListReq.rescode = "06";
            mlmProductListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            mlmProductListReq.validateResult = false;
            return mlmProductListReq;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            mlmProductListReq.timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            mlmProductListReq.rescode = "06";
            mlmProductListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            mlmProductListReq.validateResult = false;
            return mlmProductListReq;
        }
        if (ht.ContainsKey("Email"))
        {
            mlmProductListReq.userid = ht["Email"].ToString();
        }
        else
        {
            mlmProductListReq.rescode = "06";
            mlmProductListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            mlmProductListReq.validateResult = false;
            return mlmProductListReq;
        }

        if (ht.ContainsKey("Password"))
        {
            mlmProductListReq.password = ht["Password"].ToString();
        }
        else
        {
            mlmProductListReq.rescode = "06";
            mlmProductListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            mlmProductListReq.validateResult = false;
            return mlmProductListReq;
        }





        if (ht.ContainsKey("MessageID"))
        {
            mlmProductListReq.messageid = ht["MessageID"].ToString();
        }
        else
        {
            mlmProductListReq.rescode = "06";
            mlmProductListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            mlmProductListReq.validateResult = false;
            return mlmProductListReq;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(mlmProductListReq.version) || String.IsNullOrEmpty(mlmProductListReq.timeStamp) || String.IsNullOrEmpty(mlmProductListReq.userid) || String.IsNullOrEmpty(mlmProductListReq.password) || String.IsNullOrEmpty(mlmProductListReq.messageid))//cardListReq.cardParPage < 1 || cardListReq.pageNo < 1 ||
        {
            mlmProductListReq.rescode = "07";
            mlmProductListReq.resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            mlmProductListReq.validateResult = false;
            return mlmProductListReq;
        }


        string code = string.Empty;
        string desp = string.Empty;

        mlmProductListReq.validateResult = authentication(mlmProductListReq.userid, mlmProductListReq.password, out code, out desp);
        mlmProductListReq.rescode = code;
        mlmProductListReq.resdesc = desp;

        return mlmProductListReq;

    }
    #endregion

    #region Store Card
    public string StoreCardListReq(string reqXml)
    {

        StoreCardListRequestData storeCardListReq = new StoreCardListRequestData();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        DataSet storeCardDs = new DataSet();
        storeCardDs = null;
        string response = string.Empty;
        string errMsg = string.Empty;
        try
        {
            storeCardListReq = IsValidateStoreCardReq(ht);

            if (storeCardListReq.validateResult)
            {
                if (_agentWCF.getStoreCardListByAgentID(agentid, storeCardListReq.pageNo, storeCardListReq.cardParPage, out storeCardDs, out errMsg))
                {

                    return response = getStoreCardListResponse(storeCardDs, storeCardListReq);

                }
            }
            else
            {

                response = Utils.GetErrorResponse(storeCardListReq.rescode, storeCardListReq.resdesc);
                return response;
            }
        }
        catch (Exception ex)
        {
            response = Utils.GetErrorResponse("99", "System Error");

            writeLog("Exception error occur in StoreCardListRequest:" + ex.Message);
        }
        return response;
    }
    public string getStoreCardListResponse(DataSet StoreCardDataset, StoreCardListRequestData storeCardListReq)
    {
        StringBuilder _stroeCardListResponse = new StringBuilder();
        string totalcount = string.Empty;
        try
        {
            if (StoreCardDataset.Tables[1].Rows.Count > 0)
            {
                totalcount = StoreCardDataset.Tables[1].Rows[0]["TOTALCARD"].ToString();
            }


            _stroeCardListResponse.Append("<StoreCardListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + totalcount + "\" cardPerPage=" + "\"" + storeCardListReq.cardParPage + "\" pageNo=" + "\"" + storeCardListReq.pageNo + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + storeCardListReq.messageid + "\"" + ">");

            if (StoreCardDataset.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < StoreCardDataset.Tables[0].Rows.Count; i++)
                {
                    string expiry = string.Empty;
                    expiry = StoreCardDataset.Tables[0].Rows[i]["EXPIRY"].ToString();
                    _stroeCardListResponse.Append("<StoreCard storeCardID=" + "\"" + StoreCardDataset.Tables[0].Rows[i]["STORECARDID"].ToString() + "\" agentID=" + "\"" +
                            StoreCardDataset.Tables[0].Rows[i]["AGENTID"].ToString() + "\" name=" + "\"" +
                            StoreCardDataset.Tables[0].Rows[i]["NAME"].ToString() + "\" panmask=" + "\"" +
                            StoreCardDataset.Tables[0].Rows[i]["PANMASK"].ToString() + "\" expiryDate=" + "\"" +
                            expiry + "\" isDefault=" + "\"" + StoreCardDataset.Tables[0].Rows[i]["ISDEFAULT"].ToString() + "\" />");

                }
            }
            _stroeCardListResponse.Append("</StoreCardListRes>");
        }
        catch (Exception ex)
        {
            writeLog("Exception Error occur in get StoreCard List:" + ex.Message.ToString());
        }
        return _stroeCardListResponse.ToString();

    }
    public StoreCardListRequestData IsValidateStoreCardReq(Hashtable ht)
    {
        StoreCardListRequestData cardListReq = new StoreCardListRequestData();


        cardListReq.validateResult = true;

        if (ht.ContainsKey("Version"))
        {
            cardListReq.version = ht["Version"].ToString();
        }
        else
        {
            cardListReq.rescode = "06";
            cardListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            cardListReq.validateResult = false;
            return cardListReq;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            cardListReq.timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            cardListReq.rescode = "06";
            cardListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            cardListReq.validateResult = false;
            return cardListReq;
        }
        if (ht.ContainsKey("Email"))
        {
            cardListReq.userid = ht["Email"].ToString();
        }
        else
        {
            cardListReq.rescode = "06";
            cardListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            cardListReq.validateResult = false;
            return cardListReq;
        }

        if (ht.ContainsKey("Password"))
        {
            cardListReq.password = ht["Password"].ToString();
        }
        else
        {
            cardListReq.rescode = "06";
            cardListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            cardListReq.validateResult = false;
            return cardListReq;
        }

        if (ht.ContainsKey("CardPerPage"))
        {
            try
            {
                cardListReq.cardParPage = Convert.ToInt16(ht["CardPerPage"]);
            }
            catch (Exception ex)
            {
                cardListReq.rescode = "06";
                cardListReq.resdesc = "Invalid Request";
                writeLog("Error in parsing CardPerPage :" + ex.Message);
                cardListReq.validateResult = false;
                return cardListReq;
            }
        }
        else
        {
            cardListReq.rescode = "06";
            cardListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <CardPerPage> Tag");
            cardListReq.validateResult = false;
            return cardListReq;
        }

        if (ht.ContainsKey("PageNo"))
        {
            try
            {
                cardListReq.pageNo = Convert.ToInt16(ht["PageNo"]);
            }
            catch (Exception ex)
            {
                cardListReq.rescode = "06";
                cardListReq.resdesc = "Invalid Request";
                writeLog("Error in parsing PageNo :" + ex.Message);
                cardListReq.validateResult = false;
                return cardListReq;
            }
        }
        else
        {
            cardListReq.rescode = "06";
            cardListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing PageNo <PageNo> Tag");
            cardListReq.validateResult = false;
            return cardListReq;
        }

        if (ht.ContainsKey("MessageID"))
        {
            cardListReq.messageid = ht["MessageID"].ToString();
        }
        else
        {
            cardListReq.rescode = "06";
            cardListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            cardListReq.validateResult = false;
            return cardListReq;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(cardListReq.version) || String.IsNullOrEmpty(cardListReq.timeStamp) || String.IsNullOrEmpty(cardListReq.userid) || String.IsNullOrEmpty(cardListReq.password) || String.IsNullOrEmpty(cardListReq.messageid))//cardListReq.cardParPage < 1 || cardListReq.pageNo < 1 ||
        {
            cardListReq.rescode = "07";
            cardListReq.resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            cardListReq.validateResult = false;
            return cardListReq;
        }


        string code = string.Empty;
        string desp = string.Empty;

        cardListReq.validateResult = authentication(cardListReq.userid, cardListReq.password, out code, out desp);
        cardListReq.rescode = code;
        cardListReq.resdesc = desp;

        return cardListReq;

    }



    public string SetDefaultCardReq(string reqXml)
    {
        SetDefaultCardReqData setdefaultcardReqData = new SetDefaultCardReqData();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string response = string.Empty;
        string errMsg = string.Empty;

        try
        {
            setdefaultcardReqData = IsValidateSetDefaultCardReq(ht);
            if (setdefaultcardReqData.validateResult)
            {
                if (_agentWCF.setDefaultStoreCard(long.Parse(setdefaultcardReqData.storecardid), agentid, out errMsg))
                {
                    var sb = new StringBuilder();
                    sb.Append("<SetDefaultCardRes>");
                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<MessageID>" + setdefaultcardReqData.messageid + "</MessageID>");
                    sb.Append("<Email>" + setdefaultcardReqData.userid + "</Email>");
                    sb.Append("<Password>" + setdefaultcardReqData.password + "</Password>");
                    sb.Append("<ResCode>" + setdefaultcardReqData.rescode + "</ResCode>");
                    sb.Append("<ResDesc>" + setdefaultcardReqData.resdesc + "</ResDesc>");
                    sb.Append("</SetDefaultCardRes>");
                    response = sb.ToString();
                    writeLog("SetDefaultCard Response OK");
                    return response;
                }
                else
                {
                    response = Utils.GetErrorResponse("99", "System Error");
                    writeLog(" Error Occur in calling SetDefaultCardReq WCF:" + errMsg);
                    return response;
                }
                //Valadation Is True Doing SetDefaultCard Process
            }
            else
            {
                //Send Valadation fail Error Response To Client
                response = Utils.GetErrorResponse(setdefaultcardReqData.rescode, setdefaultcardReqData.resdesc);
                return response;
            }
        }
        catch (Exception ex)
        {
            response = Utils.GetErrorResponse("99", "System Error");

            writeLog("Exception Error Occur in SetDefaultCardReq:" + ex.Message);
        }
        return response;
    }

    public SetDefaultCardReqData IsValidateSetDefaultCardReq(Hashtable ht)
    {
        SetDefaultCardReqData setdefaultReqData = new SetDefaultCardReqData();

        setdefaultReqData.validateResult = true;


        if (ht.ContainsKey("Version"))
        {
            setdefaultReqData.version = ht["Version"].ToString();
        }
        else
        {
            setdefaultReqData.rescode = "06";
            setdefaultReqData.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            setdefaultReqData.validateResult = false;
            return setdefaultReqData;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            setdefaultReqData.timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            setdefaultReqData.rescode = "06";
            setdefaultReqData.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            setdefaultReqData.validateResult = false;
            return setdefaultReqData;
        }
        if (ht.ContainsKey("Email"))
        {
            setdefaultReqData.userid = ht["Email"].ToString();
        }
        else
        {
            setdefaultReqData.rescode = "06";
            setdefaultReqData.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            setdefaultReqData.validateResult = false;
            return setdefaultReqData;
        }

        if (ht.ContainsKey("Password"))
        {
            setdefaultReqData.password = ht["Password"].ToString();
        }
        else
        {
            setdefaultReqData.rescode = "06";
            setdefaultReqData.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            setdefaultReqData.validateResult = false;
            return setdefaultReqData;
        }





        if (ht.ContainsKey("MessageID"))
        {
            setdefaultReqData.messageid = ht["MessageID"].ToString();
        }
        else
        {
            setdefaultReqData.rescode = "06";
            setdefaultReqData.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            setdefaultReqData.validateResult = false;
            return setdefaultReqData;
        }
        if (ht.ContainsKey("StoreCardID"))
        {
            setdefaultReqData.storecardid = ht["StoreCardID"].ToString();
        }
        else
        {
            setdefaultReqData.rescode = "06";
            setdefaultReqData.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing StoreCardID <StoreCardID> Tag");
            setdefaultReqData.validateResult = false;
            return setdefaultReqData;
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(setdefaultReqData.version) || String.IsNullOrEmpty(setdefaultReqData.timeStamp) || String.IsNullOrEmpty(setdefaultReqData.userid) || String.IsNullOrEmpty(setdefaultReqData.password) || string.IsNullOrEmpty(setdefaultReqData.storecardid) || String.IsNullOrEmpty(setdefaultReqData.messageid))
        {
            setdefaultReqData.rescode = "07";
            setdefaultReqData.resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            setdefaultReqData.validateResult = false;
            return setdefaultReqData;
        }


        string code = string.Empty;
        string desp = string.Empty;

        setdefaultReqData.validateResult = authentication(setdefaultReqData.userid, setdefaultReqData.password, out code, out desp);
        setdefaultReqData.rescode = code;
        setdefaultReqData.resdesc = desp;

        return setdefaultReqData;


    }

    public string RemoveCardReq(string reqXml)
    {
        SetDefaultCardReqData removeCardReqData = new SetDefaultCardReqData();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string response = string.Empty;
        string errMsg = string.Empty;

        try
        {
            removeCardReqData = IsValidateSetDefaultCardReq(ht);
            if (removeCardReqData.validateResult)
            {
                //doing  remove card process
                if (_agentWCF.removeStoreCard(long.Parse(removeCardReqData.storecardid), agentid, out errMsg))
                {
                    var sb = new StringBuilder();
                    sb.Append("<RemoveCardRes>");
                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<MessageID>" + removeCardReqData.messageid + "</MessageID>");
                    sb.Append("<Email>" + removeCardReqData.userid + "</Email>");
                    sb.Append("<Password>" + removeCardReqData.password + "</Password>");
                    sb.Append("<ResCode>" + removeCardReqData.rescode + "</ResCode>");
                    sb.Append("<ResDesc>" + removeCardReqData.resdesc + "</ResDesc>");
                    sb.Append("</RemoveCardRes>");
                    response = sb.ToString();
                    writeLog("RemoveCard  OK");
                    return response;
                }
                else
                {
                    //Response Error Message to client
                    response = Utils.GetErrorResponse("99", "System Error");
                    writeLog(" Error Occur in calling SetDefaultCardReq WCF:" + errMsg);
                    return response;
                }
            }
            else
            {
                //Response validation fail Error To Client
                response = Utils.GetErrorResponse(removeCardReqData.rescode, removeCardReqData.resdesc);
                return response;
            }
        }
        catch (Exception ex)
        {
            //Response Error To Client
            response = Utils.GetErrorResponse("99", "System Error");

            writeLog("Exception Error Occur in SetDefaultCardReq:" + ex.Message);
        }
        return response;
    }


    #endregion

    #region Amount List

    private string DenominationListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string taxid = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateAmountListReq(ht, out code, out desp, out version, out ts, out email, out password, out taxid)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        try
        {
            StringBuilder sb = new StringBuilder();

            writeLog("TaxId is : " + taxid);
            if (taxid == ConfigurationManager.AppSettings["HiWifi"]
                || taxid == ConfigurationManager.AppSettings["MyanmarNetAwaThone"] || taxid == ConfigurationManager.AppSettings["MyanmarNetData"]
                || taxid == ConfigurationManager.AppSettings["MyanmarNetPrepaid"] || taxid == ConfigurationManager.AppSettings["WunZinnMapTaxId"])
            {
                MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
                writeLog("Get GiftCard Deno List from EBA");
                var denoResponse = bis.GetGiftCardDenoList(taxid);
                if (!string.IsNullOrEmpty(denoResponse))
                {
                    var list = JsonConvert.DeserializeObject<Detail>(denoResponse);
                    if (!string.IsNullOrEmpty(list.Deno))
                    {

                        var deno = list.Deno.Replace('{', ' ').Replace('}', ' ');
                        var denolist = deno.Split(',').ToList();
                        if (denolist.Count > 0)
                        {
                            sb.Append("<DenominationListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + denolist.Count.ToString() + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"" + ">");
                            foreach (var each in denolist)
                            {
                                sb.Append("<Denomination  value=" + "\"" + Convert.ToDouble(each) + "\" text=" + "\"" + Convert.ToDouble(each) + " Ks" + "\"" + " productCode=\"" + string.Empty + "\" />");
                            }
                            sb.Append("</DenominationListRes>");
                        }
                    }

                    return sb.ToString();
                }
            }


            else if (taxid == ConfigurationManager.AppSettings["OnDoctorTaxId"]
                || taxid == ConfigurationManager.AppSettings["ViuTaxId"]
                || taxid == ConfigurationManager.AppSettings["CookieTVTaxId"]
                || taxid == ConfigurationManager.AppSettings["XboxOneTaxId"]
                || taxid == ConfigurationManager.AppSettings["FlexiblePassTaxId"]
                || taxid == ConfigurationManager.AppSettings["PlayStationNetworkTaxId"]
                || taxid == ConfigurationManager.AppSettings["RazerGoldPinMMKTaxId"]
                || taxid == ConfigurationManager.AppSettings["PlayStationPlusUSTaxId"]
                || taxid == ConfigurationManager.AppSettings["AtomDataPackTaxId"]
                || taxid == ConfigurationManager.AppSettings["MobileLegendTaxId"]
                || taxid == ConfigurationManager.AppSettings["GrabMyanmarTaxId"]
                || taxid == ConfigurationManager.AppSettings["SmileCinemaTaxId"]
                || taxid == ConfigurationManager.AppSettings["TFitnessTaxId"]
                || taxid == ConfigurationManager.AppSettings["JooxTaxId"].ToString()
                || taxid == ConfigurationManager.AppSettings["iTunesTaxId"].ToString()
                || taxid == ConfigurationManager.AppSettings["GooglePlayTaxId"].ToString()
                || taxid == ConfigurationManager.AppSettings["MyPlayTaxId"].ToString()
                || taxid == ConfigurationManager.AppSettings["SteamWalletTaxId"].ToString()
                || taxid == ConfigurationManager.AppSettings["VakovTaxId"].ToString()
                || taxid == ConfigurationManager.AppSettings["SteamWalletSGDMapTaxId"].ToString()
                || taxid == ConfigurationManager.AppSettings["AnandaEPin"]
                || taxid == ConfigurationManager.AppSettings["MaharMobileTaxId"]
                || taxid == ConfigurationManager.AppSettings["LaLaKyiId"]
                || taxid == ConfigurationManager.AppSettings["YTalkTaxId"]
                || taxid == ConfigurationManager.AppSettings["WasoLearnTaxId"]
                || taxid == ConfigurationManager.AppSettings["PubgUC"]
                || taxid == ConfigurationManager.AppSettings["myCanalTaxId"]
                || taxid == ConfigurationManager.AppSettings["GrabRideTaxId"]
                || taxid == ConfigurationManager.AppSettings["GrabFoodTaxId"]
                || taxid == ConfigurationManager.AppSettings["ShweStreamTaxId"])
            {

                MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
                writeLog("Get Product List from EBA");
                var productListResponse = bis.GetProductList(taxid);
                var result = JsonConvert.DeserializeObject<ProductEnquiryResponse>(productListResponse);

                if (result.billerProduct.Count > 0)
                {
                    if (taxid == ConfigurationManager.AppSettings["myCanalTaxId"])
                    {
                        result.billerProduct = OrdermyCanalProductList(result.billerProduct);
                    }

                    sb.Append("<DenominationListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + result.billerProduct.Count.ToString() + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"" + ">");
                    foreach (var each in result.billerProduct)
                    {
                        if (taxid == ConfigurationManager.AppSettings["ViuTaxId"])
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.Transactionamount + "\" text=" + "\"" + each.description + "\"" + " productCode=\"" + string.Empty + "\" />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["XBoxOneTaxId"]
                            || taxid == ConfigurationManager.AppSettings["PlayStationNetworkTaxId"]
                            || taxid == ConfigurationManager.AppSettings["RazerGoldPinMMKTaxId"]
                            || taxid == ConfigurationManager.AppSettings["MobileLegendTaxId"]
                            || taxid == ConfigurationManager.AppSettings["GrabMyanmarTaxId"]
                            || taxid == ConfigurationManager.AppSettings["SmileCinemaTaxId"]
                            || taxid == ConfigurationManager.AppSettings["TFitnessTaxId"]
                            || taxid == ConfigurationManager.AppSettings["JooxTaxId"].ToString()
                            || taxid == ConfigurationManager.AppSettings["myCanalTaxId"]
                            )
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.Transactionamount + "\" text=" + "\"" + each.description + "\" productCode=" + "\"" + each.code + "\" />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["PlayStationPlusUSTaxId"])
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.billingAmount + " $" + "\" text=" + "\"" + each.description + "\" productCode=" + "\"" + each.code + "\" txnAmt=" + "\"" + each.Transactionamount + "\"  />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["iTunesTaxId"].ToString() || taxid == ConfigurationManager.AppSettings["GooglePlayTaxId"].ToString()
                            || taxid == ConfigurationManager.AppSettings["SteamWalletTaxId"].ToString())
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.billingAmount + "\" text=" + "\"" + each.description + " $" + "\" productCode=" + "\"" + each.code + "\" txnAmt=" + "\"" + each.Transactionamount + "\"  />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["SteamWalletSGDMapTaxId"].ToString())
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.billingAmount + "\" text=" + "\"" + each.description + " S$" + "\" productCode=" + "\"" + each.code + "\" txnAmt=" + "\"" + each.Transactionamount + "\"  />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["VakovTaxId"].ToString() || taxid == ConfigurationManager.AppSettings["ShweStreamTaxId"].ToString())
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.Transactionamount + "\" text=" + "\"" + each.description + " Ks" + "\"" + " productCode=\"" + each.code + "\" />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["MyPlayTaxId"].ToString() || taxid == ConfigurationManager.AppSettings["AnandaEPin"].ToString() ||
                            taxid == ConfigurationManager.AppSettings["MaharMobileTaxId"] || taxid == ConfigurationManager.AppSettings["LaLaKyiId"] || taxid == ConfigurationManager.AppSettings["YTalkTaxId"])
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.Transactionamount + "\" text=" + "\"" + each.description + " Ks." + "\"" + " productCode=\"" + each.code + "\" />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["GrabRideTaxId"])
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.Transactionamount + "\" text=" + "\"" + each.code + " Ks" + "\"" + " productCode=\"" + each.code + "\" />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["GrabRideTaxId"] || taxid == ConfigurationManager.AppSettings["GrabFoodTaxId"])
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.Transactionamount + "\" text=" + "\"" + each.code + " Ks" + "\"" + " productCode=\"" + each.code + "\" />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["AtomDataPackTaxId"])
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.billingAmount + "\" text=" + "\"" + each.description + "\" productCode=" + "\"" + each.code + "\" txnAmt=" + "\"" + each.Transactionamount + "\"  />");
                        }
                        else if (taxid == ConfigurationManager.AppSettings["PubgUC"])
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.code + "\" text=" + "\"" + each.description + "\" txnAmt=\"" + each.Transactionamount + "\" />");
                        }
                        else
                        {
                            sb.Append("<Denomination  value=" + "\"" + each.code + "\" text=" + "\"" + each.description + "\" productCode=\"" + string.Empty + "\" />");
                        }
                    }
                    sb.Append("</DenominationListRes>");
                }
                return sb.ToString();
            }

            else if (_agentWCF.get_Denomination(taxid, out ds, out errmsg))
            {

                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataTable dt = getDenomination(ds.Tables[0].Rows[0]["DENOMINATIONXML"].ToString());
                    sb.Append("<DenominationListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" +
                              "\"1.0\" total=" + "\"" + dt.Rows.Count.ToString() + "\" timeStamp=" + "\"" +
                              DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"" + ">");
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        sb.Append("<Denomination  value=" + "\"" + dt.Rows[i][1].ToString() + "\" text=" + "\"" +
                                  dt.Rows[i][0].ToString() + "\"" + " productCode=\"" + string.Empty + "\" />");
                    }
                    sb.Append("</DenominationListRes>");
                }
                writeLog("Denomination List:" + sb.ToString());
                return sb.ToString();

            }
        }
        catch (Exception ex)
        {
            writeLog("Error in DenominationListReq : " + ex.ToString());
        }

        return string.Empty;
    }

    private List<BillerProduct> OrdermyCanalProductList(List<BillerProduct> products)
    {
        writeLog("In OrdermyCanalProductList");
        var myCanalBillerProducts = new List<myCanalBillerProduct>();

        for (var i = 0; i < products.Count; i++)
        {
            var canalBillerProduct = new myCanalBillerProduct();
            writeLog("Products [" + i + "] " + JsonConvert.SerializeObject(products[i]));
            canalBillerProduct.BillerProduct = products[i];
            string[] splitedString = products[i].description.Split(' ');
            writeLog("Splited String : " + splitedString[0]);
            canalBillerProduct.PackageName = splitedString[0];
            int packageDay = int.Parse(System.Text.RegularExpressions.Regex.Match(products[i].description, @"\d+").Value.ToString());
            canalBillerProduct.PackageDay = packageDay;
            myCanalBillerProducts.Add(canalBillerProduct);
        }
        writeLog("Before Ordering myCanalProductList : " + JsonConvert.SerializeObject(myCanalBillerProducts));
        myCanalBillerProducts = myCanalBillerProducts.OrderBy(x => x.PackageName).ThenBy(x => x.PackageDay).ToList();
        var newBillerProduct = new List<BillerProduct>();
        foreach (var product in myCanalBillerProducts)
        {
            newBillerProduct.Add(product.BillerProduct);
        }
        writeLog("After Ordering myCanalProductList : " + JsonConvert.SerializeObject(newBillerProduct));
        return newBillerProduct;
    }

    public string GetEventListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string taxid = string.Empty;

        var sb = new StringBuilder();

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateAmountListReq(ht, out code, out desp, out version, out ts, out email, out password, out taxid)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        var bis = new MA2AAPI.BISWCF.ServiceClient();
        var denoResponse = bis.GetGiftCardDenoList(taxid);

        if (!string.IsNullOrEmpty(denoResponse))
        {
            writeLog("MyanPwel Event List. " + denoResponse);
            var detail = JsonConvert.DeserializeObject<dynamic>(denoResponse);

            sb.Append("<GetEventListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + ts + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<Events>");
            foreach (var each in detail.eventList)
            {
                sb.Append("<Event>");
                sb.Append("<EventId>" + each.id + "</EventId>");
                sb.Append("<EventTitle>" + each.title + "</EventTitle>");
                sb.Append("<EventStartDate>" + each.eventStartDate + "</EventStartDate>");
                sb.Append("<EventEndDate>" + each.eventEndDate + "</EventEndDate>");
                sb.Append("<IsNrcRequire>" + each.nrcRequired + "</IsNrcRequire>");
                sb.Append("</Event>");
            }

            sb.Append("</Events>");
            sb.Append("</GetEventListRes>");
        }
        else
        {
            return Utils.GetErrorResponse("06", "No respond found");
        }

        return sb.ToString();
    }

    public DataTable getDenomination(string sourceXml)
    {
        DataSet dsTemp = null;
        dsTemp = Utils.ConvertXMLtoDataset(sourceXml);

        return dsTemp.Tables[0];
    }

    bool IsValidateAmountListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string taxid) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";
        taxid = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;



        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }
        if (ht.ContainsKey("taxID"))
        {
            taxid = ht["taxID"].ToString();
            if (string.IsNullOrEmpty(taxid))
                taxid = "0";
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing billerID <taxID> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(taxid))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
                this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }

    #endregion

    #region Mother Finance Lona Registration Inquiry Req
    private string MFLoanRegistrationInquiryReq(string reqXml)
    {
        var sb = new StringBuilder();
        string code = string.Empty;
        string desp = string.Empty;
        string errMsg = string.Empty;
        string customerFee = "0";
        DataSet ds = null;
        try
        {
            Hashtable ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateMFLoanRegistrationInquiryReq(ht, out code, out desp))
            {
                sb.Append("<Error>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + desp + "</ResDesc>");
                sb.Append("</Error>");
            }

            if (_agentWCF.getMFLoanType(out ds, out errMsg))
            {
                DataTable dt = ds.Tables[0];
                customerFee = ConfigurationManager.AppSettings["MFLoanRegistrationCustomerFee"].ToString();
                sb.Append(string.Format("<MFLoanRegistrationInquiryRes ResCode=\"00\" ResDesc=\"Success\" Total=\"{0}\" >", dt.Rows.Count));
                sb.Append("<MFLoanType>");
                foreach (DataRow dr in dt.Rows)
                {
                    sb.Append(string.Format("<LoanType value=\"{0}\" text=\"{1}\" />", dr["Id"], dr["Description"]));
                }
                sb.Append("</MFLoanType>");
                sb.Append(string.Format("<CustomerFee>{0}</CustomerFee>", customerFee));
                sb.Append("</MFLoanRegistrationInquiryRes>");
                writeLog(string.Format("MFLoanRegistrationInquiryRes: {0}", sb.ToString()));
            }
        }
        catch (Exception ex)
        {
            code = "99";
            desp = "System Error";
            writeLog(string.Format("Error in MFLoanRegistrationInquiryRes: {0}", ex.Message.ToString()));
            sb.Append("<Error>");
            sb.Append("<ResCode>" + code + "</ResCode>");
            sb.Append("<ResDesc>" + desp + "</ResDesc>");
            sb.Append("</Error>");
        }
        return sb.ToString();
    }

    private bool IsValidateMFLoanRegistrationInquiryReq(Hashtable ht, out string code, out string desp) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";
        string email = string.Empty;
        string password = string.Empty;

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
                this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }
    #endregion

    #region LoginReq
    public string LoginReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string aggrementType = string.Empty;
        string TodayTxnCount = string.Empty;
        string TodayTxnAmount = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string LogIn_DeviceID = string.Empty;
        string DB_DeviceID = string.Empty;
        string agentUserID = string.Empty;
        string IsPair = string.Empty;
        string devicetoken = string.Empty;
        string agentCode = string.Empty;
        string appVersion = string.Empty;
        string deviceInfo = string.Empty;
        string showbal = string.Empty;
        string newappversion = string.Empty;
        string token = string.Empty;
        newappversion = ConfigurationManager.AppSettings["newversion"].ToString();
        string isupdate = "N";
        string termsAndConditions = "0";
        string terminalId = string.Empty;
        string loginType = string.Empty;
        var profileId = string.Empty;
        var isDemoModeOn = "N";
        string verifyStatus = string.Empty;
        string verifyDescription = string.Empty;
        string verifyDialogueShow = string.Empty;
        string verifyDialogueTitle = string.Empty;
        string userProfileImage = string.Empty;
        string userProfileWithId = string.Empty;
        string isEpaymentAvailable = string.Empty;
        string starRate = string.Empty;
        if (!IsValidateLoginReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out LogIn_DeviceID, out devicetoken, out appVersion, out deviceInfo, out terminalId, out loginType))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        DataSet ds = null;
        string errmsg = string.Empty;
        string passwordDB = "";
        string userStatusDB = "";
        DataSet dsForToken = null;

        if (_agentWCF.getAgentUserLogin(email, password, out ds, out errmsg))
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    writeLog("User Status : " + userStatusDB);
                    if (passwordDB != password)
                    {
                        code = "05";
                        desp = "Incorrect Password";
                        return Utils.GetErrorResponse(code, desp);
                    }

                    if (userStatusDB != "Y")
                    {
                        code = ((int)ResponseCode.Locked).ToString();
                        desp = ConfigurationManager.AppSettings["LockMessage"].ToString();
                        return Utils.GetErrorResponse(code, desp);
                    }

                    string imgUrl = "";
                    var rePrint = "Y";
                    var printSaleReport = "Y";
                    string printEPaymentSummaryReport = "Y";

                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        TodayTxnCount = ds.Tables[1].Rows[0]["TODAYTXNCOUNT"] == null ? "0" : ds.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                    }
                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        TodayTxnAmount = ds.Tables[2].Rows[0]["TODAYTXNAMOUNT"] == null ? "0" : ds.Tables[2].Rows[0]["TODAYTXNAMOUNT"].ToString();
                    }

                    string branchcode = ds.Tables[0].Rows[0]["BRANCHCODE"] == null ? "-" : ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    string branchname = ds.Tables[0].Rows[0]["BRANCHNAME"] == null ? "-" : ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    string branchaddress = ds.Tables[0].Rows[0]["BRANCHADDRESS"] == null ? "-" : ds.Tables[0].Rows[0]["BRANCHADDRESS"].ToString();
                    string supportphone = ds.Tables[0].Rows[0]["SUPPORTPHONE"] == null ? "-" : ds.Tables[0].Rows[0]["SUPPORTPHONE"].ToString();
                    string creditlimit = ds.Tables[0].Rows[0]["CREDITLIMIT"] == null ? "-" : ds.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                    string creditterm = ds.Tables[0].Rows[0]["CREDITTERM"] == null ? "-" : ds.Tables[0].Rows[0]["CREDITTERM"].ToString();
                    string credittermstart = ds.Tables[0].Rows[0]["CREDITTERMSTART"] == null ? "-" : ds.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                    var userRight = ds.Tables[0].Rows[0]["USERRIGHTSXML"].ToString();
                    var userRightHt = Utils.GetHTableFromRightsXML(userRight);
                    if (userRightHt.ContainsKey("reprint"))
                    {
                        rePrint = userRightHt["reprint"].ToString();
                    }

                    if (userRightHt.ContainsKey("printSalereport"))
                    {
                        printSaleReport = userRightHt["printSalereport"].ToString();
                    }
                    if (userRightHt.ContainsKey("printEPaymentSummaryReport"))
                    {
                        printEPaymentSummaryReport = userRightHt["printEPaymentSummaryReport"].ToString();
                    }

                    agentUserID = ds.Tables[0].Rows[0]["AGENTUSERID"].ToString();
                    aggrementType = ds.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 31-03-2015
                    DB_DeviceID = ds.Tables[0].Rows[0]["DEVICEUID"].ToString();
                    IsPair = ds.Tables[0].Rows[0]["ISPAIRED"].ToString();
                    agentCode = ds.Tables[0].Rows[0]["AGENTCODE"].ToString();

                    //get verify status and submit description
                    verifyStatus = ds.Tables[0].Rows[0]["VerifyStatus"].ToString();
                    verifyDescription = ConfigurationManager.AppSettings["VerifyDescription"];
                    verifyDialogueShow = ConfigurationManager.AppSettings["VerifyDialogueShow"].ToString();
                    verifyDialogueTitle = ConfigurationManager.AppSettings["VerifyDialogueTitle"];
                    starRate = ds.Tables[0].Rows[0]["StarRate"].ToString();
                    //get s3 photo 64 byte
                    if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SelfiePhotoUrl"].ToString()) && !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SelfiePhotoWithIdUrl"].ToString()))
                    {
                        (new AuthenticationService()).GetProfilePhoto(ds.Tables[0].Rows[0]["SelfiePhotoUrl"].ToString(), ds.Tables[0].Rows[0]["SelfiePhotoWithIdUrl"].ToString(), out userProfileImage, out userProfileWithId);
                    }

                    var merchantDs = new DataSet();
                    var isMerchant = "N";
                    var paymentType = ConfigurationManager.AppSettings["PaymentType"];

                    if (_agentWCF.CheckIsMerchant(agentCode, paymentType, out merchantDs, out errmsg))
                    {
                        if (merchantDs.Tables[0].Rows.Count > 0)
                        {
                            isMerchant = merchantDs.Tables[0].Rows[0]["IsActiveMerchant"] == null ? "N" : merchantDs.Tables[0].Rows[0]["IsActiveMerchant"].ToString();
                        }
                    }

                    isEpaymentAvailable = "N";
                    if (_agentWCF.CheckIsMerchant(agentCode, string.Empty, out merchantDs, out errmsg))
                    {
                        if (merchantDs.Tables[0].Rows.Count > 0)
                        {
                            foreach (DataRow merchant in merchantDs.Tables[0].Rows)
                            {
                                if (merchant["IsActiveMerchant"] != null && merchant["IsActiveMerchant"].ToString() == "Y")
                                {
                                    isEpaymentAvailable = "Y";
                                    break;
                                }
                            }
                        }
                    }

                    showbal = (ds.Tables[0].Rows[0]["SHOWBALANCE"] == DBNull.Value) ? "N" : ds.Tables[0].Rows[0]["SHOWBALANCE"].ToString();
                    //<-- This is for TermsAndConditions -->
                    termsAndConditions = ds.Tables[0].Rows[0]["TERMSANDCONDITIONS"].ToString();
                    writeLog("AgentCode : " + agentCode + " | AggreementType : " + aggrementType + " | DeviceID from DB " + DB_DeviceID + " | IsPair : " + IsPair);

                    string MobileAppVersion = appVersion.Replace(".", "");
                    string BackendAppVersion = newappversion.Replace(".", "");

                    isupdate = (int.Parse(MobileAppVersion) >= int.Parse(BackendAppVersion)) ? "N" : "Y";
                    profileId = ds.Tables[0].Rows[0]["PROFILEID"] == null ? "-" : ds.Tables[0].Rows[0]["PROFILEID"].ToString();
                    string whitelistusername = ConfigurationManager.AppSettings["WhiteListUserName"].ToString();
                    string whitelistpassword = ConfigurationManager.AppSettings["WhiteListPassword"].ToString();
                    var profileList = ConfigurationManager.AppSettings["ProfileList"].ToString();
                    if (!string.IsNullOrEmpty(profileList) && (!string.IsNullOrEmpty(profileId)))
                    {
                        var thisProfileList = profileList.Split(',').ToList();
                        var thisProfile = thisProfileList.FirstOrDefault(x => x == profileId);
                        if (!string.IsNullOrEmpty(thisProfile))
                        {
                            isDemoModeOn = "Y";
                        }
                    }

                    if (IsPair == "Y")
                    {

                        if ((whitelistusername == email && whitelistpassword == password) || Utils.IsSameDevice(LogIn_DeviceID, DB_DeviceID))
                        {
                            if (_agentWCF.insertToken(email, out dsForToken, out errmsg))
                            {
                                token = dsForToken.Tables[0].Rows[0]["Token"] == null ? "-" : dsForToken.Tables[0].Rows[0]["Token"].ToString();
                            }
                            if (loginType == ConfigurationManager.AppSettings["LoginType_POS"].ToString())
                            {
                                if (_agentWCF.UpdateDeviceWithTerminalId(email, password, LogIn_DeviceID, devicetoken, appVersion, deviceInfo, terminalId, out errmsg))
                                {
                                    string botStdBarCodeStr = Utils.getCBMStandard("0000000000005", "", agentcode, "000000000000", "10000");
                                    writeLog("BarCode String " + botStdBarCodeStr);
                                    writeLog("BarCode String " + botStdBarCodeStr + " AgentCOde " + agentcode);
                                    string barcodeurl = Utils.generateQRCode(botStdBarCodeStr, agentcode);
                                    writeLog("After Scanning BarCode");
                                    code = "00";
                                    desp = "Success";
                                    StringBuilder sb = new StringBuilder();
                                    sb.Append("<LoginRes>");
                                    sb.Append("<Version>1.0</Version>");
                                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                    sb.Append("<MessageID>" + messageID + "</MessageID>");
                                    sb.Append("<ResCode>" + code + "</ResCode>");
                                    sb.Append("<ResDesc>" + desp + "</ResDesc>");
                                    sb.Append("<UserName>" + ds.Tables[0].Rows[0]["AGENTUSERNAME"].ToString() + "</UserName>");
                                    sb.Append("<AgentID>" + ds.Tables[0].Rows[0]["AGENTID"].ToString() + "</AgentID>");
                                    sb.Append("<AgentName>" + ds.Tables[0].Rows[0]["AGENTNAME"].ToString() + "</AgentName>");
                                    sb.Append("<AgentLogo>" + imgUrl + "</AgentLogo>");
                                    sb.Append("<AgentCode>" + agentCode + "</AgentCode>");
                                    sb.Append("<AggrementType>" + aggrementType + "</AggrementType>");
                                    sb.Append("<Balance>" + ds.Tables[0].Rows[0]["AVAILABLEBALANCE"].ToString() + "</Balance>");
                                    sb.Append("<UserLevel>" + ds.Tables[0].Rows[0]["USERLEVEL"].ToString() + "</UserLevel>");
                                    sb.Append("<BranchCode>" + branchcode + "</BranchCode>");
                                    sb.Append("<BranchName>" + branchname + "</BranchName>");
                                    sb.Append("<BranchAddress>" + HttpUtility.HtmlEncode(branchaddress) + "</BranchAddress>");
                                    sb.Append("<SupportPhone>" + supportphone + "</SupportPhone>");
                                    sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                    sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                                    sb.Append("<CreditLimitAmount>" + creditlimit + "</CreditLimitAmount >");
                                    sb.Append("<CreditLimitDay>" + creditterm + "</CreditLimitDay>");
                                    sb.Append("<CreditLimitStartDay>" + credittermstart + "</CreditLimitStartDay>");
                                    sb.Append("<ShowBalance>" + showbal + "</ShowBalance>");
                                    sb.Append("<IsUpdate>" + isupdate + "</IsUpdate>");
                                    sb.Append("<MyQR>" + barcodeurl + "</MyQR>");
                                    sb.Append("<Token>" + token + "</Token>");
                                    sb.Append("<AgentUserID>" + agentUserID + "</AgentUserID>");
                                    sb.Append("<Reprint>" + rePrint + "</Reprint>");
                                    sb.Append("<PrintSaleReport>" + printSaleReport + "</PrintSaleReport>");
                                    sb.Append("<PrintEPaymentSummaryReport>" + printEPaymentSummaryReport + "</PrintEPaymentSummaryReport>");
                                    sb.Append("<TermsAndConditions>" + termsAndConditions + "</TermsAndConditions>");
                                    sb.Append("<IsMerchant>" + isMerchant + "</IsMerchant>");
                                    sb.Append("<IsEpaymentAvailable>" + isEpaymentAvailable + "</IsEpaymentAvailable>");
                                    sb.Append("<IsDemoModeOn>" + isDemoModeOn + "</IsDemoModeOn>");
                                    sb.Append("<VerifyStatus>" + verifyStatus + "</VerifyStatus>");
                                    sb.Append("<VerifyDescription>" + verifyDescription + "</VerifyDescription>");
                                    sb.Append("<VerifyDialogueShow>" + verifyDialogueShow + "</VerifyDialogueShow>");
                                    sb.Append("<VerifyDialogueTitle>" + verifyDialogueTitle + "</VerifyDialogueTitle>");
                                    sb.Append("<UserProfileImage>" + userProfileImage + "</UserProfileImage>");
                                    sb.Append("<StarRate>" + starRate + "</StarRate>");
                                    sb.Append("</LoginRes>");
                                    return sb.ToString();
                                }
                            }
                            else
                            {
                                if (_agentWCF.UpdateDevice(email, password, LogIn_DeviceID, devicetoken, appVersion, deviceInfo, out errmsg))
                                {
                                    string botStdBarCodeStr = Utils.getCBMStandard("0000000000005", "", agentcode, "000000000000", "10000");
                                    writeLog("BarCode String " + botStdBarCodeStr);
                                    writeLog("BarCode String " + botStdBarCodeStr + " AgentCOde " + agentcode);
                                    string barcodeurl = Utils.generateQRCode(botStdBarCodeStr, agentcode);
                                    writeLog("After Scanning BarCode");
                                    code = "00";
                                    desp = "Success";
                                    StringBuilder sb = new StringBuilder();
                                    sb.Append("<LoginRes>");
                                    sb.Append("<Version>1.0</Version>");
                                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                    sb.Append("<MessageID>" + messageID + "</MessageID>");
                                    sb.Append("<ResCode>" + code + "</ResCode>");
                                    sb.Append("<ResDesc>" + desp + "</ResDesc>");
                                    sb.Append("<UserName>" + ds.Tables[0].Rows[0]["AGENTUSERNAME"].ToString() + "</UserName>");
                                    sb.Append("<AgentID>" + ds.Tables[0].Rows[0]["AGENTID"].ToString() + "</AgentID>");
                                    sb.Append("<AgentName>" + ds.Tables[0].Rows[0]["AGENTNAME"].ToString() + "</AgentName>");
                                    sb.Append("<AgentLogo>" + imgUrl + "</AgentLogo>");
                                    sb.Append("<AgentCode>" + agentCode + "</AgentCode>");
                                    sb.Append("<AggrementType>" + aggrementType + "</AggrementType>");
                                    sb.Append("<Balance>" + ds.Tables[0].Rows[0]["AVAILABLEBALANCE"].ToString() + "</Balance>");
                                    sb.Append("<UserLevel>" + ds.Tables[0].Rows[0]["USERLEVEL"].ToString() + "</UserLevel>");
                                    sb.Append("<BranchCode>" + branchcode + "</BranchCode>");
                                    sb.Append("<BranchName>" + branchname + "</BranchName>");
                                    sb.Append("<BranchAddress>" + HttpUtility.HtmlEncode(branchaddress) + "</BranchAddress>");
                                    sb.Append("<SupportPhone>" + supportphone + "</SupportPhone>");
                                    sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                    sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                                    sb.Append("<CreditLimitAmount>" + creditlimit + "</CreditLimitAmount >");
                                    sb.Append("<CreditLimitDay>" + creditterm + "</CreditLimitDay>");
                                    sb.Append("<CreditLimitStartDay>" + credittermstart + "</CreditLimitStartDay>");
                                    sb.Append("<ShowBalance>" + showbal + "</ShowBalance>");
                                    sb.Append("<IsUpdate>" + isupdate + "</IsUpdate>");
                                    sb.Append("<MyQR>" + barcodeurl + "</MyQR>");
                                    sb.Append("<Token>" + token + "</Token>");
                                    sb.Append("<AgentUserID>" + agentUserID + "</AgentUserID>");
                                    sb.Append("<Reprint>" + rePrint + "</Reprint>");
                                    sb.Append("<PrintSaleReport>" + printSaleReport + "</PrintSaleReport>");
                                    sb.Append("<PrintEPaymentSummaryReport>" + printEPaymentSummaryReport + "</PrintEPaymentSummaryReport>");
                                    sb.Append("<TermsAndConditions>" + termsAndConditions + "</TermsAndConditions>");
                                    sb.Append("<IsMerchant>" + isMerchant + "</IsMerchant>");
                                    sb.Append("<IsEpaymentAvailable>" + isEpaymentAvailable + "</IsEpaymentAvailable>");
                                    sb.Append("<IsDemoModeOn>" + isDemoModeOn + "</IsDemoModeOn>");
                                    sb.Append("<VerifyStatus>" + verifyStatus + "</VerifyStatus>");
                                    sb.Append("<VerifyDescription>" + verifyDescription + "</VerifyDescription>");
                                    sb.Append("<VerifyDialogueShow>" + verifyDialogueShow + "</VerifyDialogueShow>");
                                    sb.Append("<VerifyDialogueTitle>" + verifyDialogueTitle + "</VerifyDialogueTitle>");
                                    sb.Append("<UserProfileImage>" + userProfileImage + "</UserProfileImage>");
                                    sb.Append("<StarRate>" + starRate + "</StarRate>");
                                    sb.Append("</LoginRes>");
                                    return sb.ToString();
                                }
                            }

                        }
                        else
                        {
                            code = "11";
                            desp = "Device ID NOT Matched";
                            return Utils.GetErrorResponse(code, desp);
                        }
                    }
                    else
                    {
                        if (_agentWCF.insertToken(email, out dsForToken, out errmsg))
                        {
                            token = dsForToken.Tables[0].Rows[0]["Token"] == null ? "-" : dsForToken.Tables[0].Rows[0]["Token"].ToString();
                        }
                        if (loginType == ConfigurationManager.AppSettings["LoginType_POS"].ToString())
                        {
                            //need to add values for appVersion,deviceInfo
                            if (_agentWCF.UpdateDeviceWithTerminalId(email, password, LogIn_DeviceID, devicetoken, appVersion, deviceInfo, terminalId, out errmsg))
                            {
                                code = "00";
                                desp = "Success";
                                StringBuilder sb = new StringBuilder();
                                sb.Append("<LoginRes>");
                                sb.Append("<Version>1.0</Version>");
                                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                sb.Append("<MessageID>" + messageID + "</MessageID>");
                                sb.Append("<ResCode>" + code + "</ResCode>");
                                sb.Append("<ResDesc>" + desp + "</ResDesc>");
                                sb.Append("<UserName>" + ds.Tables[0].Rows[0]["AGENTUSERNAME"].ToString() + "</UserName>");
                                sb.Append("<AgentID>" + ds.Tables[0].Rows[0]["AGENTID"].ToString() + "</AgentID>");
                                sb.Append("<AgentName>" + ds.Tables[0].Rows[0]["AGENTNAME"].ToString() + "</AgentName>");
                                sb.Append("<AgentLogo>" + imgUrl + "</AgentLogo>");
                                sb.Append("<AgentCode>" + agentCode + "</AgentCode>");
                                sb.Append("<AggrementType>" + aggrementType + "</AggrementType>");
                                sb.Append("<Balance>" + ds.Tables[0].Rows[0]["AVAILABLEBALANCE"].ToString() + "</Balance>");
                                sb.Append("<UserLevel>" + ds.Tables[0].Rows[0]["USERLEVEL"].ToString() + "</UserLevel>");
                                sb.Append("<BranchCode>" + branchcode + "</BranchCode>");
                                sb.Append("<BranchName>" + branchname + "</BranchName>");
                                sb.Append("<BranchAddress>" + HttpUtility.HtmlEncode(branchaddress) + "</BranchAddress>");
                                sb.Append("<SupportPhone>" + supportphone + "</SupportPhone>");
                                sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                                sb.Append("<CreditLimitAmount>" + creditlimit + "</CreditLimitAmount >");
                                sb.Append("<CreditLimitDay>" + creditterm + "</CreditLimitDay>");
                                sb.Append("<CreditLimitStartDay>" + credittermstart + "</CreditLimitStartDay>");
                                sb.Append("<ShowBalance>" + showbal + "</ShowBalance>");
                                sb.Append("<IsUpdate>" + isupdate + "</IsUpdate>");
                                sb.Append("<Token>" + token + "</Token>");
                                sb.Append("<AgentUserID>" + agentUserID + "</AgentUserID>");
                                sb.Append("<Reprint>" + rePrint + "</Reprint>");
                                sb.Append("<PrintSaleReport>" + printSaleReport + "</PrintSaleReport>");
                                sb.Append("<PrintEPaymentSummaryReport>" + printEPaymentSummaryReport + "</PrintEPaymentSummaryReport>");
                                sb.Append("<TermsAndConditions>" + termsAndConditions + "</TermsAndConditions>");
                                sb.Append("<IsMerchant>" + isMerchant + "</IsMerchant>");
                                sb.Append("<IsEpaymentAvailable>" + isEpaymentAvailable + "</IsEpaymentAvailable>");
                                sb.Append("<IsDemoModeOn>" + isDemoModeOn + "</IsDemoModeOn>");
                                sb.Append("<VerifyStatus>" + verifyStatus + "</VerifyStatus>");
                                sb.Append("<VerifyDescription>" + verifyDescription + "</VerifyDescription>");
                                sb.Append("<VerifyDialogueShow>" + verifyDialogueShow + "</VerifyDialogueShow>");
                                sb.Append("<VerifyDialogueTitle>" + verifyDialogueTitle + "</VerifyDialogueTitle>");
                                sb.Append("<UserProfileImage>" + userProfileImage + "</UserProfileImage>");
                                sb.Append("<StarRate>" + starRate + "</StarRate>");
                                sb.Append("</LoginRes>");
                                return sb.ToString();
                            }
                            else
                            {
                                code = "05";
                                desp = "Login Update Failed";
                                return Utils.GetErrorResponse(code, desp);
                            }
                        }
                        else
                        {
                            //need to add values for appVersion,deviceInfo
                            if (_agentWCF.UpdateDevice(email, password, LogIn_DeviceID, devicetoken, appVersion, deviceInfo, out errmsg))
                            {
                                code = "00";
                                desp = "Success";
                                StringBuilder sb = new StringBuilder();
                                sb.Append("<LoginRes>");
                                sb.Append("<Version>1.0</Version>");
                                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                sb.Append("<MessageID>" + messageID + "</MessageID>");
                                sb.Append("<ResCode>" + code + "</ResCode>");
                                sb.Append("<ResDesc>" + desp + "</ResDesc>");
                                sb.Append("<UserName>" + ds.Tables[0].Rows[0]["AGENTUSERNAME"].ToString() + "</UserName>");
                                sb.Append("<AgentID>" + ds.Tables[0].Rows[0]["AGENTID"].ToString() + "</AgentID>");
                                sb.Append("<AgentName>" + ds.Tables[0].Rows[0]["AGENTNAME"].ToString() + "</AgentName>");
                                sb.Append("<AgentLogo>" + imgUrl + "</AgentLogo>");
                                sb.Append("<AgentCode>" + agentCode + "</AgentCode>");
                                sb.Append("<AggrementType>" + aggrementType + "</AggrementType>");
                                sb.Append("<Balance>" + ds.Tables[0].Rows[0]["AVAILABLEBALANCE"].ToString() + "</Balance>");
                                sb.Append("<UserLevel>" + ds.Tables[0].Rows[0]["USERLEVEL"].ToString() + "</UserLevel>");
                                sb.Append("<BranchCode>" + branchcode + "</BranchCode>");
                                sb.Append("<BranchName>" + branchname + "</BranchName>");
                                sb.Append("<BranchAddress>" + HttpUtility.HtmlEncode(branchaddress) + "</BranchAddress>");
                                sb.Append("<SupportPhone>" + supportphone + "</SupportPhone>");
                                sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                                sb.Append("<CreditLimitAmount>" + creditlimit + "</CreditLimitAmount >");
                                sb.Append("<CreditLimitDay>" + creditterm + "</CreditLimitDay>");
                                sb.Append("<CreditLimitStartDay>" + credittermstart + "</CreditLimitStartDay>");
                                sb.Append("<ShowBalance>" + showbal + "</ShowBalance>");
                                sb.Append("<IsUpdate>" + isupdate + "</IsUpdate>");
                                sb.Append("<Token>" + token + "</Token>");
                                sb.Append("<AgentUserID>" + agentUserID + "</AgentUserID>");
                                sb.Append("<Reprint>" + rePrint + "</Reprint>");
                                sb.Append("<PrintSaleReport>" + printSaleReport + "</PrintSaleReport>");
                                sb.Append("<PrintEPaymentSummaryReport>" + printEPaymentSummaryReport + "</PrintEPaymentSummaryReport>");
                                sb.Append("<TermsAndConditions>" + termsAndConditions + "</TermsAndConditions>");
                                sb.Append("<IsMerchant>" + isMerchant + "</IsMerchant>");
                                sb.Append("<IsEpaymentAvailable>" + isEpaymentAvailable + "</IsEpaymentAvailable>");
                                sb.Append("<IsDemoModeOn>" + isDemoModeOn + "</IsDemoModeOn>");
                                sb.Append("<VerifyStatus>" + verifyStatus + "</VerifyStatus>");
                                sb.Append("<VerifyDescription>" + verifyDescription + "</VerifyDescription>");
                                sb.Append("<VerifyDialogueShow>" + verifyDialogueShow + "</VerifyDialogueShow>");
                                sb.Append("<VerifyDialogueTitle>" + verifyDialogueTitle + "</VerifyDialogueTitle>");
                                sb.Append("<UserProfileImage>" + userProfileImage + "</UserProfileImage>");
                                sb.Append("<StarRate>" + starRate + "</StarRate>");
                                sb.Append("</LoginRes>");
                                return sb.ToString();
                            }
                            else
                            {
                                code = "05";
                                desp = "Login Update Failed";
                                return Utils.GetErrorResponse(code, desp);
                            }
                        }
                    }
                }
                else
                {
                    StringBuilder sb = new StringBuilder();
                    code = "05";
                    desp = "Authentication Failed";
                    return Utils.GetErrorResponse(code, desp);
                }
            }
            catch (Exception ex)
            {
                writeLog("Error In Login Req" + ex.Message);
            }
        }


        return string.Empty;
    }

    public string LoginReqV2(string reqXml)
    {
        var logAppender = "LoginReqV2 | ";
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string LogIn_DeviceID = string.Empty;
        string devicetoken = string.Empty;
        string appVersion = string.Empty;
        string deviceInfo = string.Empty;
        string terminalId = string.Empty;
        string loginType = string.Empty;


        if (!IsValidateLoginReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out LogIn_DeviceID, out devicetoken, out appVersion, out deviceInfo, out terminalId, out loginType))
        {
            var response=Utils.GetErrorResponse(code, desp);
            writeLog(logAppender+response);
            return response;
        }

        try
        {
            var paymentType = ConfigurationManager.AppSettings["PaymentType"].ToString();
            DataSet loginDataSet = null;
            string errmsg = string.Empty;
            if (!(_agentWCF.Login(email, password, paymentType, out loginDataSet, out errmsg))) return _responseService.GetAuthenticationFailResponse();

            var userTable = loginDataSet.Tables[0];
            var txnCountTable = loginDataSet.Tables[1];
            var txnAmountTable = loginDataSet.Tables[2];


            if (userTable.Rows.Count <= 0) return _responseService.GetIncorrectLoginIDResponse();

            var userRow = userTable.Rows[0];
            string passwordDB = Convert.ToString(userRow["AGENTUSERPASSWORD"]);
            string userStatusDB = Convert.ToString(userRow["USERSTATUS"]);
            writeLog("User Status : " + userStatusDB);

            if (passwordDB != password) return _responseService.GetIncorrectPasswordResponse();

            if (userStatusDB != "Y") return _responseService.GetLockedUserResponse();

            string TodayTxnCount = string.Empty, TodayTxnAmount = string.Empty;
            if (txnCountTable.Rows.Count > 0)
            {
                var txnRow = txnCountTable.Rows[0];
                TodayTxnCount = txnRow["TODAYTXNCOUNT"] == null ? "0" : txnRow["TODAYTXNCOUNT"].ToString();
            }
            if (txnAmountTable.Rows.Count > 0)
            {
                var txnRow = txnAmountTable.Rows[0];
                TodayTxnAmount = txnRow["TODAYTXNAMOUNT"] == null ? "0" : txnRow["TODAYTXNAMOUNT"].ToString();
            }

            string isDemoModeOn = _authenticationService.IsDemoModeOn(userRow);
            string mobileNeedsUpdate = _authenticationService.IsMobileAppNeedTobeUpdated(appVersion);
            string IsPair = userRow["ISPAIRED"].ToString();

            string token = string.Empty;
            DataSet dsForToken;
            if (IsPair == "Y")
            {
                string DB_DeviceID = userRow["DEVICEUID"].ToString();
                if (_authenticationService.IsWhitelistedUser(email, password) || Utils.IsSameDevice(LogIn_DeviceID, DB_DeviceID))
                {
                    token = _authenticationService.InsertToken(email, out dsForToken, out errmsg);
                    return _authenticationService.UpdatePairedDevice(loginType, email, password, LogIn_DeviceID, devicetoken, appVersion, deviceInfo, terminalId,
                       out errmsg, userRow, messageID, TodayTxnCount, TodayTxnAmount, token, mobileNeedsUpdate, isDemoModeOn, loginDataSet);
                }
                return _responseService.GetDeviceIdNotMatchResponse();
            }
            else
            {
                token = _authenticationService.InsertToken(email, out dsForToken, out errmsg);
                return _authenticationService.UpdateUnPairedDevice(loginType, email, password, LogIn_DeviceID, devicetoken, appVersion, deviceInfo, terminalId,
                        out errmsg, userRow, messageID, TodayTxnCount, TodayTxnAmount, token, mobileNeedsUpdate, isDemoModeOn, loginDataSet);
            }
        }
        catch (Exception ex)
        {
            writeLog("Error In Login Req V2" + ex.Message);
        }
        return string.Empty;
    }

    public string HomeReqV2(string reqXml)
    {
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string code = string.Empty, desp = string.Empty;
        string agentCode = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string LogIn_DeviceID = string.Empty;
        string devicetoken = string.Empty;
        string appVersion = string.Empty;
        string deviceInfo = string.Empty;
        string terminalId = string.Empty;
        string loginType = string.Empty;
       
        if (!IsValidateHomeReq(ht, out code, out desp, out version, out ts, out email, out password, 
            out messageID, out LogIn_DeviceID, out devicetoken, 
            out appVersion, out deviceInfo, out terminalId, out loginType, out agentCode))
        {
            Utils.GetErrorResponse(code, desp);
        }

        try
        {
            var paymentType = ConfigurationManager.AppSettings["PaymentType"].ToString();
            DataSet loginDataSet = null;
            string errmsg = string.Empty;
            var appVersionWithoutDot = appVersion.Replace(".", string.Empty);
           if (!_agentWCF.GetHomePageData(email, password, paymentType, agentCode, MobileApiConstants.MobileVersion, out loginDataSet, out errmsg)) return _responseService.GetAuthenticationFailResponse();

            var userTable = loginDataSet.Tables[0];
            var txnCountTable = loginDataSet.Tables[1];
            var txnAmountTable = loginDataSet.Tables[2];

            if (userTable.Rows.Count <= 0) return _responseService.GetIncorrectLoginIDResponse();

            var userRow = userTable.Rows[0];
           
            string TodayTxnCount = string.Empty, TodayTxnAmount = string.Empty;
            if (txnCountTable.Rows.Count > 0)
            {
                var txnRow = txnCountTable.Rows[0];
                TodayTxnCount = txnRow["TODAYTXNCOUNT"] == null ? "0" : txnRow["TODAYTXNCOUNT"].ToString();
            }
            if (txnAmountTable.Rows.Count > 0)
            {
                var txnRow = txnAmountTable.Rows[0];
                TodayTxnAmount = txnRow["TODAYTXNAMOUNT"] == null ? "0" : txnRow["TODAYTXNAMOUNT"].ToString();
            }

            string isDemoModeOn = _authenticationService.IsDemoModeOn(userRow);
            string mobileNeedsUpdate = _authenticationService.IsMobileAppNeedTobeUpdated(appVersion);

            string token = string.Empty;
            return _authenticationService.GetHomeResponse(userRow, messageID, TodayTxnCount, TodayTxnAmount, token, mobileNeedsUpdate, isDemoModeOn, loginDataSet, loginType, appVersionWithoutDot);
        }
        catch (Exception ex)
        {
            writeLog("Error In HomeReqV2" + ex.Message);
        }
        return string.Empty;
    }

    bool IsValidateLoginReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string LogIn_DeviceID, out string devicetoken, out string appVersion, out string deviceInfo, out string terminalId, out string loginType)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        LogIn_DeviceID = string.Empty;
        devicetoken = string.Empty;
        appVersion = string.Empty;
        deviceInfo = string.Empty;
        terminalId = string.Empty;
        loginType = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("DeviceUID"))
        {
            LogIn_DeviceID = ht["DeviceUID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <DeviceUID> Tag");
            return false;
        }
        if (ht.ContainsKey("DeviceToken"))
        {
            devicetoken = ht["DeviceToken"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <DeviceToken> Tag");
            return false;
        }
        //added by nila 20150701
        if (ht.ContainsKey("AppVersion"))
        {
            appVersion = ht["AppVersion"].ToString();
        }

        //added by nila 20150701
        if (ht.ContainsKey("DeviceInfo"))
        {
            deviceInfo = ht["DeviceInfo"].ToString();
        }
        if (ht.ContainsKey("TerminalId"))
        {
            terminalId = ht["TerminalId"].ToString();
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        if (ht.ContainsKey("LoginType"))
        {
            loginType = ht["LoginType"].ToString();

            return loginAuthentication(email, password, loginType, out code, out desp);
        }

        return authentication(email, password, out code, out desp);
    }

    bool IsValidateHomeReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string LogIn_DeviceID, out string devicetoken, out string appVersion, out string deviceInfo, out string terminalId, out string loginType, out string agentCode)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        LogIn_DeviceID = string.Empty;
        devicetoken = string.Empty;
        appVersion = string.Empty;
        deviceInfo = string.Empty;
        terminalId = string.Empty;
        loginType = string.Empty;
        agentCode = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("DeviceUID"))
        {
            LogIn_DeviceID = ht["DeviceUID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <DeviceUID> Tag");
            return false;
        }
        if (ht.ContainsKey("DeviceToken"))
        {
            devicetoken = ht["DeviceToken"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <DeviceToken> Tag");
            return false;
        }


        if (ht.ContainsKey("AgentCode"))
        {
            agentCode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentCode> Tag");
            return false;
        }
        //added by nila 20150701
        if (ht.ContainsKey("AppVersion"))
        {
            appVersion = ht["AppVersion"].ToString();
        }

        //added by nila 20150701
        if (ht.ContainsKey("DeviceInfo"))
        {
            deviceInfo = ht["DeviceInfo"].ToString();
        }
        if (ht.ContainsKey("TerminalId"))
        {
            terminalId = ht["TerminalId"].ToString();
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        if (ht.ContainsKey("LoginType"))
        {
            loginType = ht["LoginType"].ToString();

            return loginAuthentication(email, password, loginType, out code, out desp);
        }

        return authentication(email, password, out code, out desp);
    }

    bool authentication(string email, string password, out string code, out string desp)
    {
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        code = "00";
        desp = "Success";
        try
        {
            flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        }
        catch (Exception ex)
        {
            code = "99";
            desp = "System Error";
            writeLog("Exception Error in getAuthentication :" + ex.Message);
            return false;
        }
        string passwordDB = "";
        string userStatusDB = "";
        
        writeLog("Flag: " + flg.ToString());
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                this.agentid = int.Parse(ds.Tables[0].Rows[0]["AGENTID"].ToString());
                this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);

                if (passwordDB != password)
                {
                    code = "05";
                    desp = "Incorrect Password";
                    writeLog(desp + errmsg);
                    return false;
                }
                if (userStatusDB != "Y")
                {
                    code = ((int)ResponseCode.Locked).ToString();
                    desp = ConfigurationManager.AppSettings["LockMessage"].ToString();
                    writeLog(desp + errmsg);
                    return false;
                }
            }
            else
            {
                code = "05";
                desp = "Incorrect LoginID";
                writeLog(desp + errmsg);
                return false;
            }
        }
        else
        {
            code = "99";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;
        }
        return true;
    }

    //just only login authentication
    bool loginAuthentication(string email, string password, string loginType, out string code, out string desp)
    {
        var logAppender = "loginAuthentication | ";
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        code = "00";
        desp = "Success";
        string whitelistusername = ConfigurationManager.AppSettings["WhiteListUserName"].ToString();
        string whitelistpassword = ConfigurationManager.AppSettings["WhiteListPassword"].ToString();
        if (email == whitelistusername && password == whitelistpassword)
        {
            return true;
        }
        try
        {
            flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        }
        catch (Exception ex)
        {
            code = "99";
            desp = "System Error";
            writeLog(logAppender+" Exception Error in getAuthentication :" + ex.Message);
            return false;
        }
        string passwordDB = "";
        string userStatusDB = "";
        string loginDeviceDB = string.Empty;

        writeLog(logAppender+"Flag: " + flg.ToString());
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                this.agentid = int.Parse(ds.Tables[0].Rows[0]["AGENTID"].ToString());
                this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                loginDeviceDB = Convert.ToString(ds.Tables[0].Rows[0]["LOGINDEVICE"]);

                if (passwordDB != password)
                {
                    code = "05";
                    desp = "Incorrect Password";
                    writeLog(logAppender + desp + errmsg);
                    return false;
                }
                if (userStatusDB != "Y")
                {
                    code = ((int)ResponseCode.Locked).ToString();
                    desp = ConfigurationManager.AppSettings["LockMessage"].ToString();
                    writeLog(logAppender + desp + errmsg);
                    return false;
                }
                if (loginDeviceDB != ConfigurationManager.AppSettings[loginType].ToString())
                {
                    code = "05";
                    desp = "Incorrect Login Device.";
                    writeLog(logAppender + desp + errmsg);
                    return false;
                }

            }
            else
            {
                code = "05";
                desp = "Incorrect LoginID";
                writeLog(logAppender + desp + errmsg);
                return false;
            }
        }
        else
        {
            code = "99";
            desp = "DB Error";
            writeLog(logAppender + "Error in Authentication : " + errmsg);
            return false;
        }
        return true;
    }

    bool IsValidateCodeLoginReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string passCode)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        passCode = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("PassCode"))
        {
            passCode = ht["PassCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <PassCode> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(passCode))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return authentication(email, password, out code, out desp);
    }

    bool IsValidateChangePasscodeReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string NewpassCode)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        NewpassCode = string.Empty;
        string passCode = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("PassCode"))
        {
            passCode = ht["PassCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <PassCode> Tag");
            return false;
        }

        if (ht.ContainsKey("NewPassCode"))
        {
            NewpassCode = ht["NewPassCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <NewPassCode> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(passCode) || String.IsNullOrEmpty(NewpassCode))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return authentication(email, password, out code, out desp);
    }

    #endregion

    #region SystemConfigurationReq

    public string SystemConfigurationReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidSystemConfigurationReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getSystemConfigurationList(out ds, out errmsg))
            {
                writeLog("Error in getSystemConfigurationList : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable systemConfigurationList = ds.Tables[0];
            string id = string.Empty;
            string key = string.Empty;
            string value = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<SystemConfigurationListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<SystemConfigurationList>");
            foreach (DataRow systemConfiguration in systemConfigurationList.Rows)
            {
                id = systemConfiguration["Id"].ToString();
                key = systemConfiguration["Key"].ToString();
                value = systemConfiguration["Value"].ToString();
                sb.Append(string.Format("<SystemConfiguration Id=\"{0}\" Key=\"{1}\" Value=\"{2}\" />", id, key, value));
            }
            sb.Append("</SystemConfigurationList>");
            sb.Append("</SystemConfigurationListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in SystemConfigurationListReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    bool IsValidSystemConfigurationReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string userId, out string password, out string messageID, out string agentID, out string token) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        userId = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentID = string.Empty;
        token = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentUserId"))
        {
            userId = ht["AgentUserId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentUserId> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentID = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentID> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(userId)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(agentID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(userId, password, out code, out desp);
    }

    #endregion

    #region PromotionList

    public string PromotionListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidPromotionListReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getPromotionList(out ds, out errmsg))
            {
                writeLog("Error in getPromotionList : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable promotionList = ds.Tables[0];
            string id = string.Empty;
            string type = string.Empty;
            string taxId = string.Empty;
            string categoryId = string.Empty;
            string categoryName = string.Empty;
            string billerId = string.Empty;
            string billerName = string.Empty;
            string billerLogoUrl = string.Empty;
            string promotionUrl = string.Empty;
            string promotionPhotoUrl = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<PromotionListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<PromotionList>");
            foreach (DataRow promotion in promotionList.Rows)
            {
                id = promotion["Id"].ToString();
                type = promotion["Type"].ToString();
                taxId = promotion["TaxId"].ToString();
                categoryId = promotion["CategoryId"].ToString();
                categoryName = promotion["CategoryName"].ToString();
                billerId = promotion["BillerId"].ToString();
                billerName = promotion["BillerName"].ToString();
                billerLogoUrl = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + billerId + ".png";
                promotionUrl = promotion["Url"].ToString();
                promotionPhotoUrl = ConfigurationManager.AppSettings["PromotionPhotoUrl"].ToString() + id + ".png";
                sb.Append(string.Format("<Promotion Id=\"{0}\" Type=\"{1}\" CategoryId=\"{2}\" CategoryName=\"{3}\" BillerId=\"{4}\" TaxId=\"{5}\" BillerName=\"{6}\" BillerLogoUrl=\"{7}\" PromotionUrl=\"{8}\" PromotionPhotoUrl=\"{9}\" />", id, type, categoryId, categoryName, billerId, taxId, billerName, billerLogoUrl, promotionUrl, promotionPhotoUrl));
            }
            sb.Append("</PromotionList>");
            sb.Append("</PromotionListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in PromotionListReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    bool IsValidPromotionListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string userId, out string password, out string messageID, out string agentID, out string token) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        userId = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentID = string.Empty;
        token = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentUserId"))
        {
            userId = ht["AgentUserId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentUserId> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentID = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(userId)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(agentID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(userId, password, out code, out desp);
    }

    #endregion

    #region Favourite EService

    public string FavouriteEserviceReq(string reqXml, string appVersion)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;


        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidFavouriteEserviceReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getFavouriteEserviceList(userId, agentCode, out ds, out errmsg))
            {
                writeLog("Error in getFavouriteEserviceList : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable favEserviceList = ds.Tables[0];
            string categoryId = string.Empty;
            string categoryName = string.Empty;
            string billerId = string.Empty;
            string billerName = string.Empty;
            string taxId = string.Empty;
            string logoUrl = string.Empty;
            string label = string.Empty;
            string labelNull = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<FavouriteEserviceListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<FavouriteEserviceList>");
            var loginType = GetLoginType(reqXml);
            foreach (DataRow favEservice in favEserviceList.Rows)
            {
                categoryId = favEservice["CategoryId"].ToString();
                categoryName = favEservice["CategoryName"].ToString();
                billerId = favEservice["BillerId"].ToString();
                billerName = favEservice["BillerName"].ToString();
                taxId = favEservice["TaxId"].ToString();

                if (IsPOSMMBusTicket(loginType, taxId)) continue;
                if (IsMMBusTicket(taxId) && !IsValidVersionForMMBusTicket(int.Parse(appVersion))) continue;

                logoUrl = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + billerId + ".png";
                label = favEservice["Label"] != DBNull.Value ? favEservice["Label"].ToString() : labelNull;
                sb.Append(string.Format("<Biller CategoryId=\"{0}\" CategoryName=\"{1}\" BillerId=\"{2}\" TaxId=\"{3}\" BillerName=\"{4}\" LogoUrl=\"{5}\" Label=\"{6}\"/>", categoryId, categoryName, billerId, taxId, billerName, logoUrl, label));
            }
            sb.Append("</FavouriteEserviceList>");
            sb.Append("</FavouriteEserviceListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in FavouriteEserviceListReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    public string FavouriteEserviceReqV2(string reqXml, string appVersion)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;


        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidFavouriteEserviceReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getFavouriteEserviceListV2(userId, agentCode, out ds, out errmsg))
            {
                writeLog("Error in getFavouriteEserviceListV2 : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable favEserviceList = ds.Tables[0];
            string categoryId = string.Empty;
            string categoryName = string.Empty;
            string billerId = string.Empty;
            string billerName = string.Empty;
            string taxId = string.Empty;
            string logoUrl = string.Empty;
            string label = string.Empty;
            string labelNull = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<FavouriteEserviceListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<FavouriteEserviceList>");
            var loginType = GetLoginType(reqXml);
            foreach (DataRow favEservice in favEserviceList.Rows)
            {
                categoryId = favEservice["CategoryId"].ToString();
                categoryName = favEservice["CategoryName"].ToString();
                billerId = favEservice["BillerId"].ToString();
                billerName = favEservice["BillerName"].ToString();
                taxId = favEservice["TaxId"].ToString();

                if (IsPOSMMBusTicket(loginType, taxId)) continue;
                if (IsMMBusTicket(taxId) && !IsValidVersionForMMBusTicket(int.Parse(appVersion))) continue;

                logoUrl = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + billerId + ".png";
                label = favEservice["Label"] != DBNull.Value ? favEservice["Label"].ToString() : labelNull;
                sb.Append(string.Format("<Biller CategoryId=\"{0}\" CategoryName=\"{1}\" BillerId=\"{2}\" TaxId=\"{3}\" BillerName=\"{4}\" LogoUrl=\"{5}\" Label=\"{6}\"/>", categoryId, categoryName, billerId, taxId, billerName, logoUrl, label));
            }
            sb.Append("</FavouriteEserviceList>");
            sb.Append("</FavouriteEserviceListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in FavouriteEserviceReqV2 : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }


    bool IsValidFavouriteEserviceReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string userId, out string password, out string messageID, out string agentID, out string token) //, out int txnperpage, out int pageno
    {
        return IsValidPromotionListReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentID, out token);
    }

    public string MoreEserviceReq(string reqXml, string appVersion)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidMoreEserviceReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getMoreEserviceList(userId, agentCode, out ds, out errmsg))
            {
                writeLog("Error in getMoreEserviceList : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable moreEserviceList = ds.Tables[0];
            string categoryId = string.Empty;
            string categoryName = string.Empty;
            string billerId = string.Empty;
            string billerName = string.Empty;
            string taxId = string.Empty;
            string logoUrl = string.Empty;
            string label = string.Empty;
            string labelnull = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<MoreEserviceRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<EserviceList>");
            var loginType = GetLoginType(reqXml);
            foreach (DataRow biller in moreEserviceList.Rows)
            {
                categoryId = biller["CategoryId"].ToString();
                categoryName = biller["CategoryName"].ToString();
                billerId = biller["BillerId"].ToString();
                billerName = biller["BillerName"].ToString();
                taxId = biller["TaxId"].ToString();
                label = biller["Label"] == DBNull.Value ? labelnull : Convert.ToString(biller["Label"]);
                if (IsPOSMMBusTicket(loginType, taxId)) continue;
                if (IsMMBusTicket(taxId) && !IsValidVersionForMMBusTicket(int.Parse(appVersion))) continue;

                logoUrl = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + billerId + ".png";
                sb.Append(string.Format("<Biller CategoryId=\"{0}\" CategoryName=\"{1}\" BillerId=\"{2}\" TaxId=\"{3}\" BillerName=\"{4}\" LogoUrl=\"{5}\" Label=\"{6}\" />", categoryId, categoryName, billerId, taxId, billerName, logoUrl, label));
            }
            sb.Append("</EserviceList>");
            sb.Append("</MoreEserviceRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in MoreEserviceReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    public string MoreEserviceReqV2(string reqXml, string appVersion)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidMoreEserviceReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getMoreEserviceListV2(userId, agentCode, out ds, out errmsg))
            {
                writeLog("Error in getMoreEserviceListV2 : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable moreEserviceList = ds.Tables[0];
            string categoryId = string.Empty;
            string categoryName = string.Empty;
            string billerId = string.Empty;
            string billerName = string.Empty;
            string taxId = string.Empty;
            string logoUrl = string.Empty;
            string label = string.Empty;
            string labelnull = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<MoreEserviceRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<EserviceList>");
            var loginType = GetLoginType(reqXml);
            foreach (DataRow biller in moreEserviceList.Rows)
            {
                categoryId = biller["CategoryId"].ToString();
                categoryName = biller["CategoryName"].ToString();
                billerId = biller["BillerId"].ToString();
                billerName = biller["BillerName"].ToString();
                taxId = biller["TaxId"].ToString();
                label = biller["Label"] == DBNull.Value ? labelnull : Convert.ToString(biller["Label"]);
                if (IsPOSMMBusTicket(loginType, taxId)) continue;
                if (IsMMBusTicket(taxId) && !IsValidVersionForMMBusTicket(int.Parse(appVersion))) continue;

                logoUrl = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + billerId + ".png";
                sb.Append(string.Format("<Biller CategoryId=\"{0}\" CategoryName=\"{1}\" BillerId=\"{2}\" TaxId=\"{3}\" BillerName=\"{4}\" LogoUrl=\"{5}\" Label=\"{6}\" />", categoryId, categoryName, billerId, taxId, billerName, logoUrl, label));
            }
            sb.Append("</EserviceList>");
            sb.Append("</MoreEserviceRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in MoreEserviceReqV2 : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }


    bool IsValidMoreEserviceReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string userId, out string password, out string messageID, out string agentID, out string token) //, out int txnperpage, out int pageno
    {
        return IsValidPromotionListReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentID, out token);
    }

    public string CreateFavouriteEserviceReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidCreateFavouriteEserviceReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        string response = string.Empty;

        try
        {
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(reqXml);

            string jsonStr = JsonConvert.SerializeXmlNode(doc);

            if (_agentWCF.createFavouriteEservice(userId, jsonStr, out errmsg))
            {
                StringBuilder sb = new StringBuilder();

                sb.Append("<CreateFavouriteEserviceRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<MessageId>" + messageID + "</MessageId>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>Successfully Updated.</ResDesc>");
                sb.Append("</CreateFavouriteEserviceRes>");

                writeLog("CreateFavouriteEserviceRes:" + sb.ToString());
                return sb.ToString();
            }
            else
            {
                writeLog("Error in createFavouriteEservice : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in CreateFavouriteEserviceReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    bool IsValidCreateFavouriteEserviceReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string userId, out string password, out string messageID, out string agentID, out string token) //, out int txnperpage, out int pageno
    {
        return IsValidPromotionListReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentID, out token);
    }

    #endregion

    #region Favourite EPayment

    public string FavouriteEpaymentReq(string reqXml, string appVersion)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        string loginType = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidFavouriteEpaymentReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token, out loginType))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getFavouriteEpaymentList(userId, agentCode, out ds, out errmsg))
            {
                writeLog("Error in getFavouriteEpaymentList : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable favEpaymentList = ds.Tables[0];
            string id = string.Empty;
            string paymentType = string.Empty;
            string description = string.Empty;
            string paymentMode = string.Empty;
            string logoUrl = string.Empty;
            var invalidEPaymentForMobileList = ConfigurationManager.AppSettings["InvalidEPaymentForMobile"].Split(',');

            StringBuilder sb = new StringBuilder();
            sb.Append("<FavouriteEpaymentListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<FavouriteEpaymentList>");
            foreach (DataRow favEpayment in favEpaymentList.Rows)
            {
                id = favEpayment["Id"].ToString();

                paymentType = favEpayment["PaymentType"].ToString();
                if (!IsValidVersionMPUandJCB(int.Parse(appVersion)) && invalidEPaymentForMobileList.Contains(paymentType)) continue;
                if (IsMobile(loginType) && invalidEPaymentForMobileList.Contains(paymentType)) continue;
                description = favEpayment["Description"].ToString();
                paymentMode = favEpayment["PaymentMode"].ToString();
                if (paymentType == "A+ Wallet")
                {
                    logoUrl = ConfigurationManager.AppSettings["EpaymentLogoUrl"].ToString() + "APlus.png";
                }
                else 
                {
                    logoUrl = ConfigurationManager.AppSettings["EpaymentLogoUrl"].ToString() + paymentType + ".png";
                }
                sb.Append(string.Format("<ePayment Id=\"{0}\" PaymentType=\"{1}\" Description=\"{2}\" PaymentMode=\"{3}\" LogoUrl=\"{4}\" />", id, paymentType, description, paymentMode, logoUrl));
            }
            sb.Append("</FavouriteEpaymentList>");
            sb.Append("</FavouriteEpaymentListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in FavouriteEpaymentListReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    bool IsValidVersionMPUandJCB(int appVersion)
    {
        var validVersionForMPUandJCB = ConfigurationManager.AppSettings["MinimumVersionForMPUandJCB"].ToString();
        var intValidVersion = int.Parse(validVersionForMPUandJCB);
        return appVersion >= intValidVersion;
    }

    bool IsValidFavouriteEpaymentReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string userId, out string password, out string messageID,
        out string agentID, out string token, out string loginType) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        userId = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentID = string.Empty;
        token = string.Empty;
        loginType = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentUserId"))
        {
            userId = ht["AgentUserId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentUserId> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentID = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginType"))
        {
            loginType = ht["LoginType"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <LoginType> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(userId)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(agentID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(userId, password, out code, out desp);
    }

    public string MoreEpaymentReq(string reqXml, string appVersion)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        string loginType = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidMoreEpaymentReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token, out loginType))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getMoreEpaymentList(userId, agentCode, out ds, out errmsg))
            {
                writeLog("Error in getMoreEpaymentList : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable moreEpaymentList = ds.Tables[0];
            string id = string.Empty;
            string paymentType = string.Empty;
            string description = string.Empty;
            string paymentMode = string.Empty;
            string logoUrl = string.Empty;


            StringBuilder sb = new StringBuilder();
            sb.Append("<MoreEpaymentRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<EpaymentList>");
            var invalidEPaymentForMobileList = ConfigurationManager.AppSettings["InvalidEPaymentForMobile"].Split(',');
            foreach (DataRow payment in moreEpaymentList.Rows)
            {
                id = payment["Id"].ToString();
                paymentType = payment["PaymentType"].ToString();
                if (!IsValidVersionMPUandJCB(int.Parse(appVersion)) && invalidEPaymentForMobileList.Contains(paymentType)) continue;
                if (IsMobile(loginType) && (invalidEPaymentForMobileList.Contains(paymentType))) continue;
                description = payment["Description"].ToString();
                paymentMode = payment["PaymentMode"].ToString();
                if (paymentType == "A+ Wallet")
                {
                    logoUrl = ConfigurationManager.AppSettings["EpaymentLogoUrl"].ToString() + "APlus.png";
                }
                else
                {
                    logoUrl = ConfigurationManager.AppSettings["EpaymentLogoUrl"].ToString() + paymentType + ".png";
                }
                sb.Append(string.Format("<ePayment Id=\"{0}\" PaymentType=\"{1}\" Description=\"{2}\" PaymentMode=\"{3}\" LogoUrl=\"{4}\" />", id, paymentType, description, paymentMode, logoUrl));
            }
            sb.Append("</EpaymentList>");
            sb.Append("</MoreEpaymentRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in MoreEpaymentListReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    bool IsValidMoreEpaymentReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string userId, out string password, out string messageID, out string agentID,
        out string token, out string loginType) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        userId = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentID = string.Empty;
        token = string.Empty;
        loginType = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentUserId"))
        {
            userId = ht["AgentUserId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentUserId> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentID = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentCode> Tag");
            return false;
        }

        if (ht.ContainsKey("LoginType"))
        {
            loginType = ht["LoginType"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <LoginType> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(userId)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(agentID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(userId, password, out code, out desp);
    }

    public string CreateFavouriteEpaymentReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string userId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidCreateFavouriteEpaymentReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(reqXml);

            string jsonStr = JsonConvert.SerializeXmlNode(doc);

            if (_agentWCF.createFavouriteEpayment(userId, jsonStr, out errmsg))
            {
                StringBuilder sb = new StringBuilder();

                sb.Append("<CreateFavouriteEpaymentRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<MessageId>" + messageID + "</MessageId>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>Successfully Updated.</ResDesc>");
                sb.Append("</CreateFavouriteEpaymentRes>");

                writeLog("CreateFavouriteEpaymentRes:" + sb.ToString());
                return sb.ToString();
            }
            else
            {
                writeLog("Error in createFavouriteEpayment : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in CreateFavouriteEpaymentReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    bool IsValidCreateFavouriteEpaymentReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string userId, out string password, out string messageID, out string agentID, out string token) //, out int txnperpage, out int pageno
    {
        return IsValidPromotionListReq(ht, out code, out desp, out version, out ts, out userId, out password, out messageID, out agentID, out token);
    }

    #endregion

    #region ePaymentListReq

    public string ePaymentListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        bool isVersionGreaterOrEqualTo3420 = false;
        string loginType = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateePaymentListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agentCode, out token, out isVersionGreaterOrEqualTo3420, out loginType))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getePaymentListByAgentCode(agentCode, out ds, out errmsg))
            {
                // Error in getting Category and Biller
                writeLog("Error in getePaymentListByAgentCode : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable ePaymentList = ds.Tables[0];
            DataTable merchantStatusList = ds.Tables[1];
            string id = string.Empty;
            string paymentType = string.Empty;
            string description = string.Empty;
            string paymentMode = string.Empty;
            string logo = string.Empty;
            string isMerchant = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<ePaymentListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<ePaymentList>");
            var invalidEPaymentForMobileList = ConfigurationManager.AppSettings["InvalidEPaymentForMobile"].Split(',');
            foreach (DataRow ePayment in ePaymentList.Rows)
            {
                id = ePayment["Id"].ToString();
                paymentType = ePayment["PaymentType"].ToString();
                if (!isVersionGreaterOrEqualTo3420 && invalidEPaymentForMobileList.Contains(paymentType)) continue;
                if (IsMobile(loginType) && invalidEPaymentForMobileList.Contains(paymentType)) continue;
                description = ePayment["Description"].ToString();
                paymentMode = ePayment["PaymentMode"].ToString();
                logo = ePayment["LogoPath"].ToString();
                bool flat = false;

                foreach (DataRow merchantStatus in merchantStatusList.Rows)
                {
                    if (merchantStatus["PaymentType"].ToString() == paymentType)
                    {
                        flat = true;
                        isMerchant = merchantStatus["IsActiveMerchant"].ToString();
                        break;
                    }
                }
                if (flat)
                {
                    sb.Append(string.Format("<ePayment Id=\"{0}\" PaymentType=\"{1}\" Description=\"{2}\" Logo=\"{3}\" IsMerchant=\"{4}\" PaymentMode=\"{5}\" />", id, paymentType, description, logo, isMerchant, paymentMode));
                }
                else
                {
                    isMerchant = "N";
                    sb.Append(string.Format("<ePayment Id=\"{0}\" PaymentType=\"{1}\" Description=\"{2}\" Logo=\"{3}\" IsMerchant=\"{4}\" PaymentMode=\"{5}\" />", id, paymentType, description, logo, isMerchant, paymentMode));
                }
            }
            sb.Append("</ePaymentList>");
            sb.Append("</ePaymentListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in ePaymentListReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    private bool IsPOS(string loginType)
    {
        return !string.IsNullOrEmpty(loginType) & loginType == ConfigurationManager.AppSettings["LoginType_POS"].ToString();
    }

    private bool IsMobile(string loginType)
    {
        return loginType == LoginType.MS.ToString();
    }


    bool IsValidateePaymentListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string agentID,
        out string token, out bool isVersionGreaterOrEqualTo3420, out string loginType) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentID = string.Empty;
        token = string.Empty;
        isVersionGreaterOrEqualTo3420 = false;
        loginType = string.Empty;

        if (ht.ContainsKey("LoginType"))
        {
            loginType = ht["LoginType"].ToString();
            isVersionGreaterOrEqualTo3420 = true;
        }
        else
        {
            isVersionGreaterOrEqualTo3420 = false;
        }
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }

        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentID = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <AgentID> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }

        writeLog("Check if Data is null or empty");
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(agentID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);
    }

    #endregion

    #region ePayment Payment Type List Req

    public string PaymentTypeListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidPaymentTypeListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getPaymentTypeList(out ds, out errmsg))
            {
                // Error in getting Category and Biller
                writeLog("Error in PaymentTypeListReq : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable paymentTypeList = ds.Tables[0];
            string id = string.Empty;
            string paymentType = string.Empty;
            string description = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<PaymentTypeListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<PaymentTypeList>");

            foreach (DataRow ePayment in paymentTypeList.Rows)
            {
                id = ePayment["Id"].ToString();
                paymentType = ePayment["PaymentType"].ToString();
                description = ePayment["Description"].ToString();
                sb.Append(string.Format("<PaymentType Id=\"{0}\" Type=\"{1}\" Description=\"{2}\" />", id, paymentType, description));
            }
            sb.Append("</PaymentTypeList>");
            sb.Append("</PaymentTypeListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in ePaymentListReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    bool IsValidPaymentTypeListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageId, out string agentCode, out string token)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageId = string.Empty;
        agentCode = string.Empty;
        token = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageId = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentCode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <AgentID> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageId) || String.IsNullOrEmpty(agentCode))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);
    }


    #endregion

    #region ePaymentTxnStatusInquiryReq

    public string ePaymentTxnStatusInquiryReq(string reqXml)
    {
        string resXml = string.Empty;
        string errmsg = string.Empty;
        DataSet ds = null;

        string txnId = string.Empty;
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidePaymentTxnStatusInquiryReq(ht, out code, out desp, out version, out txnId))
        {
            return Utils.GetErrorString(version, code, desp);
        }


        try
        {
            int page = 1;
            int pageSize = 1;

            if (_agentWCF.getEPaymentTxnStatusByTxnId(txnId, out ds, out errmsg))
            {
                DataTable ePaymentTxn = ds.Tables[0];
                if (ePaymentTxn.Rows.Count > 0)
                {
                    string txnAmount = ePaymentTxn.Rows[0]["TransactionAmount"].ToString();
                    string paymentType = ePaymentTxn.Rows[0]["PaymentTypeDescription"].ToString();
                    string txnStatus = ePaymentTxn.Rows[0]["TransactionStatus"].ToString();

                    if (txnStatus == "AP")
                    {
                        txnStatus = "APPROVED";
                    }
                    else if (txnStatus == "PE")
                    {
                        txnStatus = "PENDING";
                    }
                    else
                    {
                        throw new Exception("Transaction is Rejected.");
                    }

                    StringBuilder sb = new StringBuilder();
                    sb.Append("<ePaymentTxnStatusInquiryRes>");
                    sb.Append(string.Format("<Version>{0}</Version>", version));
                    sb.Append(string.Format("<TimeStamp>{0}</TimeStamp>", DateTime.Now.ToString("yyyyMMddhhmmssffff")));
                    sb.Append(string.Format("<MessageID>{0}</MessageID>", messageID));
                    sb.Append(string.Format("<ResCode>{0}</ResCode>", code));
                    sb.Append(string.Format("<ResDesc>{0}</ResDesc>", desp));
                    sb.Append(string.Format("<Ref1>{0}</Ref1>", paymentType));
                    sb.Append(string.Format("<Ref2>{0}</Ref2>", string.Empty));
                    sb.Append(string.Format("<Ref3>{0}</Ref3>", string.Empty));
                    sb.Append(string.Format("<Ref4>{0}</Ref4>", string.Empty));
                    sb.Append(string.Format("<Ref5>{0}</Ref5>", string.Empty));
                    sb.Append(string.Format("<Ref1Name>{0}</Ref1Name>", "Payment Type"));
                    sb.Append(string.Format("<Ref2Name>{0}</Ref2Name>", string.Empty));
                    sb.Append(string.Format("<Ref3Name>{0}</Ref3Name>", string.Empty));
                    sb.Append(string.Format("<Ref4Name>{0}</Ref4Name>", string.Empty));
                    sb.Append(string.Format("<Ref5Name>{0}</Ref5Name>", string.Empty));
                    sb.Append(string.Format("<TxnStatus>{0}</TxnStatus>", txnStatus));
                    sb.Append(string.Format("<Amount>{0}</Amount>", txnAmount));
                    sb.Append("</ePaymentTxnStatusInquiryRes>");
                    resXml = sb.ToString();
                }
                else
                {
                    code = "01";
                    desp = "There is no Approved Transaction yet.";
                    resXml =Utils.GetErrorString(version, code, desp);
                }
            }
            else
            {
                throw new Exception(errmsg);
            }

        }
        catch (Exception ex)
        {
            writeLog("Error in ePaymentTxnStatusInquiryReq : " + ex.ToString());
            resXml =Utils.GetErrorString(version, "99", "System Error");
        }

        return resXml;
    }

    bool IsValidePaymentTxnStatusInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string txnId) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";
        txnId = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string token = string.Empty;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        if (ht.ContainsKey("TxnId"))
        {
            txnId = ht["TxnId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <TxnId> Tag");
            return false;
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);
    }

    #endregion

    #region RetailShopTypeList

    public string RetailShopTypeListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateRetailShopTypeListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getRetailShopTypeList(out ds, out errmsg))
            {
                writeLog("Error in getRetailShopTypeList : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable retailShopTypeList = ds.Tables[0];
            string id = string.Empty;
            string shopType = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<RetailShopTypeListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<RetailShopTypeList>");
            foreach (DataRow retailShopType in retailShopTypeList.Rows)
            {
                id = retailShopType["Id"].ToString();
                shopType = retailShopType["ShopType"].ToString();
                sb.Append(string.Format("<RetailShopType Id=\"{0}\" ShopType=\"{1}\" />", id, shopType));
            }
            sb.Append("</RetailShopTypeList>");
            sb.Append("</RetailShopTypeListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in RetailShopTypeListReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    bool IsValidateRetailShopTypeListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string agentID, out string token) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentID = string.Empty;
        token = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentID = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <AgentID> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(agentID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);
    }


    #endregion

    #region 123AgentListReq

    public string OneTwoThreeAgentListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidOneTwoThreeAgentListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agentCode, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getAll123Agent(out ds, out errmsg))
            {
                writeLog("Error in getAll123Agent : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable _123AgentList = ds.Tables[0];
            string id = string.Empty;
            string _123AgentCode = string.Empty;
            string agentName = string.Empty;
            string channelCode = string.Empty;
            string logoUrl = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<OneTwoThreeAgentListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<OneTwoThreeAgentList>");
            foreach (DataRow agent in _123AgentList.Rows)
            {
                id = agent["Id"].ToString();
                _123AgentCode = agent["AgentCode"].ToString();
                agentName = agent["AgentName"].ToString();
                channelCode = agent["ChannelCode"].ToString();
                logoUrl = agent["LogoUrl"].ToString();
                sb.Append(string.Format("<OneTwoThreeAgent Id=\"{0}\" AgentCode=\"{1}\" AgentName=\"{2}\" ChannelCode=\"{3}\" LogoUrl=\"{4}\" />", id, _123AgentCode, agentName, channelCode, logoUrl));
            }
            sb.Append("</OneTwoThreeAgentList>");
            sb.Append("</OneTwoThreeAgentListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in OneTwoThreeAgentListReq : " + ex.ToString());
            response =Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    bool IsValidOneTwoThreeAgentListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string agentID, out string token) //, out int txnperpage, out int pageno
    {
        return IsValidateRetailShopTypeListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agentID, out token);
    }


    #endregion

    public string NrcTownshipCodeListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateNrcTownshipCodeListReq(ht, out code, out desp, out version, out ts, out email, out password)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        try
        {
            StringBuilder sb = new StringBuilder();

            if (_agentWCF.GetNrcTownshipCode(out ds, out errmsg))
            {
                sb.Append("<NrcTownshipCodeListRes>");
                sb.Append("<Version>" + version + "</Version>");
                sb.Append("<TimeStamp>" + ts + "</TimeStamp>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + desp + "</ResDesc>");

                for (int i = 1; i <= ds.Tables[0].Rows.Count; i++)
                {
                    var dt = ds.Tables[i];
                    sb.Append(string.Format("<NrcTownshipCodeList DivisionId=\"{0}\">", dt.Rows[0]["DivisionId"]));
                    foreach (DataRow each in dt.Rows)
                    {
                        string id = each["Id"].ToString();
                        string townshipCode = each["TownshipCode"].ToString();
                        sb.Append(string.Format("<Township Id=\"{0}\" Code=\"{1}\" />", id, townshipCode));
                    }
                    sb.Append("</NrcTownshipCodeList>");
                }

                sb.Append("</NrcTownshipCodeListRes>");
                return sb.ToString();
            }
            else
            {
                writeLog(string.Format("Error in NrcTownshipCodeListReq: {0}", errmsg));
                code = "99";
                errmsg = "System Error";
                return Utils.GetErrorResponse(code, desp, ts, version);
            }
        }
        catch (Exception ex)
        {
            writeLog(string.Format("Error in NrcTownshipCodeListReq: {0}", ex.ToString()));
            StringBuilder sb = new StringBuilder();

            code = "99";
            errmsg = "System Error";
            return Utils.GetErrorResponse(code, desp, ts, version);
        }

    }

    bool IsValidateNrcTownshipCodeListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password)
    {
        code = "00";
        desp = "Success";
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
                this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }

    bool IsValidateAgentRequestListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password) //, out int txnperpage, out int pageno
    {
        return IsValidateNrcTownshipCodeListReq(ht, out code, out desp, out version, out ts, out email, out password);
    }

    bool IsValidateIssueTypeListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string isVerify) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        isVerify = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("IsVerify"))
        {
            isVerify = ht["IsVerify"].ToString();
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
                this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }

    bool IsValidateInsertAgentRequestReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string requestType, out string itemQuantity, out string amount, out string requireDate) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        requireDate = string.Empty;
        requestType = string.Empty;
        itemQuantity = string.Empty;
        amount = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();
            if (string.IsNullOrEmpty(amount))
            {
                amount = "0.0";
            }
        }


        if (ht.ContainsKey("Quantity"))
        {
            itemQuantity = ht["Quantity"].ToString();
            if (string.IsNullOrEmpty(itemQuantity))
            {
                itemQuantity = "0";
            }
        }

        if (ht.ContainsKey("RequestType"))
        {
            requestType = ht["RequestType"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <RequestType> Tag");
            return false;
        }

        if (ht.ContainsKey("RequireDate"))
        {
            requireDate = ht["RequireDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <RequireDate> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(requestType) || String.IsNullOrEmpty(requireDate))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
                this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }

    bool IsValidateInsertAgentIssueReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string issueTypeId, out string description, out string filevalue, out string fileName, out string fileformat, out string agentCode, out string agentName, out string agentUserName) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        issueTypeId = string.Empty;
        filevalue = string.Empty;
        fileformat = string.Empty;
        fileName = string.Empty;
        description = string.Empty;
        agentName = string.Empty;
        agentCode = string.Empty;
        agentUserName = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("FileName"))
        {
            fileName = ht["FileName"].ToString();
        }


        if (ht.ContainsKey("FileValue"))
        {
            filevalue = ht["FileValue"].ToString();
        }


        if (ht.ContainsKey("FileFormat"))
        {
            fileformat = ht["FileFormat"].ToString();
        }


        if (ht.ContainsKey("IssueTypeId"))
        {
            issueTypeId = ht["IssueTypeId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <IssueTypeId> Tag");
            return false;
        }

        if (ht.ContainsKey("Description"))
        {
            description = ht["Description"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Description> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(description) || String.IsNullOrEmpty(issueTypeId))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
                agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                agentName = Convert.ToString(ds.Tables[0].Rows[0]["AGENTNAME"]);
                agentUserName = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERNAME"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }

    public string AgentRequestListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateAgentRequestListReq(ht, out code, out desp, out version, out ts, out email, out password)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        try
        {
            StringBuilder sb = new StringBuilder();

            if (_agentWCF.GetAgenRequest(email, out ds, out errmsg))
            {
                sb.Append("<AgentRequestListRes>");
                sb.Append("<Version>" + version + "</Version>");
                sb.Append("<TimeStamp>" + ts + "</TimeStamp>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + desp + "</ResDesc>");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    var dt = ds.Tables[0];
                    foreach (DataRow each in dt.Rows)
                    {
                        sb.Append("<AgentRequest>");
                        sb.Append("<AgentRequestType>" + each["AgentRequestType"] + "</AgentRequestType>");
                        sb.Append("<RequireDate>" + each["RequireDate"] + "</RequireDate>");
                        sb.Append("<ActionPerson>" + each["ActionPerson"] + "</ActionPerson>");
                        sb.Append("<Status>" + each["Status"] + "</Status>");
                        sb.Append("</AgentRequest>");
                    }
                }

                sb.Append("</AgentRequestListRes>");

                writeLog("AgentRequest List:" + sb.ToString());
                return sb.ToString();
            }

            return Utils.GetErrorResponse(code, desp, ts, version);
        }
        catch (Exception ex)
        {
            writeLog("Error in AgentRequestListReq : " + ex.ToString());
        }

        return string.Empty;
    }

    public string GetAgentIssueTypeReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        string loginType = string.Empty;
        if (ht.ContainsKey("LoginType"))
        {
            loginType = ht["LoginType"].ToString();
        }

        if (!IsValidateAgentRequestListReq(ht, out code, out desp, out version, out ts, out email, out password)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        try
        {

            StringBuilder sb = new StringBuilder();

            if (_agentWCF.GetAgenIssueTypes(out ds, out errmsg))
            {
                sb.Append("<GetAgentIssueTypeRes>");
                sb.Append("<Version>" + version + "</Version>");
                sb.Append("<TimeStamp>" + ts + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>Success</ResDesc>");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    var dt = ds.Tables[0];

                    //remove "NearMe Kyc Verification" issue type in list if loginType is with "MS" (mobile)
                    if (loginType == "MS")
                    {
                        var filter = dt.AsEnumerable().
                      Where(x => x.Field<string>("AgentIssueType").ToLower().Trim() != ConfigurationManager.AppSettings["KycRegisterRequestIssueType"].ToLower().Trim());

                        dt = filter.CopyToDataTable<DataRow>();
                    }


                    foreach (DataRow each in dt.Rows)
                    {
                        var it = each["AgentIssueType"];
                        it = it.ToString().Replace("&", "&amp;");

                        sb.Append("<IssueType>");
                        sb.Append("<AgentIssueTypeId>" + each["AgentIssueTypeId"] + "</AgentIssueTypeId>");
                        sb.Append("<AgentIssueType>" + it + "</AgentIssueType>");
                        sb.Append("</IssueType>");
                    }
                }

                sb.Append("</GetAgentIssueTypeRes>");

                writeLog("AgentRequest List:" + sb.ToString());
                return sb.ToString();
            }

            return Utils.GetErrorResponse(code, desp, ts, version);

        }
        catch (Exception ex)
        {
            writeLog("Error in AgentRequestListReq : " + ex.ToString());
        }

        return string.Empty;
    }

    public string InsertAgentIssue(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        var fileName = string.Empty;
        var fileFormat = string.Empty;
        var fileValue = string.Empty;
        var issueTypeId = string.Empty;
        var description = string.Empty;
        var issueId = string.Empty;
        var filelocation = string.Empty;
        var readfile = string.Empty;
        var agentName = string.Empty;
        var agentCode = string.Empty;
        var agentUserName = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateInsertAgentIssueReq(ht, out code, out desp, out version, out ts, out email, out password, out issueTypeId, out description, out fileValue, out fileName, out fileFormat, out agentCode, out agentName, out agentUserName)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        try
        {
            var filePath = ConfigurationManager.AppSettings["FilePath"];
            var fileWritePath = ConfigurationManager.AppSettings["FileWritePath"];

            if (!string.IsNullOrEmpty(filePath) && !string.IsNullOrEmpty(fileValue) && !string.IsNullOrEmpty(fileName) && !string.IsNullOrEmpty(fileFormat))
            {
                var img = Convert.FromBase64String(fileValue);
                readfile = fileWritePath + fileName + "." + fileFormat;
                filelocation = filePath + fileName + "." + fileFormat;
                File.WriteAllBytes(readfile, img);
            }

            if (_agentWCF.InsertAgenIssue(issueTypeId, description, filelocation, email, fileFormat, fileName, agentName, agentCode, agentUserName, out issueId, out errmsg))
            {
                StringBuilder sb = new StringBuilder();

                sb.Append("<InsertAgentIssueRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>Success</ResDesc>");
                sb.Append("</InsertAgentIssueRes>");

                writeLog("InsertAgentIssue:" + sb.ToString());
                return sb.ToString();
            }

            else
            {
                return Utils.GetErrorResponse(code, desp);
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in InsertAgentIssue : " + ex.ToString());
        }

        return string.Empty;
    }

    public string InsertAgentRequest(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string requireDate = string.Empty;
        string requestType = string.Empty;
        string quantity = string.Empty;
        string amount = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateInsertAgentRequestReq(ht, out code, out desp, out version, out ts, out email, out password, out requestType, out quantity, out amount, out requireDate)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        var errmsg = string.Empty;
        var requestId = string.Empty;
        DataSet ds = null;
        try
        {
            if (_agentWCF.InsertAgenRequest(requestType, email, requireDate, Convert.ToInt16(quantity), Convert.ToDecimal(amount), out requestId, out errmsg))
            {
                return AgentRequestListReq(reqXml);
            }
            else
            {
                return Utils.GetErrorResponse(code, errmsg);
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in InsertAgentRequest : " + ex);
        }

        return string.Empty;
    }

    private bool ValidateInquiryPGReq(Hashtable ht, out InquiryPGReq inquiryPGReq, out RespModel respModel)
    {
        inquiryPGReq = new InquiryPGReq();
        respModel = new RespModel();

        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            inquiryPGReq.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            inquiryPGReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            inquiryPGReq.MessageID = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            inquiryPGReq.AgentUserID = ht["Email"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <Email> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref2"))
        {
            inquiryPGReq.CustomerID = ht["Ref2"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <CustomerID> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref1"))
        {
            inquiryPGReq.PartnerCode = ht["Ref1"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <PartnerCode> Tag");
            return false;
        }
        return true;
    }

    public string InquiryPGReq(string reqXml)
    {
        InquiryPGReq inquiryPGReq = new InquiryPGReq();
        RespModel respModel = new RespModel();

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!ValidateInquiryPGReq(ht, out inquiryPGReq, out respModel))
        {
            writeLog("Error in ValidateAgentCustomerBindingInfo : " + respModel.RespDesc);
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }

        System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("<Ref2>(.*)</Ref2>");
        var v = regex.Match(reqXml);
        string customerID = string.Format("<Ref2>{0}</Ref2>", inquiryPGReq.CustomerID);
        string output = System.Text.RegularExpressions.Regex.Replace(reqXml, "<Ref2>(.*)</Ref2>", customerID);
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.inquiry2Biller(output);
    }

    private bool ValidateAgentCustomerBindingInfo(Hashtable ht, out AgentCustomerBindingInfoReq agnCustBindInfoReq, out RespModel respModel)
    {
        agnCustBindInfoReq = new AgentCustomerBindingInfoReq();
        respModel = new RespModel();

        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            agnCustBindInfoReq.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            agnCustBindInfoReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            agnCustBindInfoReq.MessageID = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            agnCustBindInfoReq.AgentUserID = ht["Email"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <Email> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref2"))
        {
            agnCustBindInfoReq.CustomerID = ht["Ref2"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <CustomerID> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref1"))
        {
            agnCustBindInfoReq.PartnerCode = ht["Ref1"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <PartnerCode> Tag");
            return false;
        }
        return true;
    }

    public string AgentCustomerBindingInfoReq(string reqXml)
    {
        AgentCustomerBindingInfoReq agnCustBindInfoReq = new AgentCustomerBindingInfoReq();
        RespModel respModel = new RespModel();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!ValidateAgentCustomerBindingInfo(ht, out agnCustBindInfoReq, out respModel))
        {
            writeLog("Error in ValidateAgentCustomerBindingInfo : " + respModel.RespDesc);
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }

        DataSet ds = null;
        string errmsg = string.Empty;

        if (_agentWCF.getAgentCustomerBindingInfo(agnCustBindInfoReq.AgentUserID, out ds, out errmsg))
        {
            Logger.writeLog("GetStatusInquiry WCF Success : ", ref log);
            try
            {
                AgentCustomerBindingInfoRes agnCustBindingInfoResp = new AgentCustomerBindingInfoRes();
                agnCustBindingInfoResp.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
                agnCustBindingInfoResp.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    agnCustBindingInfoResp.CustomerID = ds.Tables[0].Rows[0]["CUSTOMERID"].ToString();
                    agnCustBindingInfoResp.IsBound = ds.Tables[0].Rows[0]["ISBOUND"].ToString();

                    if (agnCustBindingInfoResp.IsBound.ToLower() == "y")
                    {
                        System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("<Ref2>(.*)</Ref2>");
                        var v = regex.Match(reqXml);
                        string customerID = string.Format("<Ref2>{0}</Ref2>", agnCustBindingInfoResp.CustomerID);
                        string output = System.Text.RegularExpressions.Regex.Replace(reqXml, "<Ref2>(.*)</Ref2>", customerID);
                        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
                        string tmpResponse = bis.inquiry2Biller(output);
                        string response = tmpResponse.Replace("<InquiryPGRes>", "<AgentCustomerBindingInfoRes>").Replace("</InquiryPGRes>", "</AgentCustomerBindingInfoRes>");
                        return response;
                    }
                    else
                    {
                        StringBuilder sb = new StringBuilder();
                        sb.Append("<AgentCustomerBindingInfoRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>09</ResCode>");
                        sb.Append("<ResDesc>There is no Customer bound.</ResDesc>");
                        sb.Append("</AgentCustomerBindingInfoRes>");
                        return sb.ToString();
                    }
                }
                else
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<AgentCustomerBindingInfoRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>09</ResCode>");
                    sb.Append("<ResDesc>There is no Customer bound.</ResDesc>");
                    sb.Append("</AgentCustomerBindingInfoRes>");
                    return sb.ToString();
                }
            }
            catch (Exception ex)
            {
                writeLog("AgentCustomerBindingInfoReq Error : " + ex.ToString());
                return ex.ToString();
            }
        }
        else
        {
            StringBuilder sb = new StringBuilder();
            return Utils.GetErrorResponse("05", "Error from getAgentCustomerBindingInfo.");
        }
    }

    private bool ValidateBindAgentCustomerReq(Hashtable ht, out BindAgentCustomerReqModel bindAgnCustReq, out RespModel respModel)
    {
        bindAgnCustReq = new BindAgentCustomerReqModel();
        respModel = new RespModel();

        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            bindAgnCustReq.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            bindAgnCustReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            bindAgnCustReq.MessageID = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentUserID"))
        {
            bindAgnCustReq.AgentUserID = ht["AgentUserID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <AgentUserID> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref2"))
        {
            bindAgnCustReq.CustomerID = ht["Ref2"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <Ref2> Tag");
            return false;
        }
        return true;
    }

    public string BindAgentCustomerReq(string reqXml)
    {
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        string tmpResponse = bis.inquiry2Biller(reqXml);
        string response = tmpResponse.Replace("<InquiryPGRes>", "<BindAgentCustomerRes>").Replace("</InquiryPGRes>", "</BindAgentCustomerRes>");

        if (!tmpResponse.Contains("Invalid CustomerID"))
        {
            BindAgentCustomerReqModel bindAgnCustReqModel = new BindAgentCustomerReqModel();
            RespModel respModel = new RespModel();

            Hashtable ht = Utils.getHTableFromXML(reqXml);
            if (!ValidateBindAgentCustomerReq(ht, out bindAgnCustReqModel, out respModel))
            {
                writeLog("Error in ValidateAgentCustomerBindingInfo : " + respModel.RespDesc);
                return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
            }

            string errmsg = string.Empty;

            if (_agentWCF.bindAgenrCustomer(bindAgnCustReqModel.AgentUserID, bindAgnCustReqModel.CustomerID, out errmsg))
            {
                Logger.writeLog("BindAgentCustomerReq WCF Success : ", ref log);
                try
                {
                    DataSet ds = null;
                    if (_agentWCF.getAgentCustomerBindingInfo(bindAgnCustReqModel.AgentUserID, out ds, out errmsg))
                    {
                        Logger.writeLog("getAgentCustomerBindingInfo WCF Success : ", ref log);
                        try
                        {
                            AgentCustomerBindingInfoRes agnCustBindingInfoResp = new AgentCustomerBindingInfoRes();

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                agnCustBindingInfoResp.CustomerID = ds.Tables[0].Rows[0]["CUSTOMERID"].ToString();
                                agnCustBindingInfoResp.IsBound = ds.Tables[0].Rows[0]["ISBOUND"].ToString();

                                if (agnCustBindingInfoResp.IsBound.ToLower() == "y") return response;
                            }
                            return GetNoAgentCustomerBound();

                        }
                        catch (Exception ex)
                        {
                            writeLog("AgentCustomerBindingInfoReq Error : " + ex.ToString());
                            return ex.ToString();
                        }
                    }

                    return Utils.GetErrorResponse("09", errmsg);

                }
                catch (Exception ex)
                {
                    writeLog("BindAgentCustomerReq Error : " + ex.ToString());
                    return ex.ToString();
                }
            }

            return Utils.GetErrorResponse("05", "Error from bindAgenrCustomer");
        }

        return Utils.GetErrorResponse("09", "Invalid CustomerID");

    }

    private string GetNoAgentCustomerBound()
    {
        var sb = new StringBuilder();
        sb.Append("<BindAgentCustomerRes>");
        sb.Append("<Version>1.0</Version>");
        sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
        sb.Append("<ResCode>09</ResCode>");
        sb.Append("<ResDesc>There is no Customer bound.</ResDesc>");
        sb.Append("</BindAgentCustomerRes>");
        return sb.ToString();
    }

    private bool ValidateUnBindAgentCustomerReq(Hashtable ht, out UnBindAgentCustomerReqModel unbindAgnCustReq, out RespModel respModel)
    {
        unbindAgnCustReq = new UnBindAgentCustomerReqModel();
        respModel = new RespModel();

        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            unbindAgnCustReq.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            unbindAgnCustReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            unbindAgnCustReq.MessageID = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentUserID"))
        {
            unbindAgnCustReq.AgentUserID = ht["AgentUserID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <AgentUserID> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref2"))
        {
            unbindAgnCustReq.CustomerID = ht["Ref2"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <CustomerID> Tag");
            return false;
        }
        return true;
    }

    public string UnBindAgentCustomerReq(string reqXml)
    {
        UnBindAgentCustomerReqModel unbindAgnCustReqModel = new UnBindAgentCustomerReqModel();
        RespModel respModel = new RespModel();

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!ValidateUnBindAgentCustomerReq(ht, out unbindAgnCustReqModel, out respModel))
        {
            writeLog("Error in ValidateAgentCustomerBindingInfo : " + respModel.RespDesc);
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }

        string errmsg = string.Empty;

        if (_agentWCF.unbindAgentCustomer(unbindAgnCustReqModel.AgentUserID, unbindAgnCustReqModel.CustomerID, out errmsg))
        {
            Logger.writeLog("UnBindAgentCustomerReq WCF Success : ", ref log);
            try
            {
                UnBindAgentCustomerResModel unbindAgentCustomerResModel = new UnBindAgentCustomerResModel();
                unbindAgentCustomerResModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
                unbindAgentCustomerResModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

                StringBuilder sb = new StringBuilder();
                sb.Append("<UnBindAgentCustomerRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<ResCode>" + unbindAgentCustomerResModel.RespCode + "</ResCode>");
                sb.Append("<ResDesc>" + unbindAgentCustomerResModel.RespDesc + "</ResDesc>");
                sb.Append("</UnBindAgentCustomerRes>");
                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("BindAgentCustomerReq Error : " + ex.ToString());
                return ex.ToString();
            }
        }
        return Utils.GetErrorResponse("05", "Error from bindAgenrCustomer");
    }

    public string InquiryReq(string reqXml)
    {
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.inquiry2Biller(reqXml);
    }

    public string EventInquiry(string reqXml)
    {
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.EventInquiry(reqXml);
    }

    public string GetServiceList(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string taxid = string.Empty;
        var sb = new StringBuilder();
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateAmountListReq(ht, out code, out desp, out version, out ts, out email, out password, out taxid)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        writeLog("Get GiftCard Deno List from EBA");
        var denoResponse = bis.GetGiftCardDenoList(taxid);
        if (!string.IsNullOrEmpty(denoResponse))
        {
            writeLog("Service Response. " + denoResponse);

            var description = JsonConvert.DeserializeObject<dynamic>(denoResponse);

            sb.Append("<GetServiceListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + ts + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<ServiceList>");

            foreach (var each in description.ServiceList)
            {
                sb.Append("<Service>");
                sb.Append("<ServiceId>" + each.ServiceId + "</ServiceId>");
                sb.Append("<Type>" + each.Type + "</Type>");
                sb.Append("<Description>" + each.Description + "</Description>");
                sb.Append("</Service>");
            }

            sb.Append("</ServiceList>");
            sb.Append("</GetServiceListRes>");
            return sb.ToString();
        }
        return Utils.GetErrorResponse("06", "Service not found.");
    }

    public string GetAstrologerList(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string taxid = string.Empty;
        var serviceId = string.Empty;

        var sb = new StringBuilder();
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateAmountListReq(ht, out code, out desp, out version, out ts, out email, out password, out taxid)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        if (ht.ContainsKey("ServiceId"))
        {
            serviceId = ht["ServiceId"].ToString();
        }
        else
        {
            return Utils.GetErrorResponse("06", "Invalid service Id.");
        }

        try
        {
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            var response = bis.GetAstrologerList(taxid, serviceId);
            if (!string.IsNullOrEmpty(response))
            {
                writeLog("Service Response. " + response);

                var description = JsonConvert.DeserializeObject<AstrologerDetails>(response);

                sb.Append("<GetAstrologerListRes>");
                sb.Append("<Version>" + version + "</Version>");
                sb.Append("<TimeStamp>" + ts + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>Success</ResDesc>");
                sb.Append("<MaximumQty>" + description.MaximumQty + "</MaximumQty>");
                sb.Append("<BirthTime>" + description.BirthTime + "</BirthTime>");

                sb.Append("<Astrologers>");
                foreach (var each in description.Astrologers)
                {
                    sb.Append("<Astrologer>");
                    sb.Append("<AstroId>" + each.AstroId + "</AstroId>");
                    sb.Append("<AstroName>" + each.AstroName + "</AstroName>");
                    sb.Append("</Astrologer>");
                }
                sb.Append("</Astrologers>");

                sb.Append("<Products>");
                foreach (var each in description.Products)
                {
                    sb.Append("<Product>");
                    sb.Append("<Id>" + each.Id + "</Id>");
                    sb.Append("<Name>" + each.Name + "</Name>");
                    sb.Append("</Product>");
                }
                sb.Append("</Products>");

                sb.Append("<UnitPrices>");
                foreach (var each in description.UnitPrices)
                {
                    sb.Append("<UnitPrice>");
                    sb.Append("<Qty>" + each.Qty + "</Qty>");
                    sb.Append("<Price>" + each.Price + "</Price>");
                    sb.Append("</UnitPrice>");
                }
                sb.Append("</UnitPrices>");

                sb.Append("</GetAstrologerListRes>");
            }

            else
            {
                return Utils.GetErrorResponse("06", "Astrologers not found.");
            }

            return sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("GetCanalPlusPackagesReq Error : " + ex.ToString());
        }
        return "";
    }

    public string SkynetPackageReq(string requestXML)
    {
        try
        {
            writeLog("SkynetPackageReq started");
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            return bis.GetSkyNetPackages(requestXML);
        }
        catch (Exception ex)
        {
            writeLog("SkynetPackageReq Error : " + ex.ToString());
        }
        return "";
    }

    public string GetCanalPlusPackagesReq(string reqXml)
    {
        try
        {
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            return bis.getCanalPlusPackages(reqXml);
        }
        catch (Exception ex)
        {
            writeLog("GetCanalPlusPackagesReq Error : " + ex.ToString());
        }
        return "";
    }
    public string TelenorBBInquiry(string reqXML)
    {
        try
        {
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            return bis.TelenorBBInquiry(reqXML);
        }
        catch (Exception ex)
        {
            writeLog("Error in TelenorBBInquiry " + ex.ToString());
        }
        return "";
    }

    public string FtthOrWtthInquiry(string reqXML)
    {
        try
        {
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            return bis.FtthOrWtthInquiry(reqXML);
        }
        catch (Exception ex)
        {
            writeLog("Error in FtthOrWtthInquiry " + ex.ToString());
        }
        return "";
    }

    public string MptPackageInquiry(string reqXML)
    {
        try
        {
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            return bis.MptPackageInquiry(reqXML);
        }
        catch (Exception ex)
        {
            writeLog("Error in MptPackageInquiry " + ex.ToString());
        }
        return "";
    }

    public string OoredooPackageInquiry(string reqXML)
    {
        try
        {
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            return bis.OoredooPackageInquiry(reqXML);
        }
        catch (Exception ex)
        {
            writeLog("Error in OoredooPackageInquiry " + ex.ToString());
        }
        return "";
    }

    public string MyTelPackageInquiry(string reqXML)
    {
        try
        {
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            return bis.MyTelPackageInquiry(reqXML);
        }
        catch (Exception ex)
        {
            writeLog("Error in MyTelPackageInquiry " + ex.ToString());
        }
        return "";
    }

    public bool IsValidateInsertLogReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string password, out string logmessage, out string logtypeid, out string agentuserid, out string messageid, out string requestedby)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        logmessage = string.Empty;
        password = string.Empty;
        logtypeid = string.Empty;
        agentuserid = string.Empty;
        requestedby = string.Empty;
        messageid = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            agentuserid = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }



        if (ht.ContainsKey("LogTypeID"))
        {
            logtypeid = ht["LogTypeID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing LogTypeID Tag");
            return false;
        }

        if (ht.ContainsKey("LogMessage"))
        {
            logmessage = ht["LogMessage"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing LogMessage Tag");
            return false;
        }

        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(agentuserid) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(logtypeid) || String.IsNullOrEmpty(logmessage) || String.IsNullOrEmpty(requestedby) || String.IsNullOrEmpty(messageid))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return authentication(agentuserid, password, out code, out desp);
    }

    public string changeStatusCodeToCode(string code)
    {
        string resCode = null;
        switch (code)
        {
            case "BP_ST_00": resCode = "00"; break;
            case "BP_ST_01": resCode = "01"; break;
            case "BP_ST_02": resCode = "04"; break;
            case "BP_ST_03": resCode = "03"; break;
            case "BP_ST_04": resCode = "02"; break;
            case "BP_ST_05": resCode = "09"; break;

        }
        return resCode;
    }

    public string InsertLogReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string agentuserid = string.Empty;
        string password = string.Empty;

        string logtypeid = string.Empty;
        string logmessage = string.Empty;

        string messageid = string.Empty;
        string requestedby = string.Empty;

        var sb = new StringBuilder();

        try
        { // Break Request message from A2A program

            Hashtable ht = Utils.getHTableFromXML(reqXml);
            if (!IsValidateInsertLogReq(ht, out code, out desp, out version, out ts, out password, out logmessage, out logtypeid, out agentuserid, out messageid, out requestedby))
            {
                return Utils.GetErrorResponse(code, desp);
            }
            else
            {
                if (ht.ContainsKey("MobileNo"))
                {
                    string mobileNo = ht["MobileNo"].ToString();
                    string txnID = ht["TransactionID"].ToString();

                    if (!String.IsNullOrEmpty(mobileNo))
                    {
                        try
                        {
                            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
                            writeLog("Txn ID : " + txnID);
                            writeLog("Mobile No. : " + mobileNo);
                            if (!bis.doSMS(long.Parse(txnID), mobileNo))
                            {
                                writeLog("Error in doSMS. TxnID : " + txnID + " | Mobile No : " + mobileNo);
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error in doSMS calling : " + ex.ToString());
                        }
                    }
                    else
                    {
                        writeLog("No Mobile No. Value.");
                    }
                }
                else
                {
                    writeLog("No Mobile No. Tag.");
                }
            }

            string errmsg = "";
            if (_agentWCF.InsertAgentUserLog(int.Parse(logtypeid), logmessage, agentuserid, string.Empty, out errmsg))
            {
                sb.Append("<InserLogRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>Sussess</ResDesc>");
                sb.Append("</InserLogRes>");
                return sb.ToString();

            }
            else
            {
                return Get123APIError();
            }
        }
        catch (Exception ex)
        {
            writeLog("Error : " + ex.ToString());
            return Get123APIError();
        }
    }

    private string Get123APIError()
    {
        var sb = new StringBuilder();
        sb.Append("<Error>");
        sb.Append("<Version>1.0</Version>");
        sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
        sb.Append("<ResCode>" + "97" + "</ResCode>");
        sb.Append("<ResDesc>" + "123 API Error" + "</ResDesc>");
        sb.Append("</Error>");
        return sb.ToString();
    }

    #region UpgradeReq

    public string UpgradeReq(string reqXml)
    {

        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string timeStamp = string.Empty;
        string agentUserID = string.Empty;
        string password = string.Empty;

        string messageID = string.Empty;
        string loginType = string.Empty;

        var sb = new StringBuilder();

        try
        { // Break Request message from A2A program

            Hashtable ht = Utils.getHTableFromXML(reqXml);
            if (!IsValidateUpgradeReq(ht, out code, out desp, out version, out timeStamp, out password, out agentUserID, out messageID, out loginType))
            {
                return Utils.GetErrorResponse(code, desp);
            }
            else
            {
                string appurl, appversion, usermanual, posUserManual;
                DataSet ds = null;
                string errMsg = string.Empty;
                string latestAppVersion = string.Empty;
                appurl = ConfigurationManager.AppSettings["AppUrl"].ToString();
                appversion = ConfigurationManager.AppSettings["AppVersion"].ToString();

                try
                {
                    if (_agentWCF.GetMobileVersionValueByKey(MobileApiConstants.MobileVersion, out ds, out errMsg))
                    {
                        latestAppVersion = ds.Tables[0].Rows[0]["Value"].ToString();
                        writeLog("GetMobileVersionValueByKey : " + latestAppVersion);
                    }
                }
                catch (Exception ex)
                {
                    writeLog("Error in GetMobileVersionValueByKey : " + errMsg);
                }

                usermanual = ConfigurationManager.AppSettings["ManualUrl"].ToString();
                posUserManual = ConfigurationManager.AppSettings["PosUserManualUrl"].ToString();
                sb.Append("<UpgradeRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<MessageID>" + messageID + "</MessageID>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>Successed</ResDesc>");
                sb.Append("<AppUrl>" + appurl + "</AppUrl>");
                sb.Append("<AppVersion>" + appversion + "</AppVersion>");
                sb.Append("<LatestAppVersion>" + latestAppVersion + "</LatestAppVersion>");
                if (!string.IsNullOrEmpty(loginType) && loginType == ConfigurationManager.AppSettings["LoginType_POS"].ToString())
                {
                    sb.Append("<UserManual>" + posUserManual + "</UserManual>");
                }
                else
                {
                    sb.Append("<UserManual>" + usermanual + "</UserManual>");
                }
                sb.Append("</UpgradeRes>");
                return sb.ToString();
            }



        }
        catch (Exception ex)
        {
            writeLog("Error : " + ex.ToString());
            return Get123APIError();
        }
    }

    public bool IsValidateUpgradeReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string password, out string agentuserid, out string messageid, out string loginType)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        password = string.Empty;
        agentuserid = string.Empty;
        messageid = string.Empty;
        loginType = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("LoginType"))
        {
            loginType = ht["LoginType"].ToString();
        }


        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(messageid))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;

    }

    #endregion

    #region SystemSettingReq
    public string SystemSettingReq(string reqXml)
    {
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.SystemSettingReq(reqXml);
    }
    #endregion

    #region Viber Out CountryList
    public string CountryListReq(string reqXml)
    {
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.CountryListReq(reqXml);
    }
    #endregion

    #region Confirm
    public string ConfirmReq(string reqXml)
    {
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.ConfirmToBiller(reqXml);
    }

    public string MerchantAcceptanceReq(string reqXml)
    {
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.MerchantAcceptanceReq(reqXml);
    }

    public string EPaymentVoidReq(string reqXml)
    {
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.EPaymentVoidReq(reqXml);
    }

    public string ConfirmPGReq(string reqXml)
    {
        return ConfirmReq(reqXml);
    }

    #endregion


    #region transactionlist

    public string TxnListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        int txnperpage = 0, pageno = 0;
        string smsMsg = string.Empty;
        string NRC = string.Empty;
        string expirye = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateTxnListReq(ht, out code, out desp, out version, out ts, out email, out password, out txnperpage,
                out pageno, out messageID))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.getTransactionlist(this.agentcode, email, txnperpage, pageno, out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<TxnListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" +
                          ds.Tables[1].Rows[0][0].ToString() + "\" totalTxnAmount=\"" +
                          ds.Tables[1].Rows[0][1].ToString() + "\" totalCommissionFee=\"" +
                          ds.Tables[1].Rows[0][2].ToString() + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" +
                          "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID +
                          "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string imgURL = string.Empty;
                        try
                        {
                            imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() +
                                     ds.Tables[0].Rows[i]["BILLERID"].ToString() + ".png";
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                        }

                        decimal agentFee =
                            Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["SERVICEFEE"].ToString())
                                ? "0"
                                : ds.Tables[0].Rows[i]["SERVICEFEE"].ToString());
                        decimal total = agentFee +
                                        Convert.ToDecimal(
                                            String.IsNullOrEmpty(ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString())
                                                ? "0"
                                                : ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString());
                        string agentName = ds.Tables[0].Rows[i]["AGENTNAME"].ToString();

                        string REFID2;
                        string REFID1, REFID1Name = string.Empty;
                        string REFID3, REFID3Name = string.Empty;
                        string biller;
                        string amount;
                        double totalAmount = 0;
                        string ref3Value;
                        string serviceFee;
                        string ref1Name;
                        string ref1Value;
                        string ref2Value;
                        string ref2Name;
                        string ref3Name;
                        string ref4Name;
                        string ref5Name;
                        string ref5Value;
                        string txnID;
                        string taxID;
                        string ref4Value;
                        string mapTaxID = string.Empty;
                        var txnDateTime = string.Empty;
                        var agentLogo = string.Empty;
                        REFID1 = ds.Tables[0].Rows[i]["REFID1"].ToString();
                        REFID1Name = ds.Tables[0].Rows[i]["REF1NAME"].ToString();
                        REFID2 = ds.Tables[0].Rows[i]["REFID2"].ToString();
                        REFID3 = ds.Tables[0].Rows[i]["REFID3"].ToString();
                        REFID3Name = ds.Tables[0].Rows[i]["REF3NAME"].ToString();
                        biller = ds.Tables[0].Rows[i]["COMPANYNAME"].ToString();

                        ref1Value = ds.Tables[0].Rows[i]["REFID1"].ToString();
                        ref1Name = ds.Tables[0].Rows[i]["REF1NAME"].ToString();
                        ref2Value = ds.Tables[0].Rows[i]["REFID2"].ToString();
                        ref2Name = ds.Tables[0].Rows[i]["REF2NAME"].ToString();
                        ref3Value = ds.Tables[0].Rows[i]["REFID3"].ToString();
                        ref3Name = ds.Tables[0].Rows[i]["REF3NAME"].ToString();
                        ref4Value = ds.Tables[0].Rows[i]["REFID4"].ToString();
                        ref4Name = ds.Tables[0].Rows[i]["REF4NAME"].ToString();
                        ref5Value = ds.Tables[0].Rows[i]["REFID5"].ToString();
                        ref5Name = ds.Tables[0].Rows[i]["REF5NAME"].ToString();

                        taxID = ds.Tables[0].Rows[i]["TAXID"].ToString();
                        txnID = ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString();
                        mapTaxID = ds.Tables[0].Rows[i]["MAPTAXID"].ToString();
                        txnDateTime = ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString();
                        amount = ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString();
                        serviceFee = ds.Tables[0].Rows[i]["SERVICEFEE"].ToString();

                        if (taxID == ConfigurationManager.AppSettings["PayBillsTaxId"].ToString())
                        {
                            writeLog("PayBills GetAgentLogo");
                            DataSet agentDs = null;
                            var msg = string.Empty;
                            if (_agentWCF.GetAgentLogoByAgentCode(REFID2, out agentDs, out msg))
                            {
                                agentLogo = (agentDs.Tables[0].Rows[0]["AGENTLOGO"] == DBNull.Value) ? ConfigurationManager.AppSettings["DefaultPartnerLogoUrl"].ToString() : Convert.ToBase64String((byte[])agentDs.Tables[0].Rows[0]["AGENTLOGO"]);
                                imgURL = (agentDs.Tables[0].Rows[0]["AGENTLOGO"] == DBNull.Value) ? ConfigurationManager.AppSettings["DefaultPartnerLogoUrl"].ToString() : Convert.ToBase64String((byte[])agentDs.Tables[0].Rows[0]["AGENTLOGO"]);
                            }
                        }

                        //GiftCagList
                        var giftCagList = ConfigurationManager.AppSettings["GiftCagList"].ToString().Split(',');

                        if (
                            mapTaxID == "0000000000006" ||
                            mapTaxID == "0000000000017" ||

                            mapTaxID == "0000000000019" ||
                            mapTaxID == "1230000000000")
                        {
                            REFID3 = "";
                            REFID3Name = "";
                        }
                        if (mapTaxID == "0000000000018" || mapTaxID == "0000000000010")
                        {
                            REFID1 = "";
                            REFID1Name = "";
                        }
                        if (mapTaxID == "0000000000019")
                        {
                            string[] words = ref4Value.Split(' ');
                            NRC = words[0].ToString();
                            expirye = words[1].ToString();
                        }

                        SMSHelper smsH = new SMSHelper();
                        writeLog("TaxID : " + taxID + "MapTaxID:" + mapTaxID);

                        if (mapTaxID == "0000000000028") //MMS Biller
                        {
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessagelegacyMusic(agentName, mapTaxID, biller, "PIN", "", "", "Ref", PIN,
                                "", "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"),
                                branchCode);

                        }
                        else if (mapTaxID == "2222222222222" || mapTaxID == "3333333333333" ||
                                 mapTaxID == "4444444444444"
                                 || mapTaxID == "5555555555555" || mapTaxID == "6666666666666" ||
                                 mapTaxID == "0000000000024" ||
                                 mapTaxID == "0000000000054" || mapTaxID == "0000000000061" ||
                                 mapTaxID == "0000000000062" || mapTaxID == "0000000000063" ||
                                 mapTaxID == "0000000000064" || mapTaxID == "0000000000065" ||
                                 mapTaxID == "0000000000066")
                        //CDMA800/MPTGSM/MECTEL/TELENOR/OOREDOO/CDMA450/MYTEL Biller
                        {
                            writeLog("This is Telcos Topup.");
                            REFID3 = Utils.maskString(REFID3);
                            smsMsg = string.Empty;
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();
                            if (ref3Value != "Airtime")
                            {
                                smsMsg = smsH.getMessageTopup(agentName, mapTaxID, biller, PIN, ref3Value, Expiry,
                                    double.Parse(amount).ToString("#,###.00"), branchCode);
                                //updated by hnt 20-March-2015 change biller Name to Biller
                            }



                        }

                        // this is for mahar mobile
                        else if (mapTaxID == "0000000000079")
                        {
                            //iTune/GooglePlay/Skype/Myantalk/SteamWallet/FaceBook/Vakok
                            writeLog("This is GiftCards.");
                            string[] words = ref4Value.Split(' ');
                            string PIN = string.Empty;
                            string Expiry = string.Empty;
                            if (words.Count() > 1)
                            {
                                PIN = words[0].ToString();
                                Expiry = words[1].ToString();
                            }

                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "",
                                    "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                    totalAmount.ToString("#,##0.00"), branchCode);
                        }
                        else if (mapTaxID == "0000000000001" || mapTaxID == "0000000000002" ||
                                 mapTaxID == "0000000000003" || mapTaxID == "0000000000004" ||
                                 mapTaxID == "0000000000015" || mapTaxID == "0000000000016" ||
                            mapTaxID == ConfigurationManager.AppSettings["SteamWalletSGDMapTaxId"].ToString() ||
                                 mapTaxID == "0000000000030" || mapTaxID == "1111111111111" ||
                                 mapTaxID == "0000000000012" || mapTaxID == "0000000000057" || mapTaxID == ConfigurationManager.AppSettings["SteamWalletSGDMapTaxId"].ToString() || mapTaxID == ConfigurationManager.AppSettings["LaLaKyiId"].ToString() || mapTaxID == ConfigurationManager.AppSettings["MyanmarNetAwaThone"].ToString() || mapTaxID == ConfigurationManager.AppSettings["MyanmarNetData"].ToString() || mapTaxID == ConfigurationManager.AppSettings["MyanmarNetPrepaid"].ToString() || mapTaxID == ConfigurationManager.AppSettings["HiWifi"].ToString())
                        {
                            //iTune/GooglePlay/Skype/Myantalk/SteamWallet/FaceBook/Vakok
                            writeLog("This is GiftCards.");
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "",
                                    "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                    totalAmount.ToString("#,##0.00"), branchCode);
                        }
                        else if (mapTaxID == "0000000000029") //RENT2Own
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, "Contract No", "", "",
                                "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"), branchCode);

                        }

                        else if (mapTaxID == "0000000000005")
                        {
                            smsMsg = string.Empty;
                        }
                        else if (mapTaxID == "0000000000050")
                        {
                            writeLog("This is 1Stop+");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller1Stop(agentName, mapTaxID, biller, ref1Name, ref2Name,
                                "",
                                "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (mapTaxID == "0000000000017") //EasyPoints/
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Description",
                                "", "Ref", ref3Value, ref2Value, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (mapTaxID == "0000000000018" || mapTaxID == "0000000000010")
                        //MLM/MercyCorpsGenerate
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code",
                                "Description", "",
                                "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (mapTaxID == "0000000000006") //Putet
                        {
                            writeLog("This is Putet.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Duration",
                                "", "Ref",
                                ref3Value, ref2Value, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (mapTaxID == "0000000000019") //GGISnakeBite
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, "Policy No", "Ref",
                                "", "",
                                ref1Value, txnID.ToString(), expirye, "",
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);

                        }
                        else if (mapTaxID == "0000000000022") //METERBILL
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, ref1Name,
                                REFID3Name,
                                "Receipt No", "Ref", ref1Value, ref3Value, ref2Value, txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (mapTaxID == "0000000000023") //MahaRepayment
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, "Slip No",
                                "Customer ID",
                                "Receipt No", "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);

                        }
                        else if (mapTaxID == "0000000000031") //4TV
                        {
                            string[] words = ref4Value.Split(' ');
                            string Expiry = words[1].ToString();
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, REFID3Name,
                                "Expiry",
                                "Ref", ref1Value, ref3Value, Expiry, txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (mapTaxID == "0000000000052") //CanalPlus
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, REFID3Name,
                                "Expiry",
                                "Ref", ref1Value, ref3Value, ref4Value, txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (mapTaxID == "0000000000032") //123 Remit CashIn
                        {
                            writeLog("This is CashIn.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Payer Name", "", "",
                                "Ref",
                                ref2Value, "", "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (mapTaxID == "0000000000033") //123 Remit CashOut
                        {
                            writeLog("This is CashOut.");
                            totalAmount = double.Parse(amount) - double.Parse(serviceFee);
                            total = Convert.ToDecimal(totalAmount);
                            smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Payee Name", "", "",
                                "Ref",
                                ref2Value, "", "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }

                        else if (mapTaxID == "0000000000055") //iflix
                        {
                            writeLog("This is iflix.");
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();


                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "",
                                "Ref",
                                PIN, Expiry, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }

                        else if (mapTaxID == "0000000000067" || mapTaxID == ConfigurationManager.AppSettings["CookieTVTaxId"]
                            || mapTaxID == ConfigurationManager.AppSettings["FlexiblePassTaxId"] || mapTaxID == ConfigurationManager.AppSettings["WasoLearnTaxId"]) // Viu
                        {

                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();


                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "",
                                "Ref",
                                PIN, Expiry, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (mapTaxID == "0000000000058")
                        {
                            writeLog("This is TelenorBB.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name,
                                "IME/Expiry",
                                REFID3Name, "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["TelenorFtthMaptaxId"] ||
                                 mapTaxID == ConfigurationManager.AppSettings["TelenorWtthMaptaxId"])
                        {
                            writeLog("This is TelenorFtthOrWtth.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name,
                                ref2Name, REFID3Name, "Ref", ref1Value, ref2Value, ref3Value,
                                txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["Flight"])
                        {
                            writeLog("This is Flight.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.GetMessageBiller(txnID, agentName, mapTaxID, biller, ref1Name, ref2Name, REFID3Name, ds.Tables[0].Rows[i]["REF4NAME"].ToString(), ref1Value, ref2Value, ref3Value, ref4Value, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["OoredooFtth"])
                        {
                            writeLog("This is OoredooFtth.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            REFID3Name = string.Empty;
                            smsMsg = smsH.GetOoredooFtthMessage(agentName, biller, txnDateTime, ref1Name, ref2Name, "Ref", ref1Value, ref2Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["MyanPwel"])
                        {
                            writeLog("This is MyanPwel.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.GetMessageBiller(txnID, agentName, mapTaxID, biller, ref1Name, ref2Name, REFID3Name, ds.Tables[0].Rows[i]["REF4NAME"].ToString(), ref1Value, ref2Value, ref3Value, ref4Value, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["MinTheinKha"])
                        {
                            writeLog("This is MinTheinKha.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            REFID3 = string.Empty;
                            ref4Value = string.Empty;
                            var desc = ConfigurationManager.AppSettings["MinTheinKhaSmsDesc"];
                            smsMsg = smsH.GetMinTheinKhaMessageBiller(txnID, agentName, mapTaxID, biller, ref1Name, ref1Value, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode, desc);
                        }

                        else
                        {
                            writeLog("This is Bill Payment & Others.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);

                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name,
                                ref2Name, "", "Ref",
                                ref1Value, ref2Value, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }

                        if (mapTaxID == ConfigurationManager.AppSettings["PgMapTaxId"])
                        {
                            DataSet dataSet = null;
                            string errorMsg;
                            var invoiceList = new List<string>();
                            var amountList = new List<string>();
                            var txId = ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString();

                            if (_agentWCF.getAgentInvoicesInfo(txId, out dataSet, out errorMsg))
                            {
                                if (dataSet.Tables[0].Rows.Count > 0)
                                {
                                    for (int j = 0; j < dataSet.Tables[0].Rows.Count; j++)
                                    {
                                        invoiceList.Add(dataSet.Tables[0].Rows[j]["INVOICENUMBER"].ToString());
                                        amountList.Add(dataSet.Tables[0].Rows[j]["AMOUNT"].ToString());
                                    }
                                }
                            }

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" + REFID2 +
                                      "\" ref3=" + "\"" +
                                      string.Join(",", invoiceList) + "\" ref4=" + "\"" + string.Join(",", amountList) +
                                      "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      "InvoiceList" +
                                      "\" ref4Name=" + "\"" +
                                      "AmountList" + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\"  TaxID=" + "\"" + taxID + "\" />");

                        }

                        else if (mapTaxID == "0000000000058" ||
                                 mapTaxID == ConfigurationManager.AppSettings["TelenorFtthMaptaxId"] ||
                                 mapTaxID == ConfigurationManager.AppSettings["TelenorWtthMaptaxId"])
                        {
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + "" + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      REFID3Name + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["MptDataPackage"] || mapTaxID == ConfigurationManager.AppSettings["OoredooDataPackage"] || mapTaxID == ConfigurationManager.AppSettings["MyTelDataPackage"])
                        {
                            var ref1value = "(MPT-GSM)";
                            if (mapTaxID == ConfigurationManager.AppSettings["OoredooDataPackage"]) ref1value = "(Ooredoo-GSM)";
                            if (mapTaxID == ConfigurationManager.AppSettings["MyTelDataPackage"]) ref1value = "(MyTel-GSM)";

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                       "\" txnDate=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                       ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                        ref1value + "\" ref2=" + "\"" + string.Empty + "\" ref3=" + "\"" +
                                       REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                       ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                       REFID1Name + "\" ref2Name=" + "\"" +
                                        string.Empty + "\" ref3Name=" + "\"" +
                                       REFID3Name + "\" ref4Name=" + "\"" +
                                       ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                       ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                       ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                       imgURL + "\" locLatitude=" + "\"" +
                                       ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                       ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                       agentFee + "\" total=" + "\"" +
                                       total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                       "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["Flight"])
                        {
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["MmBusticket"])
                        {
                            REFID3 = string.Empty;
                            REFID3Name = string.Empty;
                            (new MMBusService()).PopulateMMBusTransaction(sb, ds, i, REFID2, NRC, expirye, imgURL, total.ToString("#,##0.00"), agentName, smsMsg, taxID, amount.ToString(), smsH, mapTaxID, biller,
                                ref1Name, ref1Value, ref2Value, txnID.ToString(), serviceFee, ref4Value, REFID1, REFID3, REFID1Name, REFID3Name, agentFee, branchCode);
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["WunZinnMapTaxId"].ToString())
                        {
                            smsMsg = string.Empty;
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();

                            smsMsg = smsH.getMessageBillerWithTxnDateTime(agentName, mapTaxID, biller, "Code",
                                "Expiry", "", "Ref",
                                PIN, Expiry, "", txnID.ToString(), "Txn Date/Time",
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode, ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString());

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      "" + "\" ref2Name=" + "\"" +
                                      "" + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["TelenorDataPackPinMapTaxId"].ToString())
                        {
                            REFID3 = Utils.maskString(REFID3);
                            smsMsg = string.Empty;
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();
                            smsMsg = smsH.getMessageTopup(agentName, mapTaxID, biller, PIN, ref3Value, Expiry,
                                    double.Parse(amount).ToString("#,###.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (mapTaxID == "0000000000017")// This is EasyPoint
                        {
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID3"].ToString() + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      "Code" + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (mapTaxID == "0000000000097")// This is Mother Finance Loan Registration
                        {
                            writeLog("This is Mother Finance Loan Registration");
                            smsMsg = string.Empty;
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      0 + "\" ref1=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID2"].ToString() + "\" ref3=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID3"].ToString() + "\" ref4=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID4"].ToString() + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + " Ks" + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      total + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["MescTaxId"])
                        {
                            writeLog("This is MESC.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            DateTime dateTime;
                            if (DateTime.TryParse(ref4Value, out dateTime))
                            {
                                ref4Value = DateTime.Parse(ref4Value).ToString("dd/MM/yyyy");
                            }
                            if (REFID2.Split('|').Count() > 1)
                            {
                                REFID2 = REFID2.Split('|')[1];
                            }
                            else
                            {
                                REFID2 = string.Empty;
                            }
                            if (ref2Name.Split('|').Count() > 1)
                            {
                                ref2Name = ref2Name.Split('|')[1];
                            }
                            else
                            {
                                ref2Name = string.Empty;
                            }
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), "", ds.Tables[0].Rows[i]["REF4NAME"].ToString(), "Ref", ref1Value, "", ref4Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ref2Name
                                      + "\" ref3Name=" + "\"" + "" +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["YescTaxId"])
                        {
                            writeLog("This is YESC.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            writeLog("YESC datetime : " + ref4Value);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), "", ds.Tables[0].Rows[i]["REF4NAME"].ToString(), "Ref", ref1Value, "", ref4Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      "" + "\" ref3Name=" + "\"" + "" +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["5BBTaxId"])
                        {
                            writeLog("This is 5BB FTH.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "Ref", ref1Value, ref2Value, ref3Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["MBFTaxId"])
                        {
                            writeLog("This is Mahar BawGa - MBF.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["MptMoneyTaxId"])
                        {
                            writeLog("This is MptMoney.");
                            smsMsg = string.Empty;
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["SaiSaiPayTaxId"])
                        {
                            writeLog("This is SaiSai Pay.");
                            smsMsg = string.Empty;
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["MSPTopUpTaxId"])
                        {
                            writeLog("This is MSP TopUp.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["AnawrahtaTaxId"])
                        {
                            writeLog("This is Anawrahta.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["CitizenPayTaxId"])
                        {
                            writeLog("This is CitizenPay.");
                            smsMsg = string.Empty;
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["QuicKyatTaxId"])
                        {
                            writeLog("This is QuicKyat.");
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      string.Empty + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + string.Empty +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["TrueNetTaxId"])
                        {
                            writeLog("This is TrueNet.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "", ds.Tables[0].Rows[i]["REF2NAME"].ToString(), ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "Ref", "", ref2Value, ref3Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["WinFinanceTaxId"])
                        {
                            writeLog("This is WinFinance.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + string.Empty +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["XBoxOneTaxId"].ToString())
                        {
                            smsMsg = string.Empty;
                            string pin = string.Empty;
                            string expiry = string.Empty;
                            Utils.GetPinExpiry(ref4Value, out pin, out expiry);

                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "", "Ref", pin, expiry, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["PlayStationNetworkTaxId"].ToString())
                        {
                            smsMsg = string.Empty;
                            string pin = string.Empty;
                            string expiry = string.Empty;
                            Utils.GetPinExpiry(ref4Value, out pin, out expiry);

                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "", "Ref", pin, expiry, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["YadanarponTeleportTaxId"].ToString())
                        {
                            smsMsg = string.Empty;

                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, ref4Name, "", "Ref", ref1Value, ref4Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            if (!string.IsNullOrEmpty(ref1Value) && ref1Value != ConfigurationManager.AppSettings["YTPMonthlyBillType"])
                            {
                                ref3Name = string.Empty;
                            }
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ref3Name + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (giftCagList.Where(x => x == mapTaxID).FirstOrDefault() != null && mapTaxID != ConfigurationManager.AppSettings["SmileCinemaTaxId"].ToString())
                        {
                            smsMsg = string.Empty;
                            string pin = string.Empty;
                            string expiry = string.Empty;
                            Utils.GetPinExpiry(ref4Value, out pin, out expiry);

                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "", "Ref", pin, expiry, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["MargaGlobalTaxId"].ToString())
                        {
                            int am = (int)double.Parse(amount);
                            int totalAmt = (int)double.Parse(total.ToString());
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, string.Empty, ref2Name,
                                    ref3Name, "Ref", string.Empty, ref2Value, ref3Value, txnID, am.ToString() + ".00", serviceFee, totalAmt.ToString() + ".00", branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["MobileLegendTaxId"].ToString())
                        {
                            int am = (int)double.Parse(amount);
                            int totalAmt = (int)double.Parse(total.ToString());
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, string.Empty,
                                    string.Empty, "Ref", ref1Value, ref2Value, string.Empty, txnID, am.ToString() + ".00", serviceFee, totalAmt.ToString() + ".00", branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["SmileCinemaTaxId"].ToString())
                        {
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();
                            string am = double.Parse(amount).ToString("#,##0.00");
                            string totalAmt = total.ToString("#,##0.00");
                            smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Code", "Expiry",
                                    string.Empty, "Ref", PIN, Expiry, string.Empty, txnID.ToString(), am, serviceFee, totalAmt, branchCode);


                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["PubgUC"].ToString())
                        {
                            writeLog("This is PUBG.");
                            string[] words = ref4Value.Split(' ');
                            string PIN = string.Empty;
                            string Expiry = string.Empty;
                            if (words.Length == 2)
                            {
                                PIN = words[0].ToString();
                                Expiry = words[1].ToString();
                            }
                            else
                            {
                                Expiry = "-";
                                PIN = words[0].ToString();
                            }
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "",
                                    "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                    totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      string.Empty + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["ChindwinNetTaxId"])
                        {
                            writeLog("This is Chindwin Net.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ds.Tables[0].Rows[i]["REF2NAME"].ToString(), ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "", "Ref", ref2Value, ref3Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");

                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["EasyMicrofinanceTaxId"].ToString())
                        {
                            writeLog("This is Easy Micorfinance");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, string.Empty, ds.Tables[0].Rows[i]["REF2NAME"].ToString(), ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "Ref", string.Empty, ref2Value, ref3Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["HanaMicrofinanceTaxId"].ToString())
                        {
                            writeLog("This is Hana Micorfinance TxnListReq");
                            writeLog("This is Hana Micorfinance TxnListReq : Ref4Value : " + ref4Value);
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            string hanaRef4Name = string.Empty;
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref4Value, string.Empty, ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "Ref", ref1Value, string.Empty, ref3Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ref4Value + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      hanaRef4Name + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["AeonMapTaxId"].ToString())
                        {
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, ref2Name, "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      string.Empty + "\" ref4Name=" + "\"" +
                                      string.Empty + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["MoMoFinanceTaxId"])
                        {
                            writeLog("This is MoMoFinance.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + string.Empty +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["SkynetTaxId"])
                        {
                            PopulateSkyNetTransaction(sb, ds, i, REFID2, NRC, expirye, imgURL, total.ToString(), agentName, smsMsg, taxID, amount.ToString(), smsH, mapTaxID,
                               biller, ref1Name, ref1Value, ref2Value, txnID.ToString(), serviceFee, agentFee, REFID1, REFID3, ref4Value, REFID1Name, null, ref3Name, ref4Name, ref3Value);
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["myCanalTaxId"].ToString())
                        {
                            PopulatemyCanalTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee);

                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["PayBillsTaxId"].ToString())
                        {
                            PopulatePayBillsTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["SMGFTaxId"].ToString())
                        {
                            PopulateSMGFTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["GrabRideTaxId"].ToString() || mapTaxID == ConfigurationManager.AppSettings["GrabFoodTaxId"].ToString())
                        {
                            PopulateGrabRideTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee);
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["ShweStreamTaxId"].ToString())
                        {
                            PopulateShweStreamTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee);
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["OkDollarCashInTaxId"].ToString())
                        {
                            PopulateOKDollarCashInTransaction(sb, 
                                ds, 
                                i, 
                                total,
                                agentName, 
                                taxID, 
                                txnID.ToString(), 
                                serviceFee,
                                branchCode, 
                                REFID1, 
                                REFID2, 
                                REFID3, 
                                ref4Value, 
                                REFID1Name,
                                REFID3Name, 
                                imgURL, 
                                smsH, 
                                smsMsg, 
                                agentFee, 
                                agentLogo, 
                                ref5Value);
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["OnePayTaxId"].ToString())
                        {
                            PopulateOnePayTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }

                        else if (mapTaxID == ConfigurationManager.AppSettings["SayaTaxId"].ToString())
                        {
                            _trasactionManager.PopulateSayaTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }
                        else if (mapTaxID == ConfigurationManager.AppSettings["AyaPayCashInTaxId"].ToString())
                        {
                            _trasactionManager.PopulateAyaPayCashInTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }


                        else if (mapTaxID != "0000000000019")
                        {
                            if (ref3Value == "Airtime")
                            {
                                smsMsg = string.Empty;
                            }
                            else if (mapTaxID == ConfigurationManager.AppSettings["MotherFinanceTaxId"].ToString())
                            {
                                int am = (int)double.Parse(amount);
                                int totalAmt = (int)double.Parse(total.ToString());
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, ref2Name,
                                    ref3Name, ref4Name, ref1Value, ref2Value, ref3Value, ref4Value + "|" + txnID, am.ToString() + ".00", serviceFee, totalAmt.ToString() + ".00", branchCode);
                            }
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      HttpUtility.HtmlEncode(ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString()) + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      HttpUtility.HtmlEncode(REFID1) + "\" ref2=" + "\"" + HttpUtility.HtmlEncode(REFID2) + "\" ref3=" + "\"" +
                                      HttpUtility.HtmlEncode(REFID3) + "\" ref4=" + "\"" + HttpUtility.HtmlEncode(ref4Value) + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      REFID3Name + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else
                        {
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      HttpUtility.HtmlEncode(ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString()) + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      HttpUtility.HtmlEncode(ds.Tables[0].Rows[i]["REFID1"].ToString()) + "\" ref2=" + "\"" + HttpUtility.HtmlEncode(REFID2) +
                                      "\" ref3=" + "\"" +
                                      NRC + "\" ref4=" + "\"" + NRC + " " + expirye + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + "NRC" +
                                      "\" ref4Name=" + "\"" +
                                      "NRC/Expiry" + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");

                        }

                    }
                }
                sb.Append("</TxnListRes>");

                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in TxnListReq : " + ex.ToString());
            }
        }


        return string.Empty;
    }

    private void PopulateOnePayTransaction(StringBuilder transactionBuilder, DataSet ds,
    int i, string amount, decimal total,
    string agentName, string taxID, string biller,
    string txnID, string serviceFee, string branchCode,
    string REFID1, string REFID2, string REFID3, string ref4Value,
    string REFID1Name, string REFID3Name, string imgURL, SMSHelper smsH, string smsMsg, decimal agentFee, string agentLogo, string REFID5)
    {
        writeLog("Populate OnePayTxnReq");
        string am = double.Parse(amount).ToString("#,##0.00");
        string totalAmt = total.ToString("#,##0.00");
        smsMsg = string.Empty;


        transactionBuilder.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                  "\" txnDate=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                  ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                  ds.Tables[0].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                  REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                  REFID5 + "\" ref1Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                  "\" ref4Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                  ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                  imgURL + "\" locLatitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                  "\" total=" + "\"" +
                  total + "\" agentName=" + "\"" + agentName
                  + "\" sms=" + "\"" + smsMsg +
                  "\" agentLogo=" + "\"" + agentLogo +
                  "\"  TaxID=" + "\"" + taxID + "\" />");

    }

    private void PopulateGrabRideTransaction(StringBuilder transactionBuilder, DataSet ds,
                                int i, string amount, decimal total,
                                string agentName, string taxID, string biller,
                                string txnID, string serviceFee, string branchCode,
                                string REFID1, string REFID2, string REFID3, string ref4Value,
                                string REFID1Name, string REFID3Name, string imgURL, SMSHelper smsH, string smsMsg, decimal agentFee)
    {
        writeLog("Populate GrabRideTxnReq : " + ref4Value.ToString());
        string[] words = ref4Value.Split(' ');
        string PIN = words[0].ToString();
        string Expiry = words[1].ToString();
        string am = double.Parse(amount).ToString("#,##0.00");
        string totalAmt = total.ToString("#,##0.00");
        string ref4Name = (Expiry.Equals("-")) ? string.Empty : ds.Tables[0].Rows[i]["REF4NAME"].ToString();
        smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Activation Url", "Expiry",
                string.Empty, "Ref", PIN, Expiry, string.Empty, txnID.ToString(), am, serviceFee, totalAmt, branchCode);


        transactionBuilder.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                  "\" txnDate=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                  ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                  REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                  REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                  ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                  REFID1Name + "\" ref2Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                  "\" ref4Name=" + "\"" +
                  ref4Name + "\" ref5Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                  ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                  imgURL + "\" locLatitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                  "\" total=" + "\"" +
                  total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                  "\"  TaxID=" + "\"" + taxID + "\" />");

    }
    private void PopulateShweStreamTransaction(StringBuilder transactionBuilder, DataSet ds,
                                        int i, string amount, decimal total,
                                        string agentName, string taxID, string biller,
                                        string txnID, string serviceFee, string branchCode,
                                        string REFID1, string REFID2, string REFID3, string ref4Value,
                                        string REFID1Name, string REFID3Name, string imgURL, SMSHelper smsH, string smsMsg, decimal agentFee)
    {
        writeLog("Populate ShweStreamTxnReq");
        string[] words = ref4Value.Split(' ');
        string PIN = words[0].ToString();
        string Expiry = words[1].ToString();
        string am = double.Parse(amount).ToString("#,##0.00");
        string totalAmt = total.ToString("#,##0.00");
        smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Code", "Expiry",
                string.Empty, "Ref", PIN, Expiry, string.Empty, txnID.ToString(), am, serviceFee, totalAmt, branchCode);


        transactionBuilder.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                    "\" txnDate=" + "\"" +
                    ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                    ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                    ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                    REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                    REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                    ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                    REFID1Name + "\" ref2Name=" + "\"" +
                    ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                    "\" ref4Name=" + "\"" +
                    ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                    ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                    ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                    ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                    imgURL + "\" locLatitude=" + "\"" +
                    ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                    ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                    "\" total=" + "\"" +
                    total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                    "\"  TaxID=" + "\"" + taxID + "\" />");

    }

    private void PopulateSMGFTransaction(StringBuilder transactionBuilder, DataSet ds,
    int i, string amount, decimal total,
    string agentName, string taxID, string biller,
    string txnID, string serviceFee, string branchCode,
    string REFID1, string REFID2, string REFID3, string ref4Value,
    string REFID1Name, string REFID3Name, string imgURL, SMSHelper smsH, string smsMsg, decimal agentFee, string agentLogo, string REFID5)
    {
        writeLog("Populate SMGFTxnReq");
        string am = double.Parse(amount).ToString("#,##0.00");
        string totalAmt = total.ToString("#,##0.00");
        smsMsg = smsH.getMessageBiller(agentName, taxID, biller,
                    "Contract No",
                    "Name",
                    "Receipt No",
                    "Ref",
                    REFID1,
                    REFID2,
                    REFID3,
                    txnID.ToString(),
                    am, serviceFee, totalAmt, branchCode);


        transactionBuilder.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                  "\" txnDate=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                  ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                  ds.Tables[0].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                  REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                  REFID5 + "\" ref1Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                  "\" ref4Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                  ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                  imgURL + "\" locLatitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                  "\" total=" + "\"" +
                  total + "\" agentName=" + "\"" + agentName
                  + "\" sms=" + "\"" + smsMsg +
                  "\" agentLogo=" + "\"" + agentLogo +
                  "\"  TaxID=" + "\"" + taxID + "\" />");

    }

    private void PopulateOKDollarCashInTransaction(StringBuilder transactionBuilder,
        DataSet ds,
        int i,
        decimal total,
        string agentName,
        string taxID,
        string txnID,
        string serviceFee,
        string branchCode,
        string REFID1,
        string REFID2,
        string REFID3,
        string ref4Value,
        string REFID1Name,
        string REFID3Name,
        string imgURL,
        SMSHelper smsH,
        string smsMsg,
        decimal agentFee,
        string agentLogo,
        string REFID5)
    {
        writeLog("########## Populate Ok Dollar Cash In TxnReq - Start ##########");

        transactionBuilder.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                  "\" txnDate=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                  ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                  ds.Tables[0].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                  REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                  REFID5 + "\" ref1Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                  "\" ref4Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                  ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                  imgURL + "\" locLatitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                  "\" total=" + "\"" +
                  total + "\" agentName=" + "\"" + agentName
                  + "\" sms=" + "\"" + smsMsg +
                  "\" agentLogo=" + "\"" + agentLogo +
                  "\"  TaxID=" + "\"" + taxID + "\" />");
    }

    private void PopulatePayBillsTransaction(StringBuilder transactionBuilder, DataSet ds,
        int i, string amount, decimal total,
        string agentName, string taxID, string biller,
        string txnID, string serviceFee, string branchCode,
        string REFID1, string REFID2, string REFID3, string ref4Value,
        string REFID1Name, string REFID3Name, string imgURL, SMSHelper smsH, string smsMsg, decimal agentFee, string agentLogo, string REFID5)
    {
        writeLog("Populate PayBillsTxnReq");
        string inquiryMobileNo = string.Empty;
        string paymentMobileNo = string.Empty;
        inquiryMobileNo = REFID3.Split()[0].ToString();
        paymentMobileNo = REFID3.Split()[1].ToString();
        writeLog("PayBills InquiryMobileNo : " + inquiryMobileNo + ", PaymentMobileNo : " + paymentMobileNo);
        string am = double.Parse(amount).ToString("#,##0.00");
        string totalAmt = total.ToString("#,##0.00");
        smsMsg = smsH.getMessageBiller(agentName, taxID, biller,
                    "Business Name",
                    REFID1Name,
                    REFID3Name,
                    "Ref",
                    REFID5,
                    REFID1,
                    paymentMobileNo,
                    txnID.ToString(),
                    am, serviceFee, totalAmt, branchCode);


        transactionBuilder.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                  "\" txnDate=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                  ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                  ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref2=" + "\"" + REFID1 + "\" ref3=" + "\"" +
                  paymentMobileNo + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                  string.Empty + "\" ref1Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" ref2Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                  "\" ref4Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                  string.Empty + "\" BillerName=" + "\"" +
                  ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                  imgURL + "\" locLatitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                  "\" total=" + "\"" +
                  total + "\" agentName=" + "\"" + agentName
                  + "\" sms=" + "\"" + smsMsg +
                  "\" agentLogo=" + "\"" + agentLogo +
                  "\"  TaxID=" + "\"" + taxID + "\" />");

    }


    private void PopulatemyCanalTransaction(StringBuilder transactionBuilder, DataSet ds,
    int i, string amount, decimal total,
    string agentName, string taxID, string biller,
    string txnID, string serviceFee, string branchCode,
    string REFID1, string REFID2, string REFID3, string ref4Value,
    string REFID1Name, string REFID3Name, string imgURL, SMSHelper smsH, string smsMsg, decimal agentFee)
    {
        writeLog("Populate myCanalTxnReq : " + REFID2.ToString());
        string[] words = REFID2.Split(' ');
        string PIN = words[0].ToString();
        string Expiry = words[1].ToString();
        string am = double.Parse(amount).ToString("#,##0.00");
        string totalAmt = total.ToString("#,##0.00");
        smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Serial No.", "Code",
                "Expiry", "Ref", REFID1, PIN, Expiry, txnID.ToString(), am, serviceFee, totalAmt, branchCode);


        transactionBuilder.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                  "\" txnDate=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                  ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                  REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                  REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                  ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                  REFID1Name + "\" ref2Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                  "\" ref4Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                  ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                  ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                  ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                  imgURL + "\" locLatitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                  ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                  "\" total=" + "\"" +
                  total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                  "\"  TaxID=" + "\"" + taxID + "\" />");

    }


    private void PopulateSkyNetTransaction(StringBuilder transactionStringBuilder, DataSet ds, int i, string REFID2, string NRC, string expirye,
        string imgURL, string total, string agentName, string smsMessage, string taxId, string amount, SMSHelper smsHelper, string mapTaxId, string biller,
        string ref1Name, string ref1Value, string ref2Value, string txnId, string serviceFee, decimal agentFee, string REFID1, string REFID3, string ref4Value, string REFID1Name,
        string ref2Name, string ref3Name, string ref4Name, string ref3Value)
    {
        var am = double.Parse(amount);
        var totalAmt = double.Parse(total.ToString());
        smsMessage = smsHelper.GetMessageBiller(txnId, agentName, mapTaxId, biller, ref1Name, ref2Name,
                ref3Name, ref4Name, REFID1, REFID2, REFID3, ref4Value, am.ToString("#,##0.00"), serviceFee, totalAmt.ToString("#,##0.00"), branchCode);
        transactionStringBuilder.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                         "\" tdxnDate=" + "\"" +
                                          ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                       ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                       REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                       REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                       ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                       REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                       "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                       "\" ref4Name=" + "\"" +
                                       ref4Name + "\" ref5Name=" + "\"" +
                                       ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                       ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                       imgURL + "\" locLatitude=" + "\"" +
                                       ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                       ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                       "\" total=" + "\"" +
                                       total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMessage +
                                       "\"  TaxID=" + "\"" + taxId + "\" />");

    }


    bool IsValidateTxnListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out int txnperpage, out int pageno, out string messageID)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        txnperpage = 0;
        pageno = 0;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("TxnPerPage"))
        {
            try
            {
                txnperpage = Convert.ToInt16(ht["TxnPerPage"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <TxnPerPage> Tag");
            return false;
        }

        if (ht.ContainsKey("PageNo"))
        {
            try
            {
                pageno = Convert.ToInt16(ht["PageNo"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <PageNo> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || txnperpage < 1 || pageno < 1 || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return authentication(email, password, out code, out desp);
    }
    #endregion

    #region Biller List
    public string BillerListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string categoryID = string.Empty;
        string messageID = string.Empty;
        string agncode = string.Empty;
        var deviceInfo = string.Empty;
        var isSkipTaxId = false;
        int appVersion = 0;
        string eServiceCategoryId = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateBillerListReq(ht, out code, out desp, out version, out ts, out email, out password, out categoryID, out messageID, out agncode, out deviceInfo, out appVersion)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;

        try
        {
            #region For New App

            var restrictVersion = ConfigurationManager.AppSettings["RestrictVersion"];
            eServiceCategoryId = categoryID;

            // To Remove 123 biller under eService in old version apps
            int _123EServiceVersion = Convert.ToInt32(ConfigurationManager.AppSettings["_123EServiceVersion"].Replace(".", ""));
            string _123TaxId = ConfigurationManager.AppSettings["_123TaxId"];

            if (Convert.ToInt32(version.Replace(".", "")) < Convert.ToInt32(restrictVersion.Replace(".", "")))
            {
                var ios = ConfigurationManager.AppSettings["iOS"];
                if (deviceInfo.StartsWith(ios))
                {
                    isSkipTaxId = true;
                    if (categoryID == ConfigurationManager.AppSettings["TopUpCategory"])
                    {
                        eServiceCategoryId = eServiceCategoryId + "," + ConfigurationManager.AppSettings["MobileCategory"];
                    }
                }
            }

            string currentXMLVersion = version.Replace(".", "");
            string newappver = ConfigurationManager.AppSettings["newappver"].ToString();
            Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);

            var loginType = GetLoginType(reqXml);
            if (_agentWCF.getBillerListByAgentCodeAndCatID(email, eServiceCategoryId, out ds, out errmsg)) //txnperpage, pageno,
            {

                StringBuilder sb = new StringBuilder();
                sb.Append("<BillerListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (isSkipTaxId)
                        {
                            var toSkip = ds.Tables[0].Rows[i]["TAXID"].ToString();
                            var inValidBiller = ConfigurationManager.AppSettings["InvalidBillers"];
                            if (!string.IsNullOrEmpty(inValidBiller))
                            {
                                var billerList = inValidBiller.Split(',').ToList();
                                var thisBiller = billerList.FirstOrDefault(x => x == toSkip);
                                if (!string.IsNullOrEmpty(thisBiller)) continue;
                            }
                        }

                        if (IsPOSMMBusTicket(loginType, ds.Tables[0].Rows[i]["TAXID"].ToString(), eServiceCategoryId))
                        {
                            writeLog("Biller is MMBus Ticket and Login is from POS");
                            continue;
                        }

                        if (IsMMBusTicket(ds.Tables[0].Rows[i]["TAXID"].ToString(), eServiceCategoryId) && !IsValidVersionForMMBusTicket(appVersion))
                        {
                            writeLog("Appversion " + appVersion + " is not valid for MMBus");
                            continue;
                        }

                        if (newappverht.ContainsKey(ds.Tables[0].Rows[i]["TAXID"].ToString()))
                        {
                            string restrictedXML = newappverht[ds.Tables[0].Rows[i]["TAXID"].ToString()].ToString();
                            if (int.Parse(currentXMLVersion) >= int.Parse(restrictedXML))
                            {
                                string Label = string.Empty;
                                string Labelnull = string.Empty;
                                Label = ds.Tables[0].Rows[i]["Label"] == DBNull.Value ? Labelnull : Convert.ToString(ds.Tables[0].Rows[i]["Label"]);

                                string imgURL = string.Empty;
                                imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString().ToString() + ".png";

                                try
                                {
                                    if (!String.IsNullOrEmpty(ds.Tables[0].Rows[i]["BILLERLOGO"].ToString()))//Create Biller Logo 
                                    {
                                        string imgPath = ConfigurationManager.AppSettings["BillerLogoPath"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString().ToString() + ".png";
                                        byteArrayToImageFilebyMemoryStream((byte[])ds.Tables[0].Rows[i]["BILLERLOGO"], imgPath);

                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                                }

                                // Remove 123 EService in old version app
                                string taxId = ds.Tables[0].Rows[i]["TAXID"].ToString();

                                if (appVersion < _123EServiceVersion && taxId == _123TaxId && categoryID != "0")
                                {
                                    writeLog("This is old version app and 123 EService will not show.");
                                }
                                else
                                {
                                    sb.Append("<Biller categoryID=" + "\"" + categoryID + "\" billerID=" + "\"" + ds.Tables[0].Rows[i]["BILLERID"].ToString() + "\" billerName=" + "\"" + ds.Tables[0].Rows[i]["COMPANYNAME"].ToString()
                                       + "\" taxID=" + "\"" + taxId + "\" billerLogo= " + "\"" + imgURL + "\" label= " + "\"" + Label
                                       + "\"/>");
                                }
                            }
                        }
                        else
                        {
                            string Label = string.Empty;
                            string Labelnull = string.Empty;
                            Label = ds.Tables[0].Rows[i]["Label"] == DBNull.Value ? Labelnull : Convert.ToString(ds.Tables[0].Rows[i]["Label"]);

                            string imgURL = string.Empty;
                            imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString().ToString() + ".png";

                            try
                            {
                                if (!String.IsNullOrEmpty(ds.Tables[0].Rows[i]["BILLERLOGO"].ToString()))//Create Biller Logo 
                                {
                                    string imgPath = ConfigurationManager.AppSettings["BillerLogoPath"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString().ToString() + ".png";
                                    byteArrayToImageFilebyMemoryStream((byte[])ds.Tables[0].Rows[i]["BILLERLOGO"], imgPath);

                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                            }

                            // Remove 123 EService in old version app
                            string taxId = ds.Tables[0].Rows[i]["TAXID"].ToString();

                            if (appVersion < _123EServiceVersion && taxId == _123TaxId && categoryID != "0")
                            {
                                writeLog("This is old version app and 123 EService will not show.");
                            }
                            else
                            {
                                sb.Append("<Biller categoryID=" + "\"" + categoryID + "\" billerID=" + "\"" + ds.Tables[0].Rows[i]["BILLERID"].ToString() + "\" billerName=" + "\"" + ds.Tables[0].Rows[i]["COMPANYNAME"].ToString()
                                   + "\" taxID=" + "\"" + taxId + "\" billerLogo= " + "\"" + imgURL + "\" label= " + "\"" + Label
                                   + "\"/>");
                            }
                        }
                    }
                }
                sb.Append("</BillerListRes>");
                return sb.ToString();

            }
            else
            {
                writeLog(string.Format("Error in getBillerListByAgentCodeAndCatID({0}, {1}): {2}", email, eServiceCategoryId, errmsg));
            }

            #endregion
        }
        catch (Exception ex)
        {
            writeLog("Error in BillerListReq : " + ex.ToString());
        }

        return string.Empty;
    }

    public string BillerListReqV2(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string categoryID = string.Empty;
        string messageID = string.Empty;
        string agncode = string.Empty;
        var deviceInfo = string.Empty;
        var isSkipTaxId = false;
        int appVersion = 0;
        string eServiceCategoryId = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateBillerListReq(ht, out code, out desp, out version, out ts, out email, out password, out categoryID, out messageID, out agncode, out deviceInfo, out appVersion)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        try
        {
            #region For New App

            var restrictVersion = ConfigurationManager.AppSettings["RestrictVersion"];
            eServiceCategoryId = categoryID;

            // To Remove 123 biller under eService in old version apps
            int _123EServiceVersion = Convert.ToInt32(ConfigurationManager.AppSettings["_123EServiceVersion"].Replace(".", ""));
            string _123TaxId = ConfigurationManager.AppSettings["_123TaxId"];

            if (Convert.ToInt32(version.Replace(".", "")) < Convert.ToInt32(restrictVersion.Replace(".", "")))
            {
                var ios = ConfigurationManager.AppSettings["iOS"];
                if (deviceInfo.StartsWith(ios))
                {
                    isSkipTaxId = true;
                    if (categoryID == ConfigurationManager.AppSettings["TopUpCategory"])
                    {
                        eServiceCategoryId = eServiceCategoryId + "," + ConfigurationManager.AppSettings["MobileCategory"];
                    }
                }
            }

            string currentXMLVersion = version.Replace(".", "");
            string newappver = ConfigurationManager.AppSettings["newappver"].ToString();
            Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);

            var loginType = GetLoginType(reqXml);
            if (_agentWCF.getBillerListByAgentCodeAndCatIDV2(email, eServiceCategoryId, out ds, out errmsg)) //txnperpage, pageno,
            {

                StringBuilder sb = new StringBuilder();
                sb.Append("<BillerListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (isSkipTaxId)
                        {
                            var toSkip = ds.Tables[0].Rows[i]["TAXID"].ToString();
                            var inValidBiller = ConfigurationManager.AppSettings["InvalidBillers"];
                            if (!string.IsNullOrEmpty(inValidBiller))
                            {
                                var billerList = inValidBiller.Split(',').ToList();
                                var thisBiller = billerList.FirstOrDefault(x => x == toSkip);
                                if (!string.IsNullOrEmpty(thisBiller)) continue;
                            }
                        }

                        if (IsPOSMMBusTicket(loginType, ds.Tables[0].Rows[i]["TAXID"].ToString(), eServiceCategoryId))
                        {
                            writeLog("Biller is MMBus Ticket and Login is from POS");
                            continue;
                        }

                        if (IsMMBusTicket(ds.Tables[0].Rows[i]["TAXID"].ToString(), eServiceCategoryId) && !IsValidVersionForMMBusTicket(appVersion))
                        {
                            writeLog("Appversion " + appVersion + " is not valid for MMBus");
                            continue;
                        }

                        if (newappverht.ContainsKey(ds.Tables[0].Rows[i]["TAXID"].ToString()))
                        {
                            string restrictedXML = newappverht[ds.Tables[0].Rows[i]["TAXID"].ToString()].ToString();
                            if (int.Parse(currentXMLVersion) >= int.Parse(restrictedXML))
                            {
                                string Label = string.Empty;
                                string Labelnull = string.Empty;
                                Label = ds.Tables[0].Rows[i]["Label"] == DBNull.Value ? Labelnull : Convert.ToString(ds.Tables[0].Rows[i]["Label"]);

                                string imgURL = string.Empty;
                                imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString().ToString() + ".png";

                                try
                                {
                                    if (!String.IsNullOrEmpty(ds.Tables[0].Rows[i]["BILLERLOGO"].ToString()))//Create Biller Logo 
                                    {
                                        string imgPath = ConfigurationManager.AppSettings["BillerLogoPath"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString().ToString() + ".png";
                                        byteArrayToImageFilebyMemoryStream((byte[])ds.Tables[0].Rows[i]["BILLERLOGO"], imgPath);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                                }

                                // Remove 123 EService in old version app
                                string taxId = ds.Tables[0].Rows[i]["TAXID"].ToString();

                                if (appVersion < _123EServiceVersion && taxId == _123TaxId && categoryID != "0")
                                {
                                    writeLog("This is old version app and 123 EService will not show.");
                                }
                                else
                                {
                                    sb.Append("<Biller categoryID=" + "\"" + categoryID + "\" billerID=" + "\"" + ds.Tables[0].Rows[i]["BILLERID"].ToString() + "\" billerName=" + "\"" + ds.Tables[0].Rows[i]["COMPANYNAME"].ToString()
                                       + "\" taxID=" + "\"" + taxId + "\" billerLogo= " + "\"" + imgURL + "\" label= " + "\"" + Label
                                       + "\"/>");
                                }
                            }
                        }
                        else
                        {
                            string Label = string.Empty;
                            string Labelnull = string.Empty;
                            Label = ds.Tables[0].Rows[i]["Label"] == DBNull.Value ? Labelnull : Convert.ToString(ds.Tables[0].Rows[i]["Label"]);

                            string imgURL = string.Empty;
                            imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString().ToString() + ".png";

                            try
                            {
                                if (!String.IsNullOrEmpty(ds.Tables[0].Rows[i]["BILLERLOGO"].ToString()))//Create Biller Logo 
                                {
                                    string imgPath = ConfigurationManager.AppSettings["BillerLogoPath"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString().ToString() + ".png";
                                    byteArrayToImageFilebyMemoryStream((byte[])ds.Tables[0].Rows[i]["BILLERLOGO"], imgPath);

                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                            }

                            // Remove 123 EService in old version app
                            string taxId = ds.Tables[0].Rows[i]["TAXID"].ToString();

                            if (appVersion < _123EServiceVersion && taxId == _123TaxId && categoryID != "0")
                            {
                                writeLog("This is old version app and 123 EService will not show.");
                            }
                            else
                            {
                                sb.Append("<Biller categoryID=" + "\"" + categoryID + "\" billerID=" + "\"" + ds.Tables[0].Rows[i]["BILLERID"].ToString() + "\" billerName=" + "\"" + ds.Tables[0].Rows[i]["COMPANYNAME"].ToString()
                                   + "\" taxID=" + "\"" + taxId + "\" billerLogo= " + "\"" + imgURL + "\" label= " + "\"" + Label
                                   + "\"/>");
                            }
                        }
                    }
                }
                sb.Append("</BillerListRes>");
                return sb.ToString();

            }
            else
            {
                writeLog(string.Format("Error in getBillerListByAgentCodeAndCatIDV2({0}, {1}): {2}", email, eServiceCategoryId, errmsg));
            }

            #endregion
        }
        catch (Exception ex)
        {
            writeLog("Error in BillerListReqV2 : " + ex.ToString());
        }

        return string.Empty;
    }

    bool IsPOSMMBusTicket(string loginType, string taxId, string eServiceCategoryId)
    {
        int categoryId = 0;
        if (!int.TryParse(eServiceCategoryId, out categoryId)) return false;
        return (!string.IsNullOrEmpty(loginType) && loginType == "POS" && IsMMBusTicket(taxId, eServiceCategoryId));
    }

    bool IsPOSMMBusTicket(string loginType, string taxId)
    {
        return (!string.IsNullOrEmpty(loginType) && loginType == "POS" && IsMMBusTicket(taxId));
    }

    bool IsValidVersionForMMBusTicket(int appVersion)
    {
        var validVersionForMMBusTicket = ConfigurationManager.AppSettings["ValidVersionForMMBusTicket"].ToString();
        var intValidVersion = int.Parse(validVersionForMMBusTicket);
        return appVersion >= intValidVersion;
    }

    bool IsMMBusTicket(string taxId)
    {
        return taxId == ConfigurationManager.AppSettings["MmBusticket"].ToString();
    }

    bool IsMMBusTicket(string taxId, string eServiceCategoryId)
    {
        int categoryId = 0;
        if (!int.TryParse(eServiceCategoryId, out categoryId)) return false;
        return taxId == ConfigurationManager.AppSettings["MmBusticket"].ToString() && categoryId > 0;
    }

    public string GetLoginType(string requestXML)
    {
        var loginType = string.Empty;
        var hashTable = Utils.getHTableFromXML(requestXML);
        if (hashTable.ContainsKey("LoginType"))
        {
            loginType = hashTable["LoginType"].ToString();
        }
        return loginType;
    }

    public string zCompress(string str)
    {
        try
        {
            byte[] b = System.Text.Encoding.UTF8.GetBytes(str);
            MemoryStream ms = new MemoryStream();
            Deflater dfl = new Deflater();

            Stream s = new DeflaterOutputStream(ms, dfl);
            s.Write(b, 0, b.Length);
            s.Flush();
            s.Close();
            byte[] c = (byte[])ms.ToArray();
            return Convert.ToBase64String(c);
        }
        catch
        {
            return null;
        }
    }

    bool IsValidateBillerListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string categoryid, out string messageID, out string agncode, out string deviceInfo, out int appVersion)
    {
        code = "00";
        desp = "Success";
        string errmsg = string.Empty;
        DataSet ds = null;

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        categoryid = string.Empty;
        messageID = string.Empty;
        agncode = string.Empty;
        deviceInfo = string.Empty;
        appVersion = 0;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("CategoryID"))
        {
            categoryid = ht["CategoryID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <CategoryID> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agncode = ht["AgentCode"].ToString();
        }

        if (ht.ContainsKey("AppVersion"))
        {
            if (!string.IsNullOrEmpty(ht["AppVersion"].ToString()))
            {
                appVersion = Convert.ToInt32(ht["AppVersion"].ToString().Replace(".", string.Empty));
                writeLog("App Version : " + appVersion);
            }
        }


        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        if (_agentWCF.getAuthentication(email, password, out errmsg, out ds))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                deviceInfo = Convert.ToString(ds.Tables[0].Rows[0]["DEVICEINFO"]);
            }
        }

        return authentication(email, password, out code, out desp);
    }
    #endregion

    #region MESC District and Township List

    public string MescDistrictAndTownshipListReq(string reqXml)
    {
        writeLog("Start MescDistrictAndTownshipListReq.");
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        string escCode = string.Empty;

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            Hashtable ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateEscDistrictAndTownshipListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agentCode, out token, out escCode))
            {
                return Utils.GetErrorString(version, code, desp);
            }

            if (string.IsNullOrEmpty(escCode))
            {
                escCode = "MESC";
            }

            if (!_agentWCF.getEscDistrictAndTownship(escCode, out ds, out errmsg))
            {
                // Error in getting Category and Biller
                writeLog("Error in EscDistrictAndTownshipListReq : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable dtDistrict = ds.Tables[0];
            DataTable dtTownship = ds.Tables[1];
            string districtId = string.Empty;
            string districtName = string.Empty;
            string districtDescription = string.Empty;
            string districtStatus = string.Empty;
            string isDefault = string.Empty;
            string townshipId = string.Empty;
            string townshipName = string.Empty;
            string townshipDescription = string.Empty;
            string townshipCode = string.Empty;
            string townshipStatus = string.Empty;

            StringBuilder sb = new StringBuilder();
            sb.Append("<MescDistrictAndTownshipListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            if (escCode == "MESC" && !string.IsNullOrEmpty(ConfigurationManager.AppSettings["IsMescBillingPeriod"]))
            {
                sb.Append(string.Format("<IsBillingPeriod>{0}</IsBillingPeriod>", ConfigurationManager.AppSettings["IsMescBillingPeriod"]));
            }

            sb.Append("<DistrictAndTownship>");
            foreach (DataRow drDistrict in dtDistrict.Rows)
            {
                districtId = drDistrict["Id"].ToString();
                districtName = drDistrict["Name"].ToString();
                districtDescription = drDistrict["Description"].ToString();
                districtStatus = drDistrict["Status"].ToString();
                isDefault = drDistrict["IsDefault"].ToString();

                sb.Append(string.Format("<District Id=\"{0}\" Name=\"{1}\" Description=\"{2}\" Status=\"{3}\" IsDefault=\"{4}\" >", districtId, districtName, districtDescription, districtStatus, isDefault));

                foreach (DataRow drTownship in dtTownship.Rows)
                {
                    if (drTownship["Id"].ToString() == districtId)
                    {
                        townshipId = drTownship["TownshipId"].ToString();
                        townshipName = drTownship["Name"].ToString();
                        townshipDescription = drTownship["Description"].ToString();
                        townshipCode = drTownship["TownshipCode"].ToString();
                        townshipStatus = drTownship["Status"].ToString();
                        sb.Append(string.Format("<Township Id=\"{0}\" Name=\"{1}\" Description=\"{2}\" TownshipCode=\"{3}\" Status=\"{4}\" />", townshipId, townshipName, townshipDescription, townshipCode, townshipStatus));
                    }
                    else if (Convert.ToInt32(districtId) < Convert.ToInt32(drTownship["Id"].ToString()))
                    {
                        break;
                    }
                    else
                    {
                        continue;
                    }
                }

                sb.Append("</District>");
            }
            sb.Append("</DistrictAndTownship>");
            sb.Append("</MescDistrictAndTownshipListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog(string.Format("Error in MescDistrictAndTownshipListReq: {0}", ex.Message));
            response = Utils.GetErrorString(version, "99", "System Error");
        }
        finally
        {
            writeLog("End MescDistrictAndTownshipListReq.");
        }
        return response;
    }

    bool IsValidateEscDistrictAndTownshipListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string agentID, out string token, out string escCode) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentID = string.Empty;
        token = string.Empty;
        escCode = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentID = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <AgentID> Tag");
            return false;
        }
        if (ht.ContainsKey("ESCCode"))
        {
            escCode = ht["ESCCode"].ToString();
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(agentID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);
    }

    #endregion

    #region G&G AX-NearMe Payment

    public string AXGetTransactionReq(string reqXml)
    {
        writeLog("Start AXGetTransactionReq.");
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        string txnId = string.Empty;
        string storeNumber = string.Empty;
        string resCode = string.Empty;
        string resDesc = string.Empty;
        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            Hashtable ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateAXGetTransactionReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agentCode, out token, out txnId, out storeNumber))
            {
                return Utils.GetErrorString(version, code, desp);
            }
            string ref2 = txnId + ";" + storeNumber;

            if (!string.IsNullOrEmpty(txnId))
            {
                txnId = txnId.Replace("&", "&amp;");
                txnId = txnId.Replace("<", "&lt;");
                txnId = txnId.Replace(">", "&gt;");
            }

            if (!string.IsNullOrEmpty(storeNumber))
            {
                storeNumber = storeNumber.Replace("&", "&amp;");
                storeNumber = storeNumber.Replace("<", "&lt;");
                storeNumber = storeNumber.Replace(">", "&gt;");
            }

            if (!_agentWCF.getAXTransaction(ref2, out ds, out errmsg))
            {
                // Error in getting Category and Biller
                writeLog("Error in AXGetTransactionReq : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable merchantTxn = ds.Tables[0];
            string refId = string.Empty;
            string paymentType = string.Empty;
            string amount = string.Empty;
            if (merchantTxn.Rows.Count > 0)
            {
                refId = merchantTxn.Rows[0]["MerchantTransactionId"].ToString();
                paymentType = merchantTxn.Rows[0]["PaymentType"].ToString();
                amount = merchantTxn.Rows[0]["TransactionAmount"].ToString();
                resCode = merchantTxn.Rows[0]["TransactionStatus"].ToString() == "AP" ? "00" : "01";
                resDesc = merchantTxn.Rows[0]["Description"].ToString();
            }
            else
            {
                resCode = "01";
                resDesc = string.Format("There is no transaction with this {0} and {1}.", txnId, storeNumber);
            }

            StringBuilder sb = new StringBuilder();
            sb.Append("<AXGetTransactionRes>");
            sb.Append(string.Format("<Version>{0}</Version>", version));
            sb.Append(string.Format("<TimeStamp>{0}</TimeStamp>", DateTime.Now.ToString("yyyyMMddhhmmssffff")));
            sb.Append(string.Format("<MessageID>{0}</MessageID>", messageID));
            sb.Append(string.Format("<ResCode>{0}</ResCode>", resCode));
            sb.Append(string.Format("<ResDesc>{0}</ResDesc>", resDesc));
            sb.Append(string.Format("<TxnId>{0}</TxnId>", txnId));
            sb.Append(string.Format("<RefId>{0}</RefId>", refId));
            sb.Append(string.Format("<PaymentType>{0}</PaymentType>", paymentType));
            sb.Append(string.Format("<Amount>{0}</Amount>", amount));
            sb.Append("</AXGetTransactionRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog(string.Format("Error in AXGetTransactionReq: {0}", ex.Message));
            response = Utils.GetErrorString(version, "99", "System Error");
        }
        finally
        {
            writeLog("End AXGetTransactionReq.");
        }
        return response;
    }

    bool IsValidateAXGetTransactionReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string agentCode, out string token, out string txnId, out string storeNumber)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentCode = string.Empty;
        token = string.Empty;
        txnId = string.Empty;
        storeNumber = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "01";
            desp = "Invalid Request";
            writeLog("Validation failed : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "01";
            desp = "Invalid Request";
            writeLog("Validation failed : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "01";
            desp = "Invalid Request";
            writeLog("Validation failed : Missing XML <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "01";
            desp = "Invalid Request";
            writeLog("Validation failed : Missing XML <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "01";
            desp = "Invalid Request";
            writeLog("Validation failed : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentCode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "01";
            desp = "Invalid Request";
            writeLog("Validation failed : Missing XML <AgentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        if (ht.ContainsKey("TxnId"))
        {
            txnId = ht["TxnId"].ToString();
        }
        else
        {
            code = "01";
            desp = "Invalid Request";
            writeLog("Validation failed : Missing XML <TxnID> Tag");
        }
        if (ht.ContainsKey("StoreNumber"))
        {
            storeNumber = ht["StoreNumber"].ToString();
        }
        else
        {
            code = "01";
            desp = "Invalid Request";
            writeLog("Validation failed : Missing XML <StoreNumber> Tag");
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(agentCode)
            || String.IsNullOrEmpty(txnId) || String.IsNullOrEmpty(storeNumber))
        {
            code = "01";
            desp = "Invalid Request";
            writeLog("Validation failed : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);
    }

    #endregion

    #region transactionDetail
    public string TxnDetailReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        Int64 txnid = 0;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateTxnDetailReq(ht, out code, out desp, out version, out ts, out email, out password, out txnid))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.getTransactionDetail(txnid, out ds, out errmsg))
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string imgUrl = "";
                    string maskedVCard = "";
                    string REFID2;
                    REFID2 = ds.Tables[0].Rows[0]["REFID2"].ToString();
                    string batchid = ds.Tables[0].Rows[0]["BatchID"] == DBNull.Value ? "" : ds.Tables[0].Rows[0]["BatchID"].ToString();


                    StringBuilder sb = new StringBuilder();
                    sb.Append("<TxnDetailRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>00</ResCode>");
                    sb.Append("<ResDesc>Sussess</ResDesc>");

                    sb.Append("<TxnID>" + ds.Tables[0].Rows[0]["TRANSACTIONID"].ToString() + "</TxnID>");
                    sb.Append("<TxnDate>" + ds.Tables[0].Rows[0]["TRANSACTIONDATETIME"].ToString() + "</TxnDate>");
                    sb.Append("<Expiry>" + ds.Tables[0].Rows[0]["TRANSACTIONEXPIRYDATETIME"].ToString() + "</Expiry>");
                    sb.Append("<ProductDesc>" + ds.Tables[0].Rows[0]["PRODUCTDESC"].ToString() + "</ProductDesc>");
                    sb.Append("<Amount>" + ds.Tables[0].Rows[0]["TRANSACTIONAMOUNT"].ToString() + "</Amount>");
                    sb.Append("<AgentFee>" + ds.Tables[0].Rows[0]["SERVICEFEE"].ToString() + "</AgentFee>");
                    sb.Append("<MaskedRef2>" + maskedVCard + "</MaskedRef2>");
                    sb.Append("<Ref1>" + ds.Tables[0].Rows[0]["REFID1"].ToString() + "</Ref1>");
                    sb.Append("<Ref2>" + REFID2 + "</Ref2>");
                    sb.Append("<Ref3>" + ds.Tables[0].Rows[0]["REFID3"].ToString() + "</Ref3>");
                    sb.Append("<Ref4>" + ds.Tables[0].Rows[0]["REFID4"].ToString() + "</Ref4>");
                    sb.Append("<Ref5>" + ds.Tables[0].Rows[0]["REFID5"].ToString() + "</Ref5>");
                    sb.Append("<Ref1Name>" + ds.Tables[0].Rows[0]["REF1NAME"].ToString() + "</Ref1Name>");
                    sb.Append("<Ref2Name>" + ds.Tables[0].Rows[0]["REF2NAME"].ToString() + "</Ref2Name>");
                    sb.Append("<Ref3Name>" + ds.Tables[0].Rows[0]["REF3NAME"].ToString() + "</Ref3Name>");
                    sb.Append("<Ref4Name>" + ds.Tables[0].Rows[0]["REF4NAME"].ToString() + "</Ref4Name>");
                    sb.Append("<Ref5Name>" + ds.Tables[0].Rows[0]["REF5NAME"].ToString() + "</Ref5Name>");
                    sb.Append("<BatchID>" + batchid + "</BatchID>");
                    sb.Append("<TaxID>" + ds.Tables[0].Rows[0]["TAXID"].ToString() + "</TaxID>");

                    sb.Append("<BillerName>" + ds.Tables[0].Rows[0]["COMPANYNAME"].ToString() + "</BillerName>");
                    sb.Append("<BillerLogo>" + imgUrl + "</BillerLogo>");

                    sb.Append("</TxnDetailRes>");


                    return sb.ToString();

                }
            }
            catch (Exception ex)
            {
                writeLog("Error in TxnDetailReq : " + ex.ToString());
            }
        }
        return string.Empty;
    }

    bool IsValidateTxnDetailReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out Int64 txnID)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        txnID = 0;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("TxnID"))
        {
            try
            {
                txnID = Convert.ToInt64(ht["TxnID"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnID <TxnID> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || txnID < 1)
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return authentication(email, password, out code, out desp);
    }

    #endregion

    #region Push Notification List

    public string MarkNotificationReq(string requestXML)
    {

        long notificationId = 0;
        var code = string.Empty;
        var description = string.Empty;
        var version = string.Empty;
        var messageId = string.Empty;
        var successStringBuilder = new StringBuilder();
        try
        {

            Hashtable ht = Utils.getHTableFromXML(requestXML);

            if (!IsValidMarkNotificationRequest(ht, out version, out messageId, out code, out description, out notificationId))
            {
                return Utils.GetErrorString(version, code, description);
            }

            var errorMessage = string.Empty;
            _agentWCF.MarkNotificationAsRead(notificationId, out errorMessage);

            successStringBuilder.Append("<MarkNotificationRes>");
            successStringBuilder.Append("<Version>" + version + "</Version>");
            successStringBuilder.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            successStringBuilder.Append("<ResCode>00</ResCode>");
            successStringBuilder.Append("<MessageID>" + messageId + "</MessageID>");
            successStringBuilder.Append("<ResDesc>Success</ResDesc>");
            successStringBuilder.Append("</MarkNotificationRes>");
            return successStringBuilder.ToString();
        }
        catch
        {
            return Utils.GetErrorResponse("97", "UNKNOWN ERROR");
        }

    }

    public bool IsValidMarkNotificationRequest(Hashtable hashTable, out string version, out string messageId, out string code, out string description, out long notificationId)
    {
        code = string.Empty;
        description = string.Empty;
        notificationId = 0;
        version = string.Empty;
        messageId = string.Empty;
        if (hashTable.ContainsKey("Version"))
        {
            version = hashTable["Version"].ToString();
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (hashTable.ContainsKey("NotificationId"))
        {
            notificationId = Convert.ToInt64(hashTable["NotificationId"].ToString());
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing XML <NotificationId> Tag");
            return false;
        }
        if (hashTable.ContainsKey("MessageID"))
        {
            messageId = hashTable["MessageID"].ToString();
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing Message ID <MessageID> Tag");
            return false;
        }

        return true;
    }

    #region Reload List
    public string ReloadListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        var version = string.Empty;
        var ts = string.Empty;
        var messageID = string.Empty;
        var email = string.Empty;
        var deviceUID = string.Empty;
        var token = string.Empty;
        var response = string.Empty;

        int mobileAppVersion = 0;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateReloadListReq(ht, out code, out desp, out version, out ts, out email, out deviceUID, out messageID, out token, out mobileAppVersion))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        // Set 3.37 as default version for backward compatibility
        if (mobileAppVersion == 0)
        {
            mobileAppVersion = 337;
        }


        string errmsg = string.Empty;
        DataSet ds = null;
        try
        {
            if (!_agentWCF.GetReloadPartnerList(email, mobileAppVersion, out ds, out errmsg))
            {
                // Error in getting Push Notification Req
                writeLog("Error in ReloadListReq : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable dtReloadPartners = ds.Tables[0];

            StringBuilder sb = new StringBuilder();
            sb.Append("<ReloadListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<ReloadPartners>");
            foreach (DataRow reloadPartner in dtReloadPartners.Rows)
            {
                sb.Append("<ReloadPartner>");
                sb.Append("<PartnerProfileId>" + reloadPartner["PaymentFeeSettingId"] + "</PartnerProfileId>");
                sb.Append("<Logo>" + ConfigurationManager.AppSettings["ReloadPartnerLogoUrl"].ToString() + reloadPartner["PaymentPartnerId"] + ".png</Logo>");
                // For MPU PGW, the Reload Type will be shown MPU in Mobile
                sb.Append("<Name>" + (reloadPartner["Name"].ToString().Contains(Constants.MPU_Reload) ? Constants.MPU_Reload : reloadPartner["Name"].ToString()) + "</Name>");
                sb.Append("<Min>" + reloadPartner["MinimumAmount"] + "</Min>");
                sb.Append("<Max>" + reloadPartner["MaximumAmount"] + "</Max>");
                sb.Append("<PaymentType>" + reloadPartner["PaymentType"].ToString() + "</PaymentType>");
                sb.Append("<NeedUpdate>" + Convert.ToBoolean(reloadPartner["NeedUpdate"].ToString()) + "</NeedUpdate>");
                sb.Append("</ReloadPartner>");
            }
            sb.Append("</ReloadPartners>");
            sb.Append("</ReloadListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in ReloadListReq : " + ex.ToString());
            response = Utils.GetErrorString(version, "99", "System Error");
        }


        return response;
    }

    // Check Push Notification List
    private bool IsValidateReloadListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string deviceUID, out string messageID, out string token, out int mobileAppVersion)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        deviceUID = string.Empty;
        messageID = string.Empty;
        token = string.Empty;
        mobileAppVersion = 0;

        if (!IsValidateBaseRequestParamters(ht, out code, out desp, out version, out ts, out email, out messageID))
        {
            writeLog("Error in Validation : Basic Authentication fail");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }


        //Check Null or Empty String
        if (ht.ContainsKey("MobileAppVersion"))
        {
            var mobileAppVersionString = ht["MobileAppVersion"].ToString().Replace(".", string.Empty);
            mobileAppVersion = Convert.ToInt32(mobileAppVersionString);
        }

        //Check Null or Empty String

        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;
    }


    #endregion Reload List

    public string PushNotificationReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string token = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidatePushNotificationListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getPushNotificationList(email, out ds, out errmsg))
            {
                // Error in getting Push Notification Req
                writeLog("Error in PushNotificationReq : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable dtPushNoti = ds.Tables[0];

            StringBuilder sb = new StringBuilder();
            sb.Append("<PushNotificationRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<PushNotifications>");
            foreach (DataRow drNoti in dtPushNoti.Rows)
            {

                // This is for '&' serialization case
                if (drNoti["TITLE"] != null)
                {
                    if (drNoti["TITLE"].ToString().Contains("&"))
                    {
                        drNoti["TITLE"] = drNoti["TITLE"].ToString().Replace("&", "&amp;");
                        writeLog(drNoti["TITLE"].ToString());
                    }
                    if (drNoti["TITLE"].ToString().Contains("<"))
                    {
                        drNoti["TITLE"] = drNoti["TITLE"].ToString().Replace("<", "&lt;");
                    }
                    if (drNoti["TITLE"].ToString().Contains(">"))
                    {
                        drNoti["TITLE"] = drNoti["TITLE"].ToString().Replace(">", "&gt;");
                    }
                }
                if (drNoti["MESSAGE"] != null)
                {
                    if (drNoti["MESSAGE"].ToString().Contains("&"))
                    {
                        drNoti["MESSAGE"] = drNoti["MESSAGE"].ToString().Replace("&", "&amp;");
                    }
                    if (drNoti["MESSAGE"].ToString().Contains("<"))
                    {
                        drNoti["MESSAGE"] = drNoti["MESSAGE"].ToString().Replace("<", "&lt;");
                    }
                    if (drNoti["MESSAGE"].ToString().Contains(">"))
                    {
                        drNoti["MESSAGE"] = drNoti["MESSAGE"].ToString().Replace(">", "&gt;");
                    }
                }
                sb.Append("<PushNotification>");
                sb.Append("<NotificationID>" + drNoti["AgentUserNotiListId"] + "</NotificationID>");
                sb.Append("<Title>" + drNoti["TITLE"] + "</Title>");
                sb.Append("<Message>" + drNoti["MESSAGE"] + "</Message>");
                sb.Append("<CreatedDate>" + drNoti["CREATEDDATE"] + "</CreatedDate>");
                var isRead = Convert.ToBoolean(drNoti["IsRead"].ToString());
                sb.Append("<IsRead>" + (isRead ? "true" : "false") + "</IsRead>");
                sb.Append("<NotificationType>" + drNoti["NotificationType"].ToString() + "</NotificationType>");
                sb.Append("</PushNotification>");
            }
            sb.Append("</PushNotifications>");
            sb.Append("</PushNotificationRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in PushNotificationReq : " + ex.ToString());
            response = Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    // Check Push Notification List
    private bool IsValidatePushNotificationListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string token)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        token = string.Empty;

        if (!IsValidateBaseRequestParamters(ht, out code, out desp, out version, out ts, out email, out password, out messageID))
        {
            writeLog("Error in Validation : Basic Authentication fail");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);
    }

    #endregion

    #region CategoryList

    public string CategoryAndBillerByAgentCodeReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        string showEpinCategory = string.Empty;
        bool isActive = false;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateCategoryAndBillerListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agentCode, out token, out showEpinCategory))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getCategoryAndBillerByAgentCode(agentCode, out ds, out errmsg))
            {
                // Error in getting Category and Biller
                writeLog("Error in CategoryAndBillerByAgentCodeReq : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable dtBillers = ds.Tables[0];
            DataTable dtCategory = ds.Tables[1];

            StringBuilder sb = new StringBuilder();
            sb.Append("<CategoryAndBillerByAgentCodeRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<Categories>");
            foreach (DataRow drCat in dtCategory.Rows)
            {
                isActive = false;
                string categoryId = drCat["CATEGORYID"].ToString();
                string fliter = string.Format("CATEGORYID = '{0}'", drCat["CATEGORYID"].ToString());
                DataRow[] foundRows = dtBillers.Select(fliter);
                sb.Append("<Category>");
                sb.Append("<CategoryID>" + categoryId + "</CategoryID>");
                sb.Append("<CategoryName>" + drCat["CATEGORYNAME"] + "</CategoryName>");

                // Check Mobile Category for Epins
                if (categoryId == ConfigurationManager.AppSettings["MobileCategory"])
                {
                    if (!string.IsNullOrEmpty(showEpinCategory) && showEpinCategory == "Y")
                    {
                        // Check Active : return true if it has Biller
                        isActive = foundRows.Any();
                    }
                }
                else
                {
                    // Check Active : return true if it has Biller
                    isActive = foundRows.Any();
                }
                string imageUrl = isActive ? drCat["ACTIVELOGOURL"].ToString() : drCat["INACTIVELOGOURL"].ToString();
                sb.Append("<ImageUrl>" + imageUrl + "</ImageUrl>");
                sb.Append("<IsActive>" + isActive + "</IsActive>");
                sb.Append("</Category>");
            }
            sb.Append("</Categories>");
            sb.Append("</CategoryAndBillerByAgentCodeRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in CategoryAndBillerByAgentCodeReq : " + ex.ToString());
            response = Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    public string CategoryAndBillerByAgentCodeReqV2(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;
        string showEpinCategory = string.Empty;
        bool isActive = false;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateCategoryAndBillerListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agentCode, out token, out showEpinCategory))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getCategoryAndBillerByAgentCodeV2(agentCode, out ds, out errmsg))
            {
                // Error in getting Category and Biller
                writeLog("Error in CategoryAndBillerByAgentCodeReqV2 : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable dtBillers = ds.Tables[0];
            DataTable dtCategory = ds.Tables[1];

            StringBuilder sb = new StringBuilder();
            sb.Append("<CategoryAndBillerByAgentCodeRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<Categories>");
            foreach (DataRow drCat in dtCategory.Rows)
            {
                isActive = false;
                string categoryId = drCat["CATEGORYID"].ToString();
                string fliter = string.Format("CATEGORYID = '{0}'", drCat["CATEGORYID"].ToString());
                DataRow[] foundRows = dtBillers.Select(fliter);
                sb.Append("<Category>");
                sb.Append("<CategoryID>" + categoryId + "</CategoryID>");
                sb.Append("<CategoryName>" + drCat["CATEGORYNAME"] + "</CategoryName>");

                // Check Mobile Category for Epins
                if (categoryId == ConfigurationManager.AppSettings["MobileCategory"])
                {
                    if (!string.IsNullOrEmpty(showEpinCategory) && showEpinCategory == "Y")
                    {
                        // Check Active : return true if it has Biller
                        isActive = foundRows.Any();
                    }
                }
                else
                {
                    // Check Active : return true if it has Biller
                    isActive = foundRows.Any();
                }
                string imageUrl = isActive ? drCat["ACTIVELOGOURL"].ToString() : drCat["INACTIVELOGOURL"].ToString();
                sb.Append("<ImageUrl>" + imageUrl + "</ImageUrl>");
                sb.Append("<IsActive>" + isActive + "</IsActive>");
                sb.Append("</Category>");
            }
            sb.Append("</Categories>");
            sb.Append("</CategoryAndBillerByAgentCodeRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in CategoryAndBillerByAgentCodeReqV2 : " + ex.ToString());
            response = Utils.GetErrorString(version, "99", "System Error");
        }

        return response;
    }

    public string CategoryReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateCategoryListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        try
        {
            if (_agentWCF.getCategoryList(out ds, out errmsg))
            {
                var sb = new StringBuilder();
                sb.Append("<CategoryRes version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        sb.Append("<Category categoryID=" + "\"" + ds.Tables[0].Rows[i]["CATEGORYID"].ToString() + "\" categoryName=" + "\"" + ds.Tables[0].Rows[i]["CATEGORYNAME"].ToString()
                            + "\" categoryLogo=" + "\"" + ds.Tables[0].Rows[i]["CATEGORYLOGO"].ToString() + "\"/>");

                    }
                }
                sb.Append("</CategoryRes>");
                return sb.ToString();

            }
            code = "99";
            desp = "System Error";
            return Utils.GetErrorResponse(code, desp);

        }
        catch (Exception ex)
        {
            writeLog("Error in BillerListReq : " + ex.ToString());
        }
        return string.Empty;
    }

    bool IsValidateCategoryListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }



        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID)) // || txnperpage < 1 || pageno < 1
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return authentication(email, password, out code, out desp);
    }

    bool IsValidateCategoryAndBillerListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string agentID, out string token, out string showEpinCategory) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentID = string.Empty;
        token = string.Empty;
        showEpinCategory = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentID = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <AgentID> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        if (ht.ContainsKey("ShowEpinCategory"))
        {
            showEpinCategory = ht["ShowEpinCategory"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(agentID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);
    }
    #endregion

    #region BatchList
    public string BatchListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        int batchPerpage = 0, pageno = 0;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateBatchListReq(ht, out code, out desp, out version, out ts, out email, out password, out batchPerpage, out pageno))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.getBatchlist(email, batchPerpage, pageno, out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<BatchListRes version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" BatchPerPage=" + "\"" + batchPerpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string imgUrl = "";
                        string edatetime = ds.Tables[0].Rows[i]["BATCHENDDATE"] == DBNull.Value ? "" : ds.Tables[0].Rows[i]["BATCHENDDATE"].ToString();
                        sb.Append("<Batch batchID=" + "\"" + ds.Tables[0].Rows[i]["BATCHID"].ToString() + "\"  totalAmount=" + "\"" + ds.Tables[0].Rows[i]["TXNAMOUNT"].ToString() + "\" txnCount=" + "\"" + ds.Tables[0].Rows[i]["TXNCOUNT"].ToString() + "\"  batstatus=" + "\"" + ds.Tables[0].Rows[i]["BATSTATUS"].ToString() + "\"  dateTime=" + "\"" + ds.Tables[0].Rows[i]["BATCHSTARTDATE"].ToString() + "\"  enddateTime=" + "\"" + edatetime + "\" agentLogo=" + "\"" + imgUrl + "\" />");
                    }
                }
                sb.Append("</BatchListRes>");
                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in BatchListReq : " + ex.ToString());
            }
        }


        return string.Empty;
    }

    bool IsValidateBatchListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out int batchperpage, out int pageno)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        batchperpage = 0;
        pageno = 0;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("BatchPerPage"))
        {
            try
            {
                batchperpage = Convert.ToInt32(ht["BatchPerPage"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing BatchPerPage <BatchPerPage> Tag");
            return false;
        }


        if (ht.ContainsKey("PageNo"))
        {
            try
            {
                pageno = Convert.ToInt32(ht["PageNo"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing PageNo <PageNo> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || batchperpage < 1 || pageno < 1)
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }


        return authentication(email, password, out code, out desp);
    }
    #endregion


    #region BatchDetail



    public string BatchDetailReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string agentid = string.Empty;
        Int32 batchid = 0;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateBatchDetailReq(ht, out code, out desp, out version, out ts, out email, out password, out batchid, out agentid))
        {
            return Utils.GetErrorResponse(code, desp);
        }


        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.getBatchDetail(agentid, agentuseruniqueid, batchid, out ds, out errmsg))
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string imgUrl = "";
                    string enddate = ds.Tables[0].Rows[0]["BATCHENDDATE"] == DBNull.Value ? "" : ds.Tables[0].Rows[0]["BATCHENDDATE"].ToString();

                    StringBuilder sb = new StringBuilder();
                    sb.Append("<BatchDetailRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>00</ResCode>");
                    sb.Append("<ResDesc>Sussess</ResDesc>");

                    sb.Append("<BatchID>" + ds.Tables[0].Rows[0]["BATCHID"].ToString() + "</BatchID>");
                    sb.Append("<TxnCount>" + ds.Tables[0].Rows[0]["TXNCOUNT"].ToString() + "</TxnCount>");
                    sb.Append("<TotalAmount>" + ds.Tables[0].Rows[0]["TXNAMOUNT"].ToString() + "</TotalAmount>");

                    sb.Append("<DateTime>" + ds.Tables[0].Rows[0]["BATCHSTARTDATE"].ToString() + "</DateTime>");
                    sb.Append("<EndDateTime>" + enddate + "</EndDateTime>");
                    sb.Append("<BatchStatus>" + ds.Tables[0].Rows[0]["BATCHSTATUS"].ToString() + "</BatchStatus>");
                    sb.Append("<AgentLogo>" + imgUrl + "</AgentLogo>");
                    sb.Append("</BatchDetailRes>");


                    return sb.ToString();

                }
            }
            catch (Exception ex)
            {
                writeLog("Error in BatchDetailReq : " + ex.ToString());
            }
        }


        return string.Empty;
    }

    bool IsValidateBatchDetailReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out Int32 batchid, out string agentid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        agentid = string.Empty;
        batchid = 0;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("BatchID"))
        {
            try
            {
                batchid = Convert.ToInt32(ht["BatchID"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing BatchPerPage <BatchPerPage> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || batchid < 1)
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return authentication(email, password, out code, out desp);
    }

    #endregion


    #region CloseShiftRes

    bool IsValidateInquiryCloseShiftReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out Int32 batchid, out string agentid, out string agentuserid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        agentid = string.Empty;
        agentuserid = string.Empty;
        batchid = 0;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);

    }

    public string InquiryCloseShiftReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string agentuserid = string.Empty;
        string password = string.Empty;
        string agentid = string.Empty;
        Int32 batchid = 0;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateInquiryCloseShiftReq(ht, out code, out desp, out version, out ts, out email, out password, out batchid, out agentid, out agentuserid))
        {
            return Utils.GetErrorResponse(code, desp);
        }


        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.getCloseShiftDetail(agentuserid, agentid, out ds, out errmsg))
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string imgUrl = "";
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<InquiryCloseShiftRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>00</ResCode>");
                    sb.Append("<ResDesc>Sussess</ResDesc>");

                    sb.Append("<BatchID>" + ds.Tables[0].Rows[0]["BATCHID"].ToString() + "</BatchID>");
                    sb.Append("<TxnCount>" + ds.Tables[0].Rows[0]["TXNCOUNT"].ToString() + "</TxnCount>");
                    sb.Append("<TotalAmount>" + ds.Tables[0].Rows[0]["TXNAMOUNT"].ToString() + "</TotalAmount>");

                    sb.Append("<DateTime>" + ds.Tables[0].Rows[0]["BATCHSTARTDATE"].ToString() + "</DateTime>");
                    sb.Append("<BatchStatus>" + ds.Tables[0].Rows[0]["BATCHSTATUS"].ToString() + "</BatchStatus>");
                    sb.Append("<AgentLogo>" + imgUrl + "</AgentLogo>");
                    sb.Append("</InquiryCloseShiftRes>");

                    return sb.ToString();

                }
            }
            catch (Exception ex)
            {
                writeLog("Error in InquiryCloseShiftReq : " + ex.ToString());
            }
        }
        return string.Empty;
    }

    public string CloseShiftReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        Int32 batchid = 0;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateCloseShiftReq(ht, out code, out desp, out version, out ts, out email, out password, out batchid))
        {
            return Utils.GetErrorResponse(code, desp);
        }


        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.getCloseShift(email, batchid, out ds, out errmsg))
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<CloseShiftRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>00</ResCode>");
                    sb.Append("<ResDesc>Sussess</ResDesc>");

                    sb.Append("<BatchID>" + ds.Tables[0].Rows[0]["BATCHID"].ToString() + "</BatchID>");
                    sb.Append("<DateTime>" + ds.Tables[0].Rows[0]["BATCHSTARTDATE"].ToString() + "</DateTime>");
                    sb.Append("<BatchStatus>" + ds.Tables[0].Rows[0]["BATCHSTATUS"].ToString() + "</BatchStatus>");
                    sb.Append("</CloseShiftRes>");

                    return sb.ToString();
                }
            }
            catch (Exception ex)
            {
                writeLog("Error in CloseShiftReq : " + ex.ToString());
            }
        }
        return string.Empty;
    }

    bool IsValidateCloseShiftReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out Int32 batchid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        batchid = 0;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("BatchID"))
        {
            try
            {
                batchid = Convert.ToInt32(ht["BatchID"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing BatchPerPage <BatchPerPage> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || batchid < 1)
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return authentication(email, password, out code, out desp);
    }
    #endregion


    #region ChangePassword
    public string ChangePasswordReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string newPassword = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateChangePasswordReq(ht, out code, out desp, out version, out ts, out email, out password, out newPassword))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;

        if (_agentWCF.ChangePassword(email, newPassword, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<ChangePasswordRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>Sussess</ResDesc>");
                sb.Append("</ChangePasswordRes>");

                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in ChangePasswordReq : " + ex.ToString());
            }
        }


        return string.Empty;
    }

    bool IsValidateChangePasswordReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string newpassword)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        newpassword = string.Empty;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("NewPassword"))
        {
            newpassword = ht["NewPassword"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing NewPassword <NewPassword> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(newpassword))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out code, out desp);
    }
    #endregion


    #region ResetPassword
    public string ResetPasswordReq(string reqXml)
    {

        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateResetPasswordReq(ht, out code, out desp, out version, out ts, out email, out password))
        {
            return Utils.GetErrorResponse(code, desp);
        }
        if (password != "" && password != null)
        {
            EmailApiModel model = new EmailApiModel();

            Utils.sendMail(model, email, email, password);


            StringBuilder sb1 = new StringBuilder();
            sb1.Append("<ResetPasswordRes>");
            sb1.Append("<Version>1.0</Version>");
            sb1.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb1.Append("<Email>" + email + "</Email>");
            sb1.Append("<ResCode>00</ResCode>");
            sb1.Append("<ResDesc>Sussess</ResDesc>");
            sb1.Append("</ResetPasswordRes>");
            return sb1.ToString();

        }
        else
        {
            return Utils.GetErrorResponse(code, desp);
        }
    }
    #endregion
    #region Tz 02-Sep-2016
    public string RepaymentServiceFeeReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$$ This Is RepaymentServiceFee Request $$$$$$$$$$$$$$$$$");
        writeLog("ReqXML:" + reqXml);
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.RepaymentServiceFeeReq(reqXml);
    }
    #endregion
    #region mobileRegister Tz28-May-2015


    public string RegisterReq(string reqXml)
    {

        writeLog("$$$$$$$$$$$$$$$ This Is Register Request $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
        writeLog("ReqXML:" + reqXml);
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();

        return bis.RegisterReq(reqXml);
    }

    bool IsValidateRegisterReq(Hashtable ht, out string code, out string desp, out string name, out string shopname, out string mobileno, out string email, out string addr, out string shoptype, out string DOB, out string gender)
    {

        code = "00";
        desp = "Success";

        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        name = string.Empty;
        shopname = string.Empty;
        email = string.Empty;
        mobileno = string.Empty;
        addr = string.Empty;
        shoptype = string.Empty;
        DOB = string.Empty;
        gender = string.Empty;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Name"))
        {
            name = ht["Name"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Name <Name> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopName"))
        {
            shopname = ht["ShopName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ShopName <ShopName> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopType"))
        {
            shoptype = ht["ShopType"].ToString();
        }

        if (ht.ContainsKey("DateOfBirth"))
        {
            DOB = ht["DateOfBirth"].ToString();
        }

        if (ht.ContainsKey("Gender"))
        {
            gender = ht["Gender"].ToString();
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }
        if (ht.ContainsKey("MobileNo"))
        {
            mobileno = ht["MobileNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MobileNo <MobileNo> Tag");
            return false;
        }
        if (ht.ContainsKey("Address"))
        {
            addr = ht["Address"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Address> Tag");
            return false;
        }

        // Check Null or Empty String
        if (String.IsNullOrEmpty(version) || string.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(name) || String.IsNullOrEmpty(mobileno) || String.IsNullOrEmpty(addr))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return true;
    }

    bool sendmail(string name, string shopname, string mobileno, string email, string addr, string shoptype, string dob, string gender, out string msg)
    {
        writeLog("Ok in entering sendmail method");
        StringBuilder sb = new StringBuilder();
        sb.Append(ConfigurationManager.AppSettings["greeting"].ToString() + "<br/>");
        sb.Append(ConfigurationManager.AppSettings["msgbody"].ToString() + "<br/><br/>");
        sb.Append("<table>");
        sb.Append("<tr><td>Name </td><td>:</td><td><strong>" + name + "</strong> .</td></tr>");
        sb.Append("<tr><td>Gender </td><td>:</td><td><strong>" + gender + "</strong> .</td></tr>");
        sb.Append("<tr><td>DOB </td><td>:</td><td><strong>" + dob + "</strong> .</td></tr>");
        sb.Append("<tr><td>Shop Name </td><td>:</td><td><strong>" + shopname + "</strong></td></tr>");
        sb.Append("<tr><td>Shop Type </td><td>:</td><td><strong>" + shoptype + "</strong></td></tr>");
        sb.Append("<tr><td>Contact No </td><td>:</td><td><strong>" + mobileno + "</strong></td></tr>");
        sb.Append("<tr><td>Email </td><td>:</td><td><strong>" + email + "</strong></td></tr>");
        sb.Append("<tr><td>Address </td><td>:</td><td><strong>" + addr + "</strong></td></tr>");

        sb.Append("</table></br>");


        sb.Append("<strong>Thank You & Regards</Strong>, <br/>");
        sb.Append(name);

        EmailApiModel mailapi = new EmailApiModel();
        mailapi.fromEmailAddress = ConfigurationManager.AppSettings["fromEmail"].ToString();
        mailapi.toEmail = ConfigurationManager.AppSettings["toEmail"].ToString();
        mailapi.subject = ConfigurationManager.AppSettings["subject"].ToString() + " at " + DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss");
        mailapi.msgBody = sb.ToString();

        SendGridEmailService sendGridEmailService = new SendGridEmailService();
        SendGridEmailRequest sendGridEmailRequest = new SendGridEmailRequest
        {
            FromEmailDisplayName = mailapi.fromEmailDisplayName,
            Subject = mailapi.subject,
            MessageBody = mailapi.msgBody,
            ToAddress = mailapi.toEmail
        };

        string errMsg = string.Empty;
        if (sendGridEmailService.SendEmail(sendGridEmailRequest))
        {
            msg = errMsg;
            writeLog("Return ture email was sent" + msg);
            return true;
        }
        else
        {
            msg = errMsg;
            return false;
        }
    }

    #endregion

    #region 1Stop's Merchant List Tz 09-July-2015
    public string MerListReq(string reqXml)
    {
        StringBuilder sb = new StringBuilder();

        string code = string.Empty;
        string desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;

        string _merchent = string.Empty;
        string messageid = string.Empty;
        string merchantlogourl = string.Empty;
        string merchantlistpath = string.Empty;
        string taxid = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (IsValidateMerListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageid, out taxid))
        {
            //        <MerListReq>
            //<Version>1.0</Version>
            //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
            //<MessageID>768866yyhhhhhh</MessageID>
            //<Email>user@agent.com</Email>
            //<Password>xxxxxxxxxx</Password>
            //</MerListReq>

            //        <MerListRes version="1.0" total="100" timeStamp="yyyyMMddhhmmssffff" messageID="768866yyhhhhhh" >
            //<Merchant merID="1" merName="1-2-3" merLogo="imageUrl" merUrl="webUrl"  />
            //</MerListRes>
            if (!String.IsNullOrEmpty(taxid) && taxid == ConfigurationManager.AppSettings["EasyPoints"].ToString())
            {
                merchantlogourl = ConfigurationManager.AppSettings["EasyPointsMerchantLogoUrl"].ToString();
                merchantlistpath = ConfigurationManager.AppSettings["EasyPointsMerchantListPath"].ToString();
            }
            else
            {
                merchantlogourl = ConfigurationManager.AppSettings["MerchantLogoUrl"].ToString();
                merchantlistpath = ConfigurationManager.AppSettings["MerchantListPath"].ToString();
            }
            string[] _merchantlist = System.IO.File.ReadAllLines(merchantlistpath);
            int _totalmerchant = _merchantlist.Count();
            sb.Append("<MerListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + _merchantlist.Count() + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageid + "\"" + ">");

            for (int i = 0; i < _totalmerchant; i++)
            {

                _merchent = _merchantlist[i];
                if (!string.IsNullOrEmpty(_merchent))
                {
                    string[] strArray = _merchent.Split(";".ToArray());
                    sb.Append("<Merchant merID=" + "\"" + strArray[0] + "\" merName=" + "\"" + strArray[1]
                        + "\" merlogo=" + "\"" + merchantlogourl + strArray[2] + "\" merUrl= " + "\"" + strArray[3]
                         + "\"/>");
                }

            }
            sb.Append("</MerListRes>");
            return sb.ToString();
        }
        return Utils.GetErrorResponse(code, desp);
    }

    bool IsValidateMerListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string taxID)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        taxID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }


        return authentication(email, password, out code, out desp);
    }

    #endregion

    #region Transaction Search Tz 07-Sep-2015

    public bool isTelco(string taxID)
    {
        bool result = false;
        if (taxID == "2222222222222" || taxID == "3333333333333" || taxID == "4444444444444" || taxID == "5555555555555" || taxID == "6666666666666" || taxID == "0000000000024" || taxID == "0000000000054" || taxID == "0000000000060" || taxID == "0000000000061" || taxID == "0000000000062" || taxID == "0000000000063" || taxID == "0000000000064" || taxID == "0000000000065" || taxID == "0000000000066")
        {
            result = true;
        }
        return result;
    }

    public bool isGiftCard(string taxID)
    {
        bool result = false;
        if (taxID == "0000000000001" || taxID == "0000000000002" || taxID == "0000000000003" || taxID == "0000000000004" || taxID == "0000000000015" || taxID == "0000000000016" || taxID == "0000000000030" || taxID == "0000000000028" || taxID == "0000000000012" || taxID == "1111111111111" || taxID == ConfigurationManager.AppSettings["SteamWalletSGDMapTaxId"].ToString() || taxID == ConfigurationManager.AppSettings["LaLaKyiId"].ToString() || taxID == ConfigurationManager.AppSettings["HiWifi"].ToString() || taxID == ConfigurationManager.AppSettings["MyanmarNetAwaThone"].ToString() || taxID == ConfigurationManager.AppSettings["MyanmarNetData"].ToString() || taxID == ConfigurationManager.AppSettings["MyanmarNetPrepaid"].ToString() || taxID == "0000000000057")
        {
            result = true;
        }
        return result;

    }

    public string TxnSearchReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        int txnperpage = 0, pageno = 0;
        string smsMsg = string.Empty;
        string REF1 = string.Empty;
        string REF2 = string.Empty;
        string REF3 = string.Empty;
        string REF4 = string.Empty;
        string REF5 = string.Empty;
        string agncode = string.Empty;
        int maxRecords = 0;
        string orderby = "TRANSACTIONID";
        string batchID = string.Empty;
        string BillerID = string.Empty;
        string trannID = string.Empty;
        string txnDateFrom = string.Empty;
        string txnDateTo = string.Empty;
        string amountFrom = string.Empty;
        string amountTo = string.Empty;
        string txnStatus = string.Empty;
        string branchID = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateTxnSearchReq(ht, out code, out desp, out version, out ts, out email, out password, out txnperpage,
                out pageno, out messageID, out agncode, out txnDateFrom, out txnDateTo, out BillerID, out amountFrom,
                out amountTo, out REF3, out trannID))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        if (!string.IsNullOrEmpty(txnDateFrom) && txnDateFrom.Length <= 10)
        {
            txnDateFrom += " 01:00:00.001";
        }

        if (!string.IsNullOrEmpty(txnDateTo) && txnDateTo.Length <= 10)
        {
            txnDateTo += " 23:59:59.999";
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.getTransactionSearch(pageno, txnperpage, orderby, batchID, BillerID, agncode, email, trannID, txnDateFrom, txnDateTo, REF1, REF2, REF3, REF4, REF5, amountFrom, amountTo, txnStatus, branchID, maxRecords, out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<TxnSearchRes ResCode=" + "\"00\" totalTxnAmount=" + "\"" + ds.Tables[1].Rows[0][1].ToString() + "\" totalCommissionFee=" + "\"" + ds.Tables[1].Rows[0][2].ToString() + "\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string imgURL = string.Empty;
                        try
                        {
                            imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString() + ".png";
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                        }

                        decimal agentFee = Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["SERVICEFEE"].ToString()) ? "0" : ds.Tables[0].Rows[i]["SERVICEFEE"].ToString());
                        decimal total = agentFee + Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString()) ? "0" : ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString());
                        string agentName = ds.Tables[0].Rows[i]["AGENTNAME"].ToString();


                        string REFID1, REFID1Name = string.Empty; ;
                        string REFID2;
                        string REFID3, REFID3Name = string.Empty;
                        string biller;
                        string amount;
                        double totalAmount = 0;
                        string ref3Value;
                        string serviceFee;
                        string ref1Name;
                        string ref1Value;
                        string ref2Value;
                        string ref2Name;
                        string ref3Name;
                        string ref4Name;
                        string ref5Name;
                        string ref5Value;
                        string txnID;
                        string taxID;
                        string ref4Value;
                        string NRC = string.Empty;
                        string expirye = string.Empty;
                        string maptaxID = string.Empty;
                        var txnDateTime = string.Empty;
                        var agentLogo = string.Empty;
                        REFID1 = ds.Tables[0].Rows[i]["REFID1"].ToString();
                        REFID1Name = ds.Tables[0].Rows[i]["REF1NAME"].ToString();
                        REFID2 = ds.Tables[0].Rows[i]["REFID2"].ToString();
                        REFID3 = ds.Tables[0].Rows[i]["REFID3"].ToString();
                        REFID3Name = ds.Tables[0].Rows[i]["REF3NAME"].ToString();

                        biller = ds.Tables[0].Rows[i]["COMPANYNAME"].ToString();

                        ref1Value = ds.Tables[0].Rows[i]["REFID1"].ToString();
                        ref1Name = ds.Tables[0].Rows[i]["REF1NAME"].ToString();
                        ref2Value = ds.Tables[0].Rows[i]["REFID2"].ToString();
                        ref2Name = ds.Tables[0].Rows[i]["REF2NAME"].ToString();
                        ref3Value = ds.Tables[0].Rows[i]["REFID3"].ToString();
                        ref3Name = ds.Tables[0].Rows[i]["REF3NAME"].ToString();
                        ref4Value = ds.Tables[0].Rows[i]["REFID4"].ToString();
                        ref4Name = ds.Tables[0].Rows[i]["REF4NAME"].ToString();
                        ref5Value = ds.Tables[0].Rows[i]["REFID5"].ToString();
                        ref5Name = ds.Tables[0].Rows[i]["REF5NAME"].ToString();

                        taxID = ds.Tables[0].Rows[i]["TAXID"].ToString();
                        maptaxID = ds.Tables[0].Rows[i]["MAPTAXID"].ToString();
                        txnID = ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString();
                        txnDateTime = ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString();
                        amount = ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString();
                        serviceFee = ds.Tables[0].Rows[i]["SERVICEFEE"].ToString();

                        if (taxID == ConfigurationManager.AppSettings["PayBillsTaxId"].ToString())
                        {
                            writeLog("PayBills GetAgentLogo in TxnSearchReq");
                            DataSet agentDs = null;
                            var msg = string.Empty;
                            if (_agentWCF.GetAgentLogoByAgentCode(REFID2, out agentDs, out msg))
                            {
                                agentLogo = (agentDs.Tables[0].Rows[0]["AGENTLOGO"] == DBNull.Value) ? ConfigurationManager.AppSettings["DefaultPartnerLogoUrl"].ToString() : Convert.ToBase64String((byte[])agentDs.Tables[0].Rows[0]["AGENTLOGO"]);
                                imgURL = (agentDs.Tables[0].Rows[0]["AGENTLOGO"] == DBNull.Value) ? ConfigurationManager.AppSettings["DefaultPartnerLogoUrl"].ToString() : Convert.ToBase64String((byte[])agentDs.Tables[0].Rows[0]["AGENTLOGO"]);
                            }
                        }


                        //GiftCagList
                        var giftCagList = ConfigurationManager.AppSettings["GiftCagList"].ToString().Split(',');

                        if (
                            maptaxID == "0000000000006" ||
                            maptaxID == "0000000000017" ||

                             maptaxID == "0000000000019" ||
                            maptaxID == "1230000000000")
                        {
                            REFID3 = "";
                            REFID3Name = "";
                        }
                        if (maptaxID == "0000000000018" || maptaxID == "0000000000010")//MLM/MercyCorps 
                        {
                            REFID1 = "";
                            REFID1Name = "";
                        }
                        if (maptaxID == "0000000000019")
                        {
                            string[] words = ref4Value.Split(' ');
                            NRC = words[0].ToString();
                            expirye = words[1].ToString();
                        }
                        SMSHelper smsH = new SMSHelper();
                        writeLog("TaxID : " + taxID + "|MapTaxID :" + maptaxID);

                        if (isTelco(maptaxID))
                        {
                            writeLog("This is Telcos Topup.");
                            REFID3 = Utils.maskString(REFID3);
                            smsMsg = string.Empty;
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();
                            if (ref3Value != "Airtime")
                            {
                                smsMsg = smsH.getMessageTopup(agentName, maptaxID, biller, PIN, ref3Value, Expiry,
                                   double.Parse(amount).ToString("#,###.00"), branchCode); //updated by hnt 20-March-2015 change biller Name to Biller
                            }
                        }

                        // this is for mahar mobile
                        else if (taxID == "0000000000079")
                        {
                            //iTune/GooglePlay/Skype/Myantalk/SteamWallet/FaceBook/Vakok
                            writeLog("This is GiftCards.");
                            string[] words = ref4Value.Split(' ');
                            string PIN = string.Empty;
                            string Expiry = string.Empty;
                            if (words.Count() > 1)
                            {
                                PIN = words[0].ToString();
                                Expiry = words[1].ToString();
                            }
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Code", "Expiry", "",
                                    "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                    totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (isGiftCard(maptaxID))
                        {
                            writeLog("This is GiftCards.");
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            if (maptaxID == "0000000000028")//MMS Biller
                            {

                                smsMsg = smsH.getMessagelegacyMusic(agentName, maptaxID, biller, "PIN", "", "", "Ref", PIN, "", "", txnID.ToString(),
                                      double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            }
                            else
                            {
                                smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                        }
                        else if (maptaxID == "0000000000005")
                        {
                            smsMsg = string.Empty;
                        }
                        else if (maptaxID == "0000000000050")
                        {
                            writeLog("This is 1Stop+");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller1Stop(agentName, maptaxID, biller, ref1Name, ref2Name, "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                           double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }
                        else if (maptaxID == "0000000000017")//EasyPoints
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "Code", "Description", "", "Ref", ref3Value, ref2Value, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }
                        else if (maptaxID == "0000000000018" || maptaxID == "0000000000010")//MLM/MercyCorpsGenerate
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "Code", "Description", "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }
                        else if (maptaxID == "0000000000006")
                        {
                            writeLog("This is Putet.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "Code", "Duration", "", "Ref", ref3Value, ref2Value, "", txnID.ToString(),
                                       double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }
                        else if (maptaxID == "0000000000029")
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBillerGGI(agentName, maptaxID, biller, "Contract No", "", "", "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                      double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                        }
                        else if (maptaxID == "0000000000022")
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBillerGGI(agentName, maptaxID, biller, ref1Name, REFID3Name, "Receipt No", "Ref", ref1Value, ref3Value, ref2Value, txnID.ToString(),
                                               double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }
                        else if (maptaxID == "0000000000023")
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBillerGGI(agentName, maptaxID, biller, "Slip No", "Customer ID", "Receipt No", "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                          double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                        }
                        else if (maptaxID == "0000000000031")
                        {
                            string[] words = ref4Value.Split(' ');
                            string Expiry = words[1].ToString();
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref1Name, REFID3Name, "Expiry", "Ref", ref1Value, ref3Value, Expiry, txnID.ToString(),
                                                  double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }
                        else if (maptaxID == "0000000000052")//CanalPlus
                        {
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref1Name, REFID3Name, "Expiry", "Ref", ref1Value, ref3Value, ref4Value, txnID.ToString(),
                                                  double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }


                        else if (maptaxID == "0000000000032") //123 Remit CashIn
                        {
                            writeLog("This is CashIn.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Payer Name", "", "", "Ref", ref2Value,
                                "", "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"),
                                branchCode);
                        }
                        else if (maptaxID == "0000000000033") //123 Remit CashOut
                        {
                            writeLog("This is CashOut.");
                            totalAmount = double.Parse(amount) - double.Parse(serviceFee);
                            total = Convert.ToDecimal(totalAmount);
                            smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Payee Name", "", "", "Ref", ref3Value,
                                "", "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"),
                                branchCode);
                            smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Payee Name", "", "", "Ref", ref3Value, "", "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["TelenorFtthMaptaxId"] || maptaxID == ConfigurationManager.AppSettings["TelenorWtthMaptaxId"])
                        {
                            writeLog("This is TelenorFtthOrWtth.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref1Name, ref2Name, REFID3Name, "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["Flight"])
                        {
                            writeLog("This is Flight.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.GetMessageBiller(txnID, agentName, maptaxID, biller, ref1Name, ref2Name, REFID3Name, ds.Tables[0].Rows[i]["REF4NAME"].ToString(), ref1Value, ref2Value, ref3Value, ref4Value, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (maptaxID == "0000000000055" || maptaxID == "0000000000067" || maptaxID == ConfigurationManager.AppSettings["CookieTVTaxId"]
                            || maptaxID == ConfigurationManager.AppSettings["FlexiblePassTaxId"] || maptaxID == ConfigurationManager.AppSettings["WasoLearnTaxId"])//iflix & viu
                        {
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();

                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["OoredooFtth"])
                        {
                            writeLog("This is OoredooFtth.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            REFID3Name = string.Empty;
                            smsMsg = smsH.GetOoredooFtthMessage(agentName, biller, txnDateTime, ref1Name, ref2Name, "Ref", ref1Value, ref2Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["MyanPwel"])
                        {
                            writeLog("This is MyanPwel.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.GetMessageBiller(txnID, agentName, maptaxID, biller, ref1Name, ref2Name, REFID3Name, ds.Tables[0].Rows[i]["REF4NAME"].ToString(), ref1Value, ref2Value, ref3Value, ref4Value, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["MinTheinKha"])
                        {
                            writeLog("This is MinTheinKha.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            REFID3 = string.Empty;
                            ref4Value = string.Empty;
                            var desc = ConfigurationManager.AppSettings["MinTheinKhaSmsDesc"];
                            smsMsg = smsH.GetMinTheinKhaMessageBiller(txnID, agentName, maptaxID, biller, ref1Name, ref1Value, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode, desc);
                        }

                        else
                        {
                            writeLog("This is Bill Payment & Others.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref1Name, ref2Name, "", "Ref",
                                ref1Value, ref2Value, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"),
                                branchCode);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref1Name, ref2Name, "",
                                "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"), branchCode);
                        }

                        if (maptaxID == ConfigurationManager.AppSettings["PgMapTaxId"])
                        {
                            DataSet dataSet = null;
                            string errorMsg;
                            var invoiceList = new List<string>();
                            var amountList = new List<string>();
                            var txId = ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString();

                            if (_agentWCF.getAgentInvoicesInfo(txId, out dataSet, out errorMsg))
                            {
                                if (dataSet.Tables[0].Rows.Count > 0)
                                {
                                    for (int j = 0; j < dataSet.Tables[0].Rows.Count; j++)
                                    {
                                        invoiceList.Add(dataSet.Tables[0].Rows[j]["INVOICENUMBER"].ToString());
                                        amountList.Add(dataSet.Tables[0].Rows[j]["AMOUNT"].ToString());
                                    }
                                }
                            }

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" + REFID2 +
                                      "\" ref3=" + "\"" +
                                      string.Join(",", invoiceList) + "\" ref4=" + "\"" + string.Join(",", amountList) +
                                      "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      "InvoiceList" +
                                      "\" ref4Name=" + "\"" +
                                      "AmountList" + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == "0000000000058" ||
                             maptaxID == ConfigurationManager.AppSettings["TelenorFtthMaptaxId"] ||
                             maptaxID == ConfigurationManager.AppSettings["TelenorWtthMaptaxId"])
                        {
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + "" + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      REFID3Name + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["Flight"])
                        {
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["MmBusticket"])
                        {
                            REFID3 = string.Empty;
                            REFID3Name = string.Empty;
                            (new MMBusService()).PopulateMMBusTransaction(sb, ds, i, REFID2, NRC, expirye, imgURL, total.ToString(), agentName, smsMsg, taxID, amount.ToString(), smsH, maptaxID, biller,
                                ref1Name, ref1Value, ref2Value, txnID.ToString(), serviceFee, ref4Value, REFID1, REFID3, REFID1Name, REFID3Name, agentFee, branchCode);
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["MptDataPackage"] || maptaxID == ConfigurationManager.AppSettings["OoredooDataPackage"] || maptaxID == ConfigurationManager.AppSettings["MyTelDataPackage"])
                        {
                            var ref1value = "(MPT-GSM)";
                            if (maptaxID == ConfigurationManager.AppSettings["OoredooDataPackage"]) ref1value = "(Ooredoo-GSM)";
                            if (maptaxID == ConfigurationManager.AppSettings["MyTelDataPackage"]) ref1value = "(MyTel-GSM)";

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                       "\" txnDate=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                       ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                        ref1value + "\" ref2=" + "\"" + string.Empty + "\" ref3=" + "\"" +
                                       REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                       ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                       REFID1Name + "\" ref2Name=" + "\"" +
                                        string.Empty + "\" ref3Name=" + "\"" +
                                       REFID3Name + "\" ref4Name=" + "\"" +
                                       ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                       ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                       ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                       imgURL + "\" locLatitude=" + "\"" +
                                       ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                       ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                       agentFee + "\" total=" + "\"" +
                                       total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                       "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["WunZinnMapTaxId"].ToString())
                        {
                            REFID3 = Utils.maskString(REFID3);
                            smsMsg = string.Empty;
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();

                            smsMsg = smsH.getMessageBillerWithTxnDateTime(agentName, maptaxID, biller, "Code",
                                "Expiry", "", "Ref",
                                PIN, Expiry, "", txnID.ToString(), "Txn Date/Time",
                                double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                totalAmount.ToString("#,##0.00"),
                                branchCode, ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString());

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      "" + "\" ref2Name=" + "\"" +
                                      "" + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["TelenorDataPackPinMapTaxId"].ToString())
                        {
                            REFID3 = Utils.maskString(REFID3);
                            smsMsg = string.Empty;
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();

                            smsMsg = smsH.getMessageTopup(agentName, maptaxID, biller, PIN, ref3Value, Expiry,
                                double.Parse(amount).ToString("#,###.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == "0000000000017")// This is EasyPoint
                        {
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID3"].ToString() + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      "Code" + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == "0000000000097")// This is Mother Finance Loan Registration
                        {
                            writeLog("This is Mother Finance Loan Registration");
                            smsMsg = string.Empty;
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      0 + "\" ref1=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID2"].ToString() + "\" ref3=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID3"].ToString() + "\" ref4=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID4"].ToString() + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + " Ks" + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      total + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["MescTaxId"])
                        {
                            writeLog("This is MESC.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            DateTime dateTime;
                            if (DateTime.TryParse(ref4Value, out dateTime))
                            {
                                ref4Value = DateTime.Parse(ref4Value).ToString("dd/MM/yyyy");
                            }
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), "", ds.Tables[0].Rows[i]["REF4NAME"].ToString(), "Ref", ref1Value, "", ref4Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            if (REFID2.Split('|').Count() > 1)
                            {
                                REFID2 = REFID2.Split('|')[1];
                            }
                            else
                            {
                                REFID2 = string.Empty;
                            }
                            if (ref2Name.Split('|').Count() > 1)
                            {
                                ref2Name = ref2Name.Split('|')[1];
                            }
                            else
                            {
                                ref2Name = string.Empty;
                            }

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ref2Name
                                      + "\" ref3Name=" + "\"" + "" +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["YescTaxId"])
                        {
                            writeLog("This is YESC.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            writeLog("YESC datetime search req: " + ref4Value);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), "", ds.Tables[0].Rows[i]["REF4NAME"].ToString(), "Ref", ref1Value, "", ref4Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      "" + "\" ref3Name=" + "\"" + "" +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["5BBTaxId"])
                        {
                            writeLog("This is 5BB.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "Ref", ref1Value, ref2Value, ref3Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["MBFTaxId"])
                        {
                            writeLog("This is MBF.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["MptMoneyTaxId"])
                        {
                            writeLog("This is MptMoney.");
                            smsMsg = string.Empty;
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["SaiSaiPayTaxId"])
                        {
                            writeLog("This is SaiSai Pay.");
                            smsMsg = string.Empty;
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["MSPTopUpTaxId"])
                        {
                            writeLog("This is MSP TopUp.");
                            smsMsg = string.Empty;
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["AnawrahtaTaxId"])
                        {
                            writeLog("This is Anawrahta.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["CitizenPayTaxId"])
                        {
                            writeLog("This is CitizenPay.");
                            smsMsg = string.Empty;
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["QuicKyatTaxId"])
                        {
                            writeLog("This is QuicKyat.");
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      string.Empty + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + string.Empty +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["TrueNetTaxId"])
                        {
                            writeLog("This is TrueNet.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "", ds.Tables[0].Rows[i]["REF2NAME"].ToString(), ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "Ref", "", ref2Value, ref3Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["WinFinanceTaxId"])
                        {
                            writeLog("This is WinFinance.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + string.Empty +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["XBoxOneTaxId"].ToString())
                        {
                            smsMsg = string.Empty;
                            string pin = string.Empty;
                            string expiry = string.Empty;
                            Utils.GetPinExpiry(ref4Value, out pin, out expiry);

                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "Code", "Expiry", "", "Ref", pin, expiry, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["PlayStationNetworkTaxId"].ToString())
                        {
                            smsMsg = string.Empty;
                            string pin = string.Empty;
                            string expiry = string.Empty;
                            Utils.GetPinExpiry(ref4Value, out pin, out expiry);

                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "Code", "Expiry", "", "Ref", pin, expiry, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["YadanarponTeleportTaxId"].ToString())
                        {
                            smsMsg = string.Empty;

                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref1Name, ref4Name, "", "Ref", ref1Value, ref4Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            if (!string.IsNullOrEmpty(ref1Value) && ref1Value != ConfigurationManager.AppSettings["YTPMonthlyBillType"])
                            {
                                ref3Name = string.Empty;
                            }
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ref3Name + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (giftCagList.Where(x => x == maptaxID).FirstOrDefault() != null)
                        {
                            smsMsg = string.Empty;
                            string pin = string.Empty;
                            string expiry = string.Empty;
                            Utils.GetPinExpiry(ref4Value, out pin, out expiry);

                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "Code", "Expiry", "", "Ref", pin, expiry, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF3NAME"].ToString() + "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["MargaGlobalTaxId"].ToString())
                        {
                            int am = (int)double.Parse(amount);
                            int totalAmt = (int)double.Parse(total.ToString());
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, string.Empty, ref2Name,
                                    ref3Name, "Ref", string.Empty, ref2Value, ref3Value, txnID, am.ToString() + ".00", serviceFee, totalAmt.ToString() + ".00", branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                     "\" txnDate=" + "\"" +
                                     ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                     ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                     ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                     REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                     REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                     ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                     REFID1Name + "\" ref2Name=" + "\"" +
                                     ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                     "\" ref4Name=" + "\"" +
                                     ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                     ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                     ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                     ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                     imgURL + "\" locLatitude=" + "\"" +
                                     ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                     ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                     "\" total=" + "\"" +
                                     total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                     "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["MobileLegendTaxId"].ToString())
                        {
                            int am = (int)double.Parse(amount);
                            int totalAmt = (int)double.Parse(total.ToString());
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref1Name, string.Empty,
                                    string.Empty, "Ref", ref1Value, ref2Value, string.Empty, txnID, am.ToString() + ".00", serviceFee, totalAmt.ToString() + ".00", branchCode);


                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["SmileCinemaTaxId"].ToString())
                        {
                            string[] words = ref4Value.Split(' ');
                            string PIN = words[0].ToString();
                            string Expiry = words[1].ToString();
                            string am = double.Parse(amount).ToString("#,##0.00");
                            string totalAmt = total.ToString("#,##0.00");
                            smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Code", "Expiry",
                                    string.Empty, "Ref", PIN, Expiry, string.Empty, txnID.ToString(), am, serviceFee, totalAmt, branchCode);


                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["PubgUC"].ToString())
                        {
                            writeLog("This is PUBG.");
                            string[] words = ref4Value.Split(' ');
                            string PIN = string.Empty;
                            string Expiry = string.Empty;
                            if (words.Length == 2)
                            {
                                PIN = words[0].ToString();
                                Expiry = words[1].ToString();
                            }
                            else
                            {
                                Expiry = "-";
                                PIN = words[0].ToString();
                            }
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, "Code", "Expiry", "",
                                    "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                    totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      string.Empty + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["ChindwinNetTaxId"])
                        {
                            writeLog("This is Chindwin Net.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ds.Tables[0].Rows[i]["REF2NAME"].ToString(), ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "", "Ref", ref2Value, ref3Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");

                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["EasyMicrofinanceTaxId"].ToString())
                        {
                            writeLog("This is Easy Micorfinance");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, string.Empty, ds.Tables[0].Rows[i]["REF2NAME"].ToString(), ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "Ref", string.Empty, ref2Value, ref3Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["HanaMicrofinanceTaxId"].ToString())
                        {
                            writeLog("This is Hana Micorfinance TxnSearchReq");
                            writeLog("This is Hana Micorfinance TxnSearchReq Ref4Value : " + ref4Value);
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            string hanaRef4Name = string.Empty;
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref4Value, string.Empty, ds.Tables[0].Rows[i]["REF3NAME"].ToString(), "Ref", ref1Value, string.Empty, ref3Value, txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ref4Value + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + ds.Tables[0].Rows[i]["REF3NAME"].ToString() +
                                      "\" ref4Name=" + "\"" +
                                      hanaRef4Name + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["MoMoFinanceTaxId"])
                        {
                            writeLog("This is MoMoFinance.");
                            totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ds.Tables[0].Rows[i]["REF1NAME"].ToString(), ds.Tables[0].Rows[i]["REF2NAME"].ToString(), "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                        "\" txnDate=" + "\"" +
                                         ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" + ds.Tables[0].Rows[i]["REF2NAME"].ToString() +
                                      "\" ref3Name=" + "\"" + "" + string.Empty +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["AeonMapTaxId"].ToString())
                        {
                            smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref1Name, ref2Name, "", "Ref", ref1Value, ref2Value, "", txnID, double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                      REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" +
                                      string.Empty + "\" ref4Name=" + "\"" +
                                      string.Empty + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" +
                                      agentFee + "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["SkynetTaxId"])
                        {
                            PopulateSkyNetTransaction(sb, ds, i, REFID2, NRC, expirye, imgURL, total.ToString(), agentName, smsMsg, taxID, amount.ToString(), smsH, maptaxID,
                                biller, ref1Name, ref1Value, ref2Value, txnID.ToString(), serviceFee, agentFee, REFID1, REFID3, ref4Value, REFID1Name, null, ref3Name, ref4Name, ref3Value);
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["myCanalTaxId"].ToString())
                        {
                            PopulatemyCanalTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee);
                        }

                        else if (maptaxID == ConfigurationManager.AppSettings["PayBillsTaxId"].ToString())
                        {
                            PopulatePayBillsTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["SMGFTaxId"].ToString())
                        {
                            PopulateSMGFTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["GrabRideTaxId"].ToString() || maptaxID == ConfigurationManager.AppSettings["GrabFoodTaxId"].ToString())
                        {
                            PopulateGrabRideTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee);
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["ShweStreamTaxId"].ToString())
                        {
                            PopulateShweStreamTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee);
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["OkDollarCashInTaxId"].ToString())
                        {
                            PopulateOKDollarCashInTransaction(sb,
                                ds,
                                i,
                                total,
                                agentName,
                                taxID,
                                txnID.ToString(),
                                serviceFee,
                                branchCode,
                                REFID1,
                                REFID2,
                                REFID3,
                                ref4Value,
                                REFID1Name,
                                REFID3Name,
                                imgURL,
                                smsH,
                                smsMsg,
                                agentFee,
                                agentLogo,
                                ref5Value);
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["OnePayTaxId"].ToString())
                        {
                            PopulateOnePayTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["SayaTaxId"].ToString())
                        {
                            _trasactionManager.PopulateSayaTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }
                        else if (maptaxID == ConfigurationManager.AppSettings["AyaPayCashInTaxId"].ToString())
                        {
                            _trasactionManager.PopulateAyaPayCashInTransaction(sb, ds, i, amount, total,
                                agentName, taxID, biller, txnID.ToString(), serviceFee,
                                branchCode, REFID1, REFID2, REFID3, ref4Value, REFID1Name,
                                REFID3Name, imgURL, smsH, smsMsg, agentFee, agentLogo, ref5Value);
                        }
                        else if (maptaxID != "0000000000019")
                        {
                            if (ref3Value == "Airtime")
                            {
                                smsMsg = string.Empty;
                            }
                            else if (maptaxID == ConfigurationManager.AppSettings["MotherFinanceTaxID"].ToString())
                            {
                                int am = (int)double.Parse(amount);
                                int totalAmt = (int)double.Parse(total.ToString());
                                smsMsg = smsH.getMessageBiller(agentName, maptaxID, biller, ref1Name, ref2Name,
                                    ref3Name, ref4Name, ref1Value, ref2Value, ref3Value, ref4Value + "|" + txnID, am.ToString() + ".00", serviceFee, totalAmt.ToString() + ".00", branchCode);
                            }

                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      HttpUtility.HtmlEncode(ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString()) + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      HttpUtility.HtmlEncode(REFID1) + "\" ref2=" + "\"" + HttpUtility.HtmlEncode(REFID2) + "\" ref3=" + "\"" +
                                      HttpUtility.HtmlEncode(REFID3) + "\" ref4=" + "\"" + HttpUtility.HtmlEncode(ref4Value) + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      REFID1Name + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name +
                                      "\" ref4Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");
                        }


                        else
                        {
                            sb.Append("<Txn txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() +
                                      "\" txnDate=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                      HttpUtility.HtmlEncode(ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString()) + "\" txnAmount=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" + REFID2 +
                                      "\" ref3=" + "\"" +
                                      NRC + "\" ref4=" + "\"" + NRC + " " + expirye + "\" ref5=" + "\"" +
                                      ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + "NRC" +
                                      "\" ref4Name=" + "\"" +
                                      "NRC/Expiry" + "\" ref5Name=" + "\"" +
                                      ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                      ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                      ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" +
                                      imgURL + "\" locLatitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                      ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee +
                                      "\" total=" + "\"" +
                                      total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg +
                                      "\"  TaxID=" + "\"" + taxID + "\" />");

                        }
                    }
                }
                sb.Append("</TxnSearchRes>");

                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in TxnListReq : " + ex.ToString());
            }
        }


        return string.Empty;
    }

    bool IsValidateTxnSearchReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out int txnperpage, out int pageno, out string messageID, out string agncode, out string fromdate, out string todate, out string billerid, out string fromamt, out string toamt, out string mobileno, out string txnid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agncode = string.Empty;
        txnperpage = 0;
        pageno = 0;
        fromdate = string.Empty;
        todate = string.Empty;
        billerid = string.Empty;
        fromamt = string.Empty;
        toamt = string.Empty;
        mobileno = string.Empty;
        txnid = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("TxnPerPage"))
        {
            try
            {
                txnperpage = Convert.ToInt16(ht["TxnPerPage"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <TxnPerPage> Tag");
            return false;
        }

        if (ht.ContainsKey("PageNo"))
        {
            try
            {
                pageno = Convert.ToInt16(ht["PageNo"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <PageNo> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("FromDate"))
        {
            fromdate = ht["FromDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <FromDate> Tag");
            return false;
        }
        if (ht.ContainsKey("ToDate"))
        {
            todate = ht["ToDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <ToDate> Tag");
            return false;
        }
        if (ht.ContainsKey("BillerID"))
        {
            billerid = ht["BillerID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <BillerID> Tag");
            return false;
        }
        if (ht.ContainsKey("FromAmount"))
        {
            fromamt = ht["FromAmount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <FromAmount> Tag");
            return false;
        }
        if (ht.ContainsKey("ToAmount"))
        {
            toamt = ht["ToAmount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <ToAmount> Tag");
            return false;
        }
        if (ht.ContainsKey("MobileNo"))
        {
            mobileno = ht["MobileNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MobileNo> Tag");
            return false;
        }
        if (ht.ContainsKey("TxnID"))
        {
            txnid = ht["TxnID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <TxnID> Tag");
            return false;
        }

        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || txnperpage < 1 || pageno < 1 || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                agncode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }


    #endregion

    #region 1Stop's Topup List Tz 07-Sep-2015

    public string TopupListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        int txnperpage = 0, pageno = 0;
        string agentid = string.Empty;
        string agentuseruniqueid = string.Empty;
        var agentCode = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateTopupHistoryListReq(ht, out code, out desp, out version, out ts, out email, out password, out txnperpage, out pageno, out messageID, out agentid, out agentCode, out agentuseruniqueid))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;

        if (_agentWCF.getTopupHistoryList(pageno, txnperpage, agentid, agentuseruniqueid, out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<TopupListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" totalAmount=\"" + ds.Tables[1].Rows[0][1].ToString() + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string imgURL = string.Empty;
                        string smsmsg = string.Empty;
                        string payercode = string.Empty;
                        string payername = string.Empty;
                        try
                        {
                            string biller = GetBillerName(ds.Tables[0].Rows[i]["PAN"].ToString());
                            imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + biller + ".png";
                            if (ds.Tables[0].Rows[i]["PAN"].ToString() == "MercyCorps")
                            {
                                smsmsg = getMessageBillerMercyCrops(ds.Tables[0].Rows[i]["AGENTNAME"].ToString(), "", "Mercy-Corps Redeem", "Digital Code", "Partner Code", "", "Ref", ds.Tables[0].Rows[i]["APPROVALCODE"].ToString(), ds.Tables[0].Rows[i]["AGENTCODE"].ToString(), "", ds.Tables[0].Rows[i]["TRANREF"].ToString(),
                                     ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString(), ds.Tables[0].Rows[i]["TOPUPFEE"].ToString(), (double.Parse(ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString()) + double.Parse(ds.Tables[0].Rows[i]["TOPUPFEE"].ToString())).ToString("#,##0.00"), branchCode);
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                        }

                        if ((ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["pan"].ToString().Trim()) || (ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["zalaPan"].ToString()) || (ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["PayBillsPayment"].ToString()))
                        {
                            payercode = (ds.Tables[0].Rows[i]["REF1"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["REF1"].ToString());
                            payername = (ds.Tables[0].Rows[i]["PAYERNAME"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["PAYERNAME"].ToString());
                        }
                        else
                        {
                            payercode = (ds.Tables[0].Rows[i]["INVOICENO"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["INVOICENO"].ToString());
                            payername = (ds.Tables[0].Rows[i]["RESPCODE"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["RESPCODE"].ToString());
                        }

                        sb.Append("<Topup partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AGENTCODE"].ToString() + "\" partnerName=" + "\"" +
                        ds.Tables[0].Rows[i]["AGENTNAME"].ToString() + "\" pan=" + "\"" +
                        ds.Tables[0].Rows[i]["PAN"].ToString() + "\" invoiceNo=" + "\"" +
                        payercode + "\" responseCode=" + "\"" +
                        payername + "\" approvalCode=" + "\"" +
                        ds.Tables[0].Rows[i]["APPROVALCODE"].ToString() + "\" txnRef=" + "\"" +
                        ds.Tables[0].Rows[i]["TRANREF"].ToString() + "\" txnDateTime=" + "\"" +
                        ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" amount=" + "\"" +
                        ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString() + "\" fee=" + "\"" +
                        ds.Tables[0].Rows[i]["TOPUPFEE"].ToString() + "\" status=" + "\"" +
                        ds.Tables[0].Rows[i]["TOPUPSTATUS"].ToString() + "\" topupDateTime=" + "\"" +

                        ds.Tables[0].Rows[i]["TOPUPDATE"].ToString() + "\" billerLogo=" + "\"" +
                        imgURL
                        + "\" USERDEFINED1=" + "\"" + ds.Tables[0].Rows[i]["USERDEFINED1"].ToString()
                        + "\" USERDEFINED2=" + "\"" + ds.Tables[0].Rows[i]["USERDEFINED2"].ToString()
                        + "\" USERDEFINED3=" + "\"" + ds.Tables[0].Rows[i]["USERDEFINED3"].ToString()
                        + "\" Note=" + "\"" + ds.Tables[0].Rows[i]["REF2"].ToString()
                        + "\" PaymentType=" + "\"" + ds.Tables[0].Rows[i]["PAYMENTTYPE"].ToString()
                        + "\" SMS=" + "\"" + smsmsg
                        + "\" />");
                    }
                }
                sb.Append("</TopupListRes>");
                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in RopupListListReq : " + ex.ToString());
            }
        }


        return string.Empty;
    }

    public string AcceptenceListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        int txnperpage = 0, pageno = 0;
        string agentCode = string.Empty;
        string agentuseruniqueid = string.Empty;
        var agentId = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateTopupHistoryListReq(ht, out code, out desp, out version, out ts, out email, out password, out txnperpage, out pageno, out messageID, out agentId, out agentCode, out agentuseruniqueid))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;

        if (_agentWCF.getMerchantTxnList(pageno, txnperpage, agentCode, email, out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<AcceptenceListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" totalAmount=\"" + ds.Tables[1].Rows[0][1].ToString()
                    + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (var i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        var imgURL = string.Empty;
                        var smsmsg = string.Empty;
                        string merchant = string.Empty;
                        string paymentCode = string.Empty;
                        try
                        {
                            SMSHelper smsH = new SMSHelper();
                            var amount = ds.Tables[0].Rows[i]["TransactionAmount"].ToString();
                            smsmsg = smsH.GetMerchantMessage(ds.Tables[0].Rows[i]["MerchantTransactionId"].ToString().ToString(), ds.Tables[0].Rows[i]["AgentName"].ToString(), string.Empty, ds.Tables[0].Rows[i]["PaymentType"].ToString(), "PaymentType", "PaymentCode", string.Empty, string.Empty, ds.Tables[0].Rows[i]["PaymentType"].ToString(), ds.Tables[0].Rows[i]["PaymentCode"].ToString(), string.Empty, string.Empty, Convert.ToDouble(amount).ToString(), branchCode);

                            merchant = ds.Tables[0].Rows[i]["PaymentType"].ToString();
                            if (merchant == "MSP")
                            {
                                paymentCode = "\" paymentCode = \"" + ds.Tables[0].Rows[i]["PaymentCode"].ToString();
                            }
                            if (merchant == "A+ Wallet")
                            {
                                imgURL = ConfigurationManager.AppSettings["MerchantLogoUrlPath"].ToString() + "APlus.png";
                            }
                            else
                            {
                                imgURL = ConfigurationManager.AppSettings["MerchantLogoUrlPath"].ToString() + merchant + ".png";
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                        }
                        if (ds.Tables[0].Rows[i]["PaymentMode"].ToString() == "CARD")
                        {
                            var transInfo = ds.Tables[0].Rows[i]["PaymentCode"].ToString().Split(';');
                            string cardInfo = "";
                            if (transInfo.Count() > 2)
                            {
                                cardInfo = " cardNo=\"" + transInfo[0] + "\"" + " traceNo=\"" + transInfo[1] + "\"" + " batchNo=\"" + transInfo[2] + "\"";
                            }

                            sb.Append("<Acceptence partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AgentCode"].ToString() + "\" partnerName=" + "\"" +
                            ds.Tables[0].Rows[i]["AgentName"].ToString() + "\" paymentType=" + "\"" +
                            ds.Tables[0].Rows[i]["PaymentTypeDescription"].ToString() + paymentCode + "\" txnRef=" + "\"" +
                            ds.Tables[0].Rows[i]["MerchantTransactionId"].ToString() + "\" txnDateTime=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionDateTime"].ToString() + "\" amount=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionAmount"].ToString() + "\" DiscountFee=" + "\"" +
                            ds.Tables[0].Rows[i]["MerchantFee"].ToString() + "\" status=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionStatus"].ToString() + "\" mobileNumber=" + "\"" +
                            ds.Tables[0].Rows[i]["MobileNumber"].ToString() + "\" merchantLogo=" + "\"" +
                            imgURL + "\" SMS=" + "\"" + smsmsg + "\""
                            + " isVoidable=\"" + ds.Tables[0].Rows[i]["IsVoidable"] + "\" "
                            + " paymentMode=\"" + ds.Tables[0].Rows[i]["PaymentMode"] + "\" "
                            + " entryMode=\"" + Utils.getEntryMode(ds.Tables[0].Rows[i]["EntryMode"] + "") + "\" "
                            + " approvalCode=\"" + ds.Tables[0].Rows[i]["ApprovalCode"] + "\" "
                            + " transactionRefNo=\"" + ds.Tables[0].Rows[i]["TransactionRefNo"] + "\" "
                            + cardInfo
                            + " />");
                        }
                        else
                        {
                            sb.Append("<Acceptence partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AgentCode"].ToString() + "\" partnerName=" + "\"" +
                            ds.Tables[0].Rows[i]["AgentName"].ToString() + "\" paymentType=" + "\"" +
                            ds.Tables[0].Rows[i]["PaymentTypeDescription"].ToString() + paymentCode + "\" txnRef=" + "\"" +
                            ds.Tables[0].Rows[i]["MerchantTransactionId"].ToString() + "\" txnDateTime=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionDateTime"].ToString() + "\" amount=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionAmount"].ToString() + "\" DiscountFee=" + "\"" +
                            ds.Tables[0].Rows[i]["MerchantFee"].ToString() + "\" status=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionStatus"].ToString() + "\" mobileNumber=" + "\"" +
                            ds.Tables[0].Rows[i]["MobileNumber"].ToString() + "\" merchantLogo=" + "\"" +
                            imgURL + "\" SMS=" + "\"" + smsmsg + "\" isVoidable=\"" + ds.Tables[0].Rows[i]["IsVoidable"] + "\""
                            + " paymentMode=\"" + ds.Tables[0].Rows[i]["PaymentMode"] + "\" "
                            + " />");
                        }

                    }
                }

                sb.Append("</AcceptenceListRes>");
                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in AcceptenceListRes : " + ex.ToString());
            }
        }

        return string.Empty;
    }

    public string AcceptenceListReqV2(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        int txnperpage = 0, pageno = 0;
        string agentCode = string.Empty;
        string agentuseruniqueid = string.Empty;
        var agentId = string.Empty;
        string smsMsg = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateTopupHistoryListReq(ht, out code, out desp, out version, out ts, out email, out password, out txnperpage, out pageno, out messageID, out agentId, out agentCode, out agentuseruniqueid))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;

        if (_agentWCF.getMerchantTxnListV2(pageno, txnperpage, agentCode, email, out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<AcceptenceListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" totalAmount=\"" + ds.Tables[1].Rows[0][1].ToString()
                    + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (var i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        var imgURL = string.Empty;
                        var smsmsg = string.Empty;
                        string merchant = string.Empty;
                        string paymentCode = string.Empty;
                        try
                        {
                            SMSHelper smsH = new SMSHelper();
                            var amount = ds.Tables[0].Rows[i]["TransactionAmount"].ToString();
                            smsmsg = smsH.GetMerchantMessage(ds.Tables[0].Rows[i]["MerchantTransactionId"].ToString().ToString(), ds.Tables[0].Rows[i]["AgentName"].ToString(), string.Empty, ds.Tables[0].Rows[i]["PaymentType"].ToString(), "PaymentType", "PaymentCode", string.Empty, string.Empty, ds.Tables[0].Rows[i]["PaymentType"].ToString(), ds.Tables[0].Rows[i]["PaymentCode"].ToString(), string.Empty, string.Empty, Convert.ToDouble(amount).ToString(), branchCode);

                            merchant = ds.Tables[0].Rows[i]["PaymentType"].ToString();
                            if (merchant == "MSP")
                            {
                                paymentCode = "\" paymentCode = \"" + ds.Tables[0].Rows[i]["PaymentCode"].ToString();
                            }
                            if (merchant == "A+ Wallet")
                            {
                                imgURL = ConfigurationManager.AppSettings["MerchantLogoUrlPath"].ToString() + "APlus.png";
                            }
                            else
                            {
                                imgURL = ConfigurationManager.AppSettings["MerchantLogoUrlPath"].ToString() + merchant + ".png";
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                        }
                        var transaction = ds.Tables[0].Rows[i];
                        if (ds.Tables[0].Rows[i]["PaymentMode"].ToString() == "CARD")
                        {

                            var transInfo = transaction["PaymentCode"].ToString().Split(';');
                            string cardInfo = "";
                            if (transInfo.Count() > 2)
                            {
                                cardInfo = " cardNo=\"" + transInfo[0] + "\"" + " traceNo=\"" + transaction["TraceNo"].ToString() + "\"" + " batchNo=\"" + transInfo[2] + "\"";
                            }

                            sb.Append("<Acceptence partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AgentCode"].ToString() + "\" partnerName=" + "\"" +
                            transaction["AgentName"].ToString() + "\" paymentType=" + "\"" +
                            transaction["PaymentTypeDescription"].ToString() + paymentCode + "\" txnRef=" + "\"" +
                            transaction["MerchantTransactionId"].ToString() + "\" txnDateTime=" + "\"" +
                            transaction["TransactionDateTime"].ToString() + "\" amount=" + "\"" +
                            transaction["TransactionAmount"].ToString() + "\" DiscountFee=" + "\"" +
                            transaction["MerchantFee"].ToString() + "\" status=" + "\"" +
                            transaction["TransactionStatus"].ToString() + "\" merchantLogo=" + "\"" +
                            imgURL + "\" SMS=" + "\"" + smsmsg + "\""
                            + " isVoidable=\"" + ds.Tables[0].Rows[i]["IsVoidable"] + "\" "
                            + " paymentMode=\"" + ds.Tables[0].Rows[i]["PaymentMode"] + "\" "
                            + " entryMode=\"" + Utils.getEntryMode(ds.Tables[0].Rows[i]["EntryMode"] + "") + "\" "
                            + " approvalCode=\"" + ds.Tables[0].Rows[i]["ApprovalCode"] + "\" "
                            + " transactionRefNo=\"" + ds.Tables[0].Rows[i]["TransactionRefNo"] + "\" "
                            + cardInfo
                            + " tID=\"" + ds.Tables[0].Rows[i]["CardTerminalId"] + "\" "
                            + " mID=\"" + ds.Tables[0].Rows[i]["MerchantId"] + "\" "
                            + " />");
                        }
                        else
                        {
                            sb.Append("<Acceptence partnerCode=" + "\"" + transaction["AgentCode"].ToString() + "\" partnerName=" + "\"" +
                            transaction["AgentName"].ToString() + "\" paymentType=" + "\"" +
                            transaction["PaymentTypeDescription"].ToString() + paymentCode + "\" txnRef=" + "\"" +
                            transaction["MerchantTransactionId"].ToString() + "\" txnDateTime=" + "\"" +
                            transaction["TransactionDateTime"].ToString() + "\" amount=" + "\"" +
                            transaction["TransactionAmount"].ToString() + "\" DiscountFee=" + "\"" +
                            transaction["MerchantFee"].ToString() + "\" status=" + "\"" +
                            transaction["TransactionStatus"].ToString() + "\" mobileNumber=" + "\"" +
                            transaction["MobileNumber"].ToString() + "\" merchantLogo=" + "\"" +
                            imgURL + "\" SMS=" + "\"" + smsmsg + "\" isVoidable=\"" + ds.Tables[0].Rows[i]["IsVoidable"] + "\""
                            + " paymentMode=\"" + ds.Tables[0].Rows[i]["PaymentMode"] + "\" "
                            + " />");
                        }

                    }
                }

                sb.Append("</AcceptenceListRes>");
                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in AcceptenceListRes : " + ex.ToString());
            }
        }

        return string.Empty;
    }

    bool IsValidateTopupHistoryListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out int txnperpage, out int pageno, out string messageID, out string agnid, out string agentCode, out string agnuseruniqueid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        txnperpage = 0;
        pageno = 0;
        agnid = string.Empty;
        agnuseruniqueid = string.Empty;
        agentCode = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("TxnPerPage"))
        {
            try
            {
                txnperpage = Convert.ToInt16(ht["TxnPerPage"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <TxnPerPage> Tag");
            return false;
        }

        if (ht.ContainsKey("PageNo"))
        {
            try
            {
                pageno = Convert.ToInt16(ht["PageNo"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <PageNo> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || txnperpage < 1 || pageno < 1 || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                agentCode = ds.Tables[0].Rows[0]["AGENTCODE"].ToString();
                agnid = ds.Tables[0].Rows[0]["AGENTID"].ToString();
                agnuseruniqueid = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERUNIQUEID"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }

    #endregion

    #region Fees list request tz 09-Sep-2015
    public string FeeListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string agnid = string.Empty;

        if (!IsValidateFeeListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agnid))
        {
            return Utils.GetErrorResponse(code, desp);
        }
        string errmsg = string.Empty;
        DataSet ds = null;

        if (_agentWCF.getFeeList(agnid, out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<FeeListRes  ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\"  timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string imgURL = string.Empty;
                        string billerid = string.Empty;
                        try
                        {
                            billerid = ds.Tables[0].Rows[i]["billerid"].ToString();
                            imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + billerid + ".png";
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                        }



                        //,f.agentid,f.agentflatfee,f.agentpercentfee,f.serviceflatfee,f.servicepercentfee,f.onestopflatfee,f.onestoppercentfee,f.[status]
                        string serviceflatfee = string.Empty;
                        string servicepercentfee = string.Empty;
                        string agentflatfee = string.Empty;
                        string agentpercentfee = string.Empty;
                        string onestoppercentfee = string.Empty;
                        string onestopflatfee = string.Empty;
                        string customerfee = string.Empty;
                        string comission = string.Empty;
                        string onestopfee = string.Empty;
                        string earning = string.Empty;

                        Double intserviceflat, intservicepercent, intagentflat, intagentpercent, intonestopflat, intonestoppercent;
                        Double totalernpercentfee, totalearnflatfee;

                        intserviceflat = Double.Parse(ds.Tables[0].Rows[i]["serviceflatfee"].ToString());
                        intservicepercent = Double.Parse(ds.Tables[0].Rows[i]["servicepercentfee"].ToString());
                        intagentflat = Double.Parse(ds.Tables[0].Rows[i]["agentflatfee"].ToString());
                        intagentpercent = Double.Parse(ds.Tables[0].Rows[i]["agentpercentfee"].ToString());
                        intonestopflat = Double.Parse(ds.Tables[0].Rows[i]["onestopflatfee"].ToString());
                        intonestoppercent = Double.Parse(ds.Tables[0].Rows[i]["onestoppercentfee"].ToString());

                        serviceflatfee = ds.Tables[0].Rows[i]["serviceflatfee"].ToString();
                        servicepercentfee = ds.Tables[0].Rows[i]["servicepercentfee"].ToString();
                        agentflatfee = ds.Tables[0].Rows[i]["agentflatfee"].ToString();
                        agentpercentfee = ds.Tables[0].Rows[i]["agentpercentfee"].ToString();
                        onestopflatfee = ds.Tables[0].Rows[i]["onestopflatfee"].ToString();
                        onestoppercentfee = ds.Tables[0].Rows[i]["onestoppercentfee"].ToString();

                        totalearnflatfee = intserviceflat + intagentflat - intonestopflat;
                        totalernpercentfee = intservicepercent + intagentpercent - intonestoppercent;

                        customerfee = (Double.Parse(serviceflatfee) > 0 && Double.Parse(servicepercentfee) > 0) ? Double.Parse(servicepercentfee).ToString("#,##0.00") + "% + " + Double.Parse(serviceflatfee).ToString("#,##0") : (Double.Parse(servicepercentfee) > 0) ? Double.Parse(servicepercentfee).ToString("#,##0.00") + "%" : (Double.Parse(serviceflatfee) > 0) ? Double.Parse(serviceflatfee).ToString("#,##0") : "0";
                        comission = (Double.Parse(agentpercentfee) > 0 && Double.Parse(agentflatfee) > 0) ? Double.Parse(agentpercentfee).ToString("#,##0.00") + "% + " + Double.Parse(agentflatfee).ToString("#,##0") : (Double.Parse(agentpercentfee) > 0) ? Double.Parse(agentpercentfee).ToString("#,##0.00") + "%" : (Double.Parse(agentflatfee) > 0) ? Double.Parse(agentflatfee).ToString("#,##0") : "0";
                        onestopfee = (Double.Parse(onestoppercentfee) > 0 && Double.Parse(onestopflatfee) > 0) ? Double.Parse(onestoppercentfee).ToString("#,##0.00") + "% + " + Double.Parse(onestopflatfee).ToString("#,##0") : (Double.Parse(onestoppercentfee) > 0) ? Double.Parse(onestoppercentfee).ToString("#,##0.00") + "%" : (Double.Parse(onestopflatfee) > 0) ? Double.Parse(onestopflatfee).ToString("#,##0") : "0";
                        earning = (totalernpercentfee > 0 && totalearnflatfee > 0) ? totalernpercentfee.ToString("#,##0.00") + "% +" + totalearnflatfee.ToString("#,##0") : (totalernpercentfee > 0) ? totalernpercentfee.ToString("#,##0.00") + "%" : (totalearnflatfee > 0) ? totalearnflatfee.ToString("#,##0") : "0";

                        string biller663 = ConfigurationManager.AppSettings["663Biller"].ToString();
                        Hashtable ht663Biller = Utils.getBillerIDHashTable(biller663);
                        if (ht663Biller.ContainsKey(billerid))
                        {
                            sb.Append("<Fee billerName=" + "\"" + ds.Tables[0].Rows[i]["companyname"].ToString() + "\" customerFee=" + "\"" +
                           customerfee + "\" commission=" + "\"" +
                           comission + "\" onestopFee=" + "\"" +
                          onestopfee + "\" earning=" + "\"" + earning + "\" billerId=" + "\"" + billerid + "\" isNext=" + "\"" + "Y" + "\"  />");
                        }
                        else
                        {
                            sb.Append("<Fee billerName=" + "\"" + ds.Tables[0].Rows[i]["companyname"].ToString() + "\" customerFee=" + "\"" +
                                customerfee + "\" commission=" + "\"" +
                                comission + "\" onestopFee=" + "\"" +
                               onestopfee + "\" earning=" + "\"" + earning + "\" billerId=" + "\"" + billerid + "\" isNext=" + "\"" + "N" + "\"  />");
                        }
                    }
                }
                sb.Append("</FeeListRes>");
                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in FeeListListReq : " + ex.ToString());
            }

        }
        return string.Empty;
    }



    bool IsValidateFeeListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string agnid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agnid = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                agnid = ds.Tables[0].Rows[0]["AGENTID"].ToString();
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }


        return true;
    }

    public string SSTFeeListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        DataSet ds;
        string errMsg;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string agnid = string.Empty;
        this.writeLog("LoginReq2");
        StringBuilder sb = new StringBuilder();
        if (!IsValidateSSTFeeListReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agnid, out billerid)) return Utils.GetErrorResponse(code, desp);

        if (_agentWCF.get663FeeList(billerid, out ds, out errMsg))
        {
            try
            {
                sb.Append(String.Format("<SSTFeeListRes ResCode=\"{0}\" ResDesc=\"{1}\" version=\"{2}\" timeStamp=\"{3}\" messageID=\"{4}\">", "00", "success", "1.0", DateTime.Now.ToString("yyyyMMddhhmmssffff"), messageID));

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string customerFee = string.Empty;
                        string commission = string.Empty;
                        string oneStopFee = string.Empty;
                        string earning = string.Empty;
                        double oneStopfees;
                        Double dblMinAmt, dblMaxAmt, dblTxnFee, dblServiceCharge, dblAgnComPercent, dblSuperAgentComPercent;
                        if (billerid == ConfigurationManager.AppSettings["663CashOutBiller"].ToString())
                        {
                            dblMinAmt = Double.Parse(ds.Tables[0].Rows[i]["MINAMOUNT"].ToString());
                            dblMaxAmt = Double.Parse(ds.Tables[0].Rows[i]["MAXAMOUNT"].ToString());
                            dblTxnFee = Double.Parse(ds.Tables[0].Rows[i]["TRANSACTIONFEES"].ToString());
                            dblServiceCharge = 0;
                            dblAgnComPercent = Double.Parse(ds.Tables[0].Rows[i]["AGENTCOMMISSIONPERCENT"].ToString());
                            dblSuperAgentComPercent = Double.Parse(ds.Tables[0].Rows[i]["SUPERAGENTCOMMISSIONPERCENT"].ToString());

                            customerFee = (dblServiceCharge).ToString("#,##0");
                            commission = ((dblTxnFee * dblAgnComPercent) / 100).ToString("#,##0");
                            oneStopfees = 0;
                            oneStopFee = oneStopfees.ToString("#,##0");
                            earning = ((dblTxnFee * dblAgnComPercent) / 100).ToString("#,##0");
                        }
                        else
                        {
                            dblMinAmt = Double.Parse(ds.Tables[0].Rows[i]["MINAMOUNT"].ToString());
                            dblMaxAmt = Double.Parse(ds.Tables[0].Rows[i]["MAXAMOUNT"].ToString());
                            dblTxnFee = Double.Parse(ds.Tables[0].Rows[i]["TRANSACTIONFEES"].ToString());
                            dblServiceCharge = Double.Parse(ds.Tables[0].Rows[i]["SERVICECHARGE"].ToString());
                            dblAgnComPercent = Double.Parse(ds.Tables[0].Rows[i]["AGENTCOMMISSIONPERCENT"].ToString());
                            dblSuperAgentComPercent = Double.Parse(ds.Tables[0].Rows[i]["SUPERAGENTCOMMISSIONPERCENT"].ToString());

                            customerFee = (dblTxnFee + dblServiceCharge).ToString("#,##0");
                            commission = "0";
                            oneStopfees = (dblTxnFee + dblServiceCharge) - ((dblTxnFee * dblAgnComPercent) / 100);
                            oneStopFee = oneStopfees.ToString("#,##0");
                            earning = ((dblTxnFee * dblAgnComPercent) / 100).ToString("#,##0");
                        }

                        sb.Append(string.Format("<Fee minAmount=\"{0}\" maxAmount=\"{1}\" customerFee=\"{2}\" commission=\"{3}\" onestopFee=\"{4}\" earning=\"{5}\" />", dblMinAmt.ToString("#,##0"), dblMaxAmt.ToString("#,##0"), customerFee, commission, oneStopFee, earning));
                    }
                }
                sb.Append("</SSTFeeListRes>");

            }
            catch (Exception ex)
            {
                writeLog("exception Occur when Get 663 fees:" + ex.ToString());
            }
        }
        return sb.ToString();
    }
    bool IsValidateSSTFeeListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string agnid, out string billerid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agnid = string.Empty;
        billerid = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("BillerID"))
        {
            billerid = ht["BillerID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <BillerID> Tag");
            return false;
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(billerid))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                agnid = ds.Tables[0].Rows[0]["AGENTID"].ToString();
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }


        return true;
    }


    #endregion

    #region MPU Service Fees Request

    public string ServiceFeeReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string agentCode = string.Empty;
        string agnid = string.Empty;
        string baseamt = string.Empty;
        string paytype = string.Empty;
        double agentfee = 0;
        int partnerProfileId = 0;

        if (!IsValidateServiceFeeReq(ht, out code, out desp, out version, out ts, out messageID, out agnid, out baseamt, out paytype, out partnerProfileId))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        if (Is_iOS_MPU_ReloadPartner(paytype, ts, messageID))
        {
            writeLog("Reload Type " + paytype + " is not supported in iOS.");
            code = "06";
            desp = "Not Supported";

            return Utils.GetErrorResponse(code, desp);
        }

        if (IsInvalidReloadPartner(paytype))
        {
            writeLog("Reload Type " + paytype + " is not supported.");
            code = "06";
            desp = "Not Supported";

            return Utils.GetErrorResponse(code, desp);
        }

        DataSet ds = null;
        string errmsg = string.Empty;

        try
        {
            DataTable dt = null;
            float percentFee = 0;
            double flatFee = 0;
            if (partnerProfileId == 0)
            {
                // Currently we use default Payment Profile Id as 1
                // Future, we must change these payment profile Id
                var no = ConfigurationManager.AppSettings["FeeProfileId"];
                if (!_agentWCF.getTopupServiceFeeByProfileId(Convert.ToInt16(no), out ds, out errmsg))
                {
                    // Error in get TopupServiceFee By ProfileId
                    writeLog("Error in getTopupServiceFeeByProfileId : " + errmsg);
                    return Utils.GetErrorString(version, "99", "System Error");

                }
                dt = ds.Tables[0];
                percentFee = 0;
                flatFee = 0;
                foreach (DataRow dr in dt.Rows)
                {
                    if (dr["Name"].ToString() == paytype)
                    {
                        percentFee = float.Parse(dr["ServiceFee"].ToString());
                        flatFee = double.Parse(dr["FlatFee"].ToString());
                        break;
                    }
                }
            }
            else
            {
                if (!_agentWCF.GetReloadPartnerFeeProfile(partnerProfileId, out ds, out errmsg))
                {
                    // Error in get TopupServiceFee By ProfileId
                    writeLog("Error in getTopupServiceFeeByProfileId : " + errmsg);
                    return Utils.GetErrorString(version, "99", "System Error");
                }
                dt = ds.Tables[0];
                percentFee = float.Parse(dt.Rows[0]["ServiceFee"].ToString());
                flatFee = double.Parse(dt.Rows[0]["FlatFee"].ToString());

            }


            log.Info("Payment Type : " + paytype + " Service Fee : " + percentFee.ToString() + " Flat Fee : " + flatFee.ToString());
            agentfee = Utils.getAgentFee(Double.Parse(baseamt), percentFee, flatFee);

            var sb = new StringBuilder();
            sb.Append("<ServiceFeeRes>");
            sb.Append("<Version>1.0</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResCode>" + code + "</ResCode>");
            sb.Append("<ResDesc>" + desp + "</ResDesc>");
            sb.Append("<BaseAmount>" + baseamt + "</BaseAmount>");
            sb.Append("<ServiceFee>" + agentfee + "</ServiceFee>");
            sb.Append("<TotalAmount>" + (double.Parse(baseamt) + agentfee) + "</TotalAmount>");
            sb.Append("</ServiceFeeRes>");

            return sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in CategoryAndBillerByAgentCodeReq : " + ex.ToString());
            return Utils.GetErrorString(version, "99", "System Error");
        }
    }

    bool IsInvalidReloadPartner(string reloadType)
    {
        var invalidReloadPartners = new string[] { "CB", "KBZ" };
        return invalidReloadPartners.Contains(reloadType.ToUpper());
    }

    bool Is_iOS_MPU_ReloadPartner(string reloadType, string timeStamp, string messageId)
    {
        var invalidReloadPartner = "MPU";
        //In iOS, timeStamp and MessageId are equal in Request, we use it to identify the iOS requests.
        return (reloadType.ToUpper() == invalidReloadPartner && timeStamp == messageId);
    }

    bool IsValidateServiceFeeReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageID, out string agnid, out string baseamt, out string paymenttype, out int partnerProfileId)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;

        messageID = string.Empty;
        agnid = string.Empty;
        baseamt = string.Empty;
        paymenttype = string.Empty;
        partnerProfileId = 0;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }
        if (ht.Contains("PaymentType"))
        {
            paymenttype = ht["PaymentType"].ToString();
        }
        if (ht.ContainsKey("BaseAmount"))
        {
            baseamt = ht["BaseAmount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Valadation : Missing BaseAmount <BaseAmount> Tag");
        }

        if (ht.ContainsKey("PartnerProfileId"))
        {
            partnerProfileId = Convert.ToInt32(ht["PartnerProfileId"].ToString());
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(baseamt))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;
    }
    #endregion

    #region Billers Service Fees Request
    // This is Billers Service Fee Request
    public string BillerServiceFeeReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string agentId = string.Empty;
        string baseamt = string.Empty;
        string taxId = string.Empty;
        double agentfee = 0;
        StringBuilder sb = new StringBuilder();
        if (!IsValidateBillerServiceFeeReq(ht, out code, out desp, out version, out ts, out messageID, out agentId, out baseamt, out taxId))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        DataSet ds = null;
        string errmsg = string.Empty;

        try
        {
            if (_agentWCF.getBillerFeeProfileByAgentId(agentId, out ds, out errmsg))
            {
                DataTable dt = ds.Tables[0];
                string feeProfileId = string.Empty;
                DataRow dr = dt.Rows[0];
                feeProfileId = dr["FeeProfileId"].ToString();
                writeLog(string.Format("FeeProfileId for AgentId {0} : {1}", feeProfileId, agentid));

                if (!_agentWCF.getBillerServiceFeeByProfileId(feeProfileId, taxId, out ds, out errmsg))
                {
                    // Error in get TopupServiceFee By ProfileId
                    writeLog("Error in getBillerServiceFeeByProfileId : " + errmsg);
                    return Utils.GetErrorString(version, "99", "System Error");
                }

                dt = ds.Tables[0];
                float percentFee = 0;
                double flatFee = 0;
                dr = dt.Rows[0];
                percentFee = float.Parse(dr["ServicePercentFee"].ToString());
                flatFee = double.Parse(dr["ServiceFlatFee"].ToString());

                log.Info("TaxId : " + taxId + " Service Fee : " + percentFee.ToString() + " Flat Fee : " + flatFee.ToString());
                agentfee = Utils.getFee(Double.Parse(baseamt), percentFee, flatFee);

                sb.Append("<BillerServiceFeeRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<MessageID>" + messageID + "</MessageID>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + desp + "</ResDesc>");
                sb.Append("<BaseAmount>" + baseamt + "</BaseAmount>");
                sb.Append("<ServiceFee>" + agentfee + "</ServiceFee>");
                sb.Append("<TotalAmount>" + (double.Parse(baseamt) + agentfee) + "</TotalAmount>");
                sb.Append("</BillerServiceFeeRes>");

                return sb.ToString();
            }

            writeLog(string.Format("Error in getBillerFeeProfileByAgentId: {0}", errmsg));
            return Utils.GetErrorString(version, "99", "System Error");


        }
        catch (Exception ex)
        {
            writeLog("Error in CategoryAndBillerByAgentCodeReq : " + ex.ToString());
            return Utils.GetErrorString(version, "99", "System Error");
        }
    }

    bool IsValidateBillerServiceFeeReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageID, out string agentId, out string baseamt, out string taxId)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;

        messageID = string.Empty;
        agentId = string.Empty;
        baseamt = string.Empty;
        taxId = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.Contains("TaxId"))
        {
            taxId = ht["TaxId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TaxId> Tag");
            return false;
        }
        if (ht.Contains("AgentId"))
        {
            agentId = ht["AgentId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentId> Tag");
            return false;
        }
        if (ht.ContainsKey("BaseAmount"))
        {
            baseamt = ht["BaseAmount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Valadation : Missing XML <BaseAmount> Tag");
            return false;
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(baseamt))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;
    }
    #endregion

    //Added By HNT 02-04-2015
    #region +++ Unpair Device +++
    public string UnpairDeviceReq(string reqXml)
    {

        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string errMsg = string.Empty;
        string messageid = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        StringBuilder sb = new StringBuilder();

        if (!IsValidateUnpairDeviceReq(ht, out code, out desp, out version, out ts, out email, out password))
        {
            writeLog("Error occur in Validate Unpaired Device.");
            return Utils.GetErrorResponse(code, desp);
        }

        if (ConfigurationManager.AppSettings["UnpairStatus"].ToString() == "Y")
        {
            if (_agentWCF.UnpairDevice(email, password, out errMsg))
            {
                code = "00";
                desp = "Success";
                sb.Append("<UnpairDeviceRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<MessageID>" + messageid + "</MessageID>");
                sb.Append("<Email>" + email + "</Email>");
                sb.Append("<Password>" + password + "</Password>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + desp + "</ResDesc>");
                sb.Append("</UnpairDeviceRes>");
                writeLog("Successful Device unpair.");
                return sb.ToString();
            }

            code = "12";
            desp = "Error in Unpaired.";
            return Utils.GetErrorResponse(code, desp);
        }


        #region New Unpair Feature by Myat Noe
        writeLog("Enter Mobile Loop");
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        bool result = bis.SendUnpairEmail(email);
        if (result) writeLog("Already sent email to 1Stop Team for Device Unpair");
        sb.Append("<Error>");
        sb.Append("<Version>1.0</Version>");
        sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
        sb.Append("<table>");
        sb.Append("<ResCode>06</ResCode>");
        sb.Append("<ResDesc>English\n---------\n" + ConfigurationManager.AppSettings["UnpairMesgEngVer"].ToString() + " \n " + ConfigurationManager.AppSettings["agentHotline"].ToString() + "\n\nZawgyi\n----------\n" + ConfigurationManager.AppSettings["UnpairMesgZawgyiVer"].ToString() + "\n" + ConfigurationManager.AppSettings["agentHotline"].ToString() + "\n\nUnicode\n----------\n" + ConfigurationManager.AppSettings["UnpairMesgUnicodeVer"].ToString() + "\n" + ConfigurationManager.AppSettings["agentHotline"].ToString() + "</ResDesc>");
        sb.Append("</table>");
        sb.Append("</Error>");
        writeLog("Error occur in Validate Unpaired Device.");
        return sb.ToString();

        #endregion


    }
    #endregion
    bool IsValidateResetPasswordReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        if (!_agentWCF.ResetPassword(email, out errmsg, out password))
        {
            code = "01";
            desp = "Ref Not Found";
            writeLog("Error in Authentication : " + errmsg);
            return false;
        }

        return true;
    }
    bool IsValidateUnpairDeviceReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            ts = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }
        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return true;
    }
    bool IsValidateTownshipListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out int batchperpage, out int pageno)
    {
        return IsValidateBatchListReq(ht, out code, out desp, out version, out ts, out email, out password, out batchperpage, out pageno);
    }

    public string TownshipListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        int batchPerpage = 0, pageno = 0;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateTownshipListReq(ht, out code, out desp, out version, out ts, out email, out password, out batchPerpage, out pageno))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.getTownshiplist(batchPerpage, pageno, out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<TownshipListRes version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" BatchPerPage=" + "\"" + batchPerpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        sb.Append("<Township TownshipCode=" + "\"" + ds.Tables[0].Rows[i]["TOWNSHIPCODE"].ToString() + "\"  TownshipName=" + "\"" + ds.Tables[0].Rows[i]["TOWNSHIPNAME"].ToString() + "\"  DistrictName=" + "\"" + ds.Tables[0].Rows[i]["DISTRICTNAME"].ToString() + "\"  StateDivision=" + "\"" + ds.Tables[0].Rows[i]["STATEDIVISION"].ToString() + "\" />");
                    }
                }
                sb.Append("</TownshipListRes>");
                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in TownshipListReq : " + ex.ToString());
            }
        }


        return string.Empty;
    }

    public Image byteArrayToImage(byte[] fileBytes)
    {
        using (MemoryStream fileStream = new MemoryStream(fileBytes))
        {
            return Image.FromStream(fileStream);
        }
    }

    public void byteArrayToImageFilebyMemoryStream(byte[] imageByte, string fileName)
    {
        var ms = new MemoryStream(imageByte);
        Image image = Image.FromStream(ms);
        if (!File.Exists(fileName))
        {
            writeLog("File Started to create : " + fileName);
            image.Save(fileName, System.Drawing.Imaging.ImageFormat.Png);
            writeLog("File Created OK");
        }
        else
        {
            writeLog("File Existed : " + fileName);
        }

    }

    #region 123 API calling req
    private string hashOneCashInqReq(string messageid, string agentCode, string Ref1, string requestedby)
    {
        ArrayList ar = new ArrayList();
        ar.Add(messageid);
        ar.Add(agentCode);
        ar.Add(Ref1);
        ar.Add(requestedby);
        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }
        string hashstr = generateHashValue(sb.ToString(), ConfigurationManager.AppSettings["OneCashSecretKey"].ToString());
        return hashstr;
    }

    private static string hashOneCashInqRes(string messageid, string ResCode, string ResDesc, string Ref1, string Ref2, string Amount, string ProductDesc)
    {
        ArrayList ar = new ArrayList();
        ar.Add(messageid);
        ar.Add(ResCode);
        ar.Add(ResDesc);
        ar.Add(Ref1);
        ar.Add(Ref2);
        ar.Add(Amount);
        ar.Add(ProductDesc);

        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }
        string hashstr = generateHashValue(sb.ToString(), ConfigurationManager.AppSettings["OneCashSecretKey"].ToString());
        return hashstr;
    }

    private string hashstrInquiry(string version, string timestamp, string agentcode, string password, string inquiry, string ref1, string ref2, string amount)
    {
        ArrayList ar = new ArrayList();
        ar.Add(version);
        ar.Add(timestamp);
        ar.Add(inquiry);
        ar.Add(agentcode);
        ar.Add(password);
        ar.Add(ref1);
        ar.Add(ref2);
        ar.Add(amount);
        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }
        writeLog("hashstrInquiry Signature : " + sb.ToString());
        string hashstr = generateHashValue(sb.ToString(), ConfigurationManager.AppSettings["123SecretKey"].ToString());
        return hashstr;
    }

    private string hashstrOneCashConfirmReq(string messageid, string agentCode, string Ref1, string Ref2, string amount, string confirmedby, string locLattitude, string locLongitude)
    {
        ArrayList ar = new ArrayList();
        ar.Add(messageid);
        ar.Add(agentCode);
        ar.Add(Ref1);
        ar.Add(Ref2);
        ar.Add(amount);
        ar.Add(confirmedby);
        ar.Add(locLattitude);
        ar.Add(locLongitude);
        ar.Sort();



        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }

        writeLog("hashstrOneCashConfirmReq Signature : " + sb.ToString());

        string hashstr = generateHashValue(sb.ToString(), ConfigurationManager.AppSettings["OneCashSecretKey"].ToString());
        return hashstr;
    }

    private string hashstrOneCashConfirmResCC(string messageid, string resCode, string resDesc)
    {
        ArrayList ar = new ArrayList();
        ar.Add(messageid);
        ar.Add(resCode);
        ar.Add(resDesc);
        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }


        writeLog("hashstrOneCashConfirmResCC Signature : " + sb.ToString());
        string hashstr = generateHashValue(sb.ToString(), ConfigurationManager.AppSettings["OneCashSecretKey"].ToString());
        return hashstr;
    }

    private string hashstrConfirm(string version, string timestamp, string agentcode, string password, string inquiry, string ref1, string ref2, string amount, string longi, string lacti)
    {
        ArrayList ar = new ArrayList();
        ar.Add(version);
        ar.Add(timestamp);
        ar.Add(agentcode);
        ar.Add(password);
        ar.Add(ref1);
        ar.Add(ref2);
        ar.Add(amount);
        ar.Add(longi);
        ar.Add(lacti);
        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }
        writeLog("hashstrConfirm Signature : " + sb.ToString());


        string hashstr = generateHashValue(sb.ToString(), ConfigurationManager.AppSettings["123SecretKey"].ToString());
        return hashstr;
    }


    public static string generateHashValue(string signatureString, string secretKey)
    {
        return getHMAC(signatureString, secretKey);
    }
    private static string getHMAC(string signatureString, string secretKey)
    {

        System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();

        byte[] keyByte = encoding.GetBytes(secretKey);

        HMACSHA1 hmac = new HMACSHA1(keyByte);


        byte[] messageBytes = encoding.GetBytes(signatureString);

        byte[] hashmessage = hmac.ComputeHash(messageBytes);

        return ByteArrayToHexString(hashmessage);

    }

    private static string ByteArrayToHexString(byte[] Bytes)
    {
        StringBuilder Result = new StringBuilder();
        string HexAlphabet = "0123456789ABCDEF";

        foreach (byte B in Bytes)
        {
            Result.Append(HexAlphabet[(int)(B >> 4)]);
            Result.Append(HexAlphabet[(int)(B & 0xF)]);
        }

        return Result.ToString();
    }
    #endregion

    #region 123Remit Single Source
    #region DivisionTownshionBranch
    public string DivisionListReq(string reqXml)
    {
        DevisionListReqData _meterDevisionReqData = new DevisionListReqData();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        DataSet DivisionDs = new DataSet();
        DivisionDs = null;
        string response = string.Empty;
        string errMsg = string.Empty;
        try
        {
            _meterDevisionReqData = IsValidateDevisionListReq(ht);

            if (_meterDevisionReqData.validateResult)
            {
                if (_agentWCF.GetDivisionTownshipBranchList(out DivisionDs, out errMsg))
                    return response = getDivisionBranchListResponse(DivisionDs, _meterDevisionReqData);
            }
            else
            {

                response = Utils.GetErrorResponse(_meterDevisionReqData.rescode, _meterDevisionReqData.resdesc);
                return response;
            }
        }
        catch (Exception ex)
        {
            response = Utils.GetErrorResponse("99", "System Error");

            writeLog("Exception error occur in DivisionListReq:" + ex.Message);
        }
        return response;
    }
    public string getDivisionBranchListResponse(DataSet meterDivisionDs, DevisionListReqData _meterDevisionReqData)
    {
        StringBuilder _meterDivisionListRes = new StringBuilder();
        try
        {
            _meterDivisionListRes.Append("<DivisionListRes>");
            _meterDivisionListRes.Append("<ResCode>00</ResCode>");
            _meterDivisionListRes.Append("<ResDesc>success</ResDesc>");
            _meterDivisionListRes.Append("<Version>" + _meterDevisionReqData.version + "</Version>");
            _meterDivisionListRes.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            _meterDivisionListRes.Append("<MessageID>" + _meterDevisionReqData.messageid + "</MessageID>");

            _meterDivisionListRes.Append("<Divisions>");
            if (meterDivisionDs.Tables[1].Rows.Count > 0)
            {
                for (int i = 0; i < meterDivisionDs.Tables[0].Rows.Count; i++)
                {
                    string divisionId = meterDivisionDs.Tables[0].Rows[i]["DIVISIONID"].ToString();
                    string divisionName = meterDivisionDs.Tables[0].Rows[i]["DIVISION"].ToString();
                    _meterDivisionListRes.Append("<Division>");
                    _meterDivisionListRes.Append("<DivisionID>" + divisionId + "</DivisionID>");
                    _meterDivisionListRes.Append("<DivisionName>" + divisionName + "</DivisionName>");
                    _meterDivisionListRes.Append("<Townships>");
                    for (int t = 0; t < meterDivisionDs.Tables[1].Rows.Count; t++)
                    {
                        if (meterDivisionDs.Tables[1].Rows[t]["DIVISIONID"].ToString() == divisionId)
                        {
                            string TownshipID = meterDivisionDs.Tables[1].Rows[t]["TOWNSHIPID"].ToString();
                            _meterDivisionListRes.Append("<Township>");
                            _meterDivisionListRes.Append("<TownshipCode>" + meterDivisionDs.Tables[1].Rows[t]["TOWNSHIPID"].ToString() + "</TownshipCode>");
                            _meterDivisionListRes.Append("<TownshipName>" + meterDivisionDs.Tables[1].Rows[t]["TOWNSHIP"].ToString() + "</TownshipName>");
                            _meterDivisionListRes.Append("<Branchs>");
                            for (int k = 0; k < meterDivisionDs.Tables[2].Rows.Count; k++)
                            {

                                if (meterDivisionDs.Tables[2].Rows[k]["TOWNSHIP"].ToString() == TownshipID)
                                {
                                    _meterDivisionListRes.Append("<Branch>");
                                    _meterDivisionListRes.Append("<BranchCode>" + meterDivisionDs.Tables[2].Rows[k]["AGENTBRANCHID"].ToString() + "</BranchCode>");
                                    _meterDivisionListRes.Append("<BranchName>" + meterDivisionDs.Tables[2].Rows[k]["AGENTBRANCHNAME"].ToString() + "</BranchName>");
                                    _meterDivisionListRes.Append("</Branch>");
                                }

                            }
                            _meterDivisionListRes.Append("</Branchs>");
                            _meterDivisionListRes.Append("</Township>");
                        }
                    }
                    _meterDivisionListRes.Append("</Townships>");
                    _meterDivisionListRes.Append("</Division>");

                }
            }
            _meterDivisionListRes.Append("</Divisions>");
            _meterDivisionListRes.Append("</DivisionListRes>");
        }
        catch (Exception ex)
        {
            writeLog("Exception Error occur in get StoreCard List:" + ex.Message.ToString());
        }
        return _meterDivisionListRes.ToString();

    }

    public string GetParamiGasDivisions(DataSet meterDivisionDs)
    {
        var sb = new StringBuilder();

        sb.Append("<Divisions>");
        if (meterDivisionDs.Tables[1].Rows.Count > 0)
        {
            for (int i = 0; i < meterDivisionDs.Tables[0].Rows.Count; i++)
            {
                string divisionId = meterDivisionDs.Tables[0].Rows[i]["DIVISIONID"].ToString();
                string divisionName = meterDivisionDs.Tables[0].Rows[i]["DIVISION"].ToString();
                sb.Append("<Division>");
                sb.Append("<DivisionID>" + divisionId + "</DivisionID>");
                sb.Append("<DivisionName>" + divisionName + "</DivisionName>");
                sb.Append("<Townships>");
                for (int t = 0; t < meterDivisionDs.Tables[1].Rows.Count; t++)
                {
                    if (meterDivisionDs.Tables[1].Rows[t]["DIVISIONID"].ToString() == divisionId)
                    {
                        sb.Append("<Township>");
                        sb.Append("<TownshipCode>" + meterDivisionDs.Tables[1].Rows[t]["TOWNSHIPID"].ToString() + "</TownshipCode>");
                        sb.Append("<TownshipName>" + meterDivisionDs.Tables[1].Rows[t]["TOWNSHIP"].ToString() + "</TownshipName>");
                        sb.Append("</Township>");
                    }
                }
                sb.Append("</Townships>");
                sb.Append("</Division>");
            }
        }
        sb.Append("</Divisions>");
        sb.Append("</ParamiGasInquiryRes>");
        return sb.ToString();
    }

    public DevisionListReqData IsValidateDevisionListReq(Hashtable ht)
    {
        DevisionListReqData DivisionListReq = new DevisionListReqData();


        DivisionListReq.validateResult = true;

        if (ht.ContainsKey("Version"))
        {
            DivisionListReq.version = ht["Version"].ToString();
        }
        else
        {
            DivisionListReq.rescode = "06";
            DivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            DivisionListReq.validateResult = false;
            return DivisionListReq;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            DivisionListReq.timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            DivisionListReq.rescode = "06";
            DivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            DivisionListReq.validateResult = false;
            return DivisionListReq;
        }
        if (ht.ContainsKey("Email"))
        {
            DivisionListReq.userid = ht["Email"].ToString();
        }
        else
        {
            DivisionListReq.rescode = "06";
            DivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            DivisionListReq.validateResult = false;
            return DivisionListReq;
        }

        if (ht.ContainsKey("Password"))
        {
            DivisionListReq.password = ht["Password"].ToString();
        }
        else
        {
            DivisionListReq.rescode = "06";
            DivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            DivisionListReq.validateResult = false;
            return DivisionListReq;
        }

        if (ht.ContainsKey("MessageID"))
        {
            DivisionListReq.messageid = ht["MessageID"].ToString();
        }
        else
        {
            DivisionListReq.rescode = "06";
            DivisionListReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            DivisionListReq.validateResult = false;
            return DivisionListReq;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(DivisionListReq.version) || String.IsNullOrEmpty(DivisionListReq.timeStamp) || String.IsNullOrEmpty(DivisionListReq.userid) || String.IsNullOrEmpty(DivisionListReq.password) || String.IsNullOrEmpty(DivisionListReq.messageid))//cardListReq.cardParPage < 1 || cardListReq.pageNo < 1 ||
        {
            DivisionListReq.rescode = "07";
            DivisionListReq.resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            DivisionListReq.validateResult = false;
            return DivisionListReq;
        }


        string code = string.Empty;
        string desp = string.Empty;

        DivisionListReq.validateResult = authentication(DivisionListReq.userid, DivisionListReq.password, out code, out desp);
        DivisionListReq.rescode = code;
        DivisionListReq.resdesc = desp;

        return DivisionListReq;

    }

    #endregion

    #region NotificationList
    public string NotificationListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        int notiPerpage = 0, pageno = 0;
        string notitype = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateNotificationistReq(ht, out code, out desp, out version, out ts, out email, out password, out notiPerpage, out notitype, out pageno))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.GetNotificationList(email, notitype, pageno, notiPerpage, out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();

                if (ds.Tables.Count > 1)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        sb.Append("<NotificationListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"  Total=" + "\"" + ds.Tables[0].Rows[0]["total"].ToString() + "\"  TotalAmount=" + "\"" + ds.Tables[0].Rows[0]["TotalAmount"].ToString() + "\"" + ">");


                        if (ds.Tables[1].Rows.Count > 0)
                        {
                            for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                            {
                                sb.Append("<Notification TransactionID=" + "\"" + ds.Tables[1].Rows[i]["TransactionID"].ToString() + "\" NotificationDate=" + "\"" + ds.Tables[1].Rows[i]["NotificationDate"].ToString() + "\"  NotificationAmount=" + "\"" + ds.Tables[1].Rows[i]["NotificationAmount"].ToString() + "\"  Status=" + "\"" + ds.Tables[1].Rows[i]["Status"].ToString() + "\" />");
                            }
                        }
                    }
                    else
                    {
                        sb.Append("<NotificationListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"  Total=" + "\"" + 0 + "\"  TotalAmount=" + "\"" + 0.00 + "\"" + ">");
                    }
                }
                else
                {
                    sb.Append("<NotificationListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"  Total=" + "\"" + 0 + "\"  TotalAmount=" + "\"" + 0.00 + "\"" + ">");
                }

                sb.Append("</NotificationListRes>");

                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in Notification " + ex.Message);
            }
        }

        return string.Empty;
    }
    bool IsValidateNotificationistReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out int notiperpage, out string notitype, out int pageno)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        notitype = string.Empty;
        notiperpage = 0;
        pageno = 0;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("NotiPerPage"))
        {
            notiperpage = Convert.ToInt32(ht["NotiPerPage"]);
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing BatchPerPage <BatchPerPage> Tag");
            return false;
        }
        if (ht.ContainsKey("NotiType"))
        {
            notitype = ht["NotiType"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing BatchPerPage <BatchPerPage> Tag");
            return false;
        }

        if (ht.ContainsKey("PageNo"))
        {
            pageno = Convert.ToInt32(ht["PageNo"]);
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing PageNo <PageNo> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || notiperpage < 1 || pageno < 1)
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
                this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }


        return true;
    }

    #endregion
    #endregion

    //Added By HNT 06-Apr-2015
    //start
    public bool IsValidateSMSAgainReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string password, out string agentuserid, out string messageid, out string reason)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        password = string.Empty;
        agentuserid = string.Empty;
        messageid = string.Empty;
        reason = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            agentuserid = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Reason"))
        {
            reason = ht["Reason"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Reason <Reason> Tag");
            return false;
        }
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(agentuserid) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageid) || String.IsNullOrEmpty(reason))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return authentication(agentuserid, password, out code, out desp);
    }
    public string SMSAgainReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string agentuserid = string.Empty;
        string password = string.Empty;
        string reason = string.Empty;
        string messageid = string.Empty;

        var sb = new StringBuilder();

        try
        { // Break Request message from A2A program

            Hashtable ht = Utils.getHTableFromXML(reqXml);
            if (!IsValidateSMSAgainReq(ht, out code, out desp, out version, out ts, out password, out agentuserid, out messageid, out reason))
            {
                return Utils.GetErrorResponse(code, desp);
            }
            else
            {
                if (ht.ContainsKey("PhoneNo"))
                {
                    string mobileNo = ht["PhoneNo"].ToString();
                    string txnID = ht["TxnID"].ToString();

                    if (!String.IsNullOrEmpty(mobileNo))
                    {
                        try
                        {
                            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
                            writeLog("Txn ID : " + txnID);
                            writeLog("Mobile No. : " + mobileNo);
                            if (!bis.doSMS(long.Parse(txnID), mobileNo))
                            {
                                writeLog("Error in doSMS. TxnID : " + txnID + " | Mobile No : " + mobileNo);
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error in doSMS calling : " + ex.ToString());
                        }
                    }
                    else
                    {
                        writeLog("No Mobile No. Value.");
                    }
                }
                else
                {
                    writeLog("No Mobile No. Tag.");
                }
            }
            string errmsg = "";

            int logTypeID = Convert.ToInt16(Constants.LogType.MSMSLOGTYPE);
            if (_agentWCF.InsertAgentUserLog(logTypeID, reason, agentuserid, string.Empty, out errmsg))
            {
                sb.Append("<SMSAgainRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>Sussess</ResDesc>");
                sb.Append("</SMSAgainRes>");
                return sb.ToString();
            }
            else
            {
                return Utils.GetErrorResponse("97", "API ERROR");
            }
        }
        catch (Exception ex)
        {
            return Get123APIError();
        }
    }
    //end
    public string getMessageBillerMercyCrops(string agentName, string taxID, string biller, string ref1Name, string ref2Name, string ref3Name, string ref4Name,
     string ref1Value, string ref2Value, string ref3Value, string ref4Value, string amount, string serviceFee, string totalAmount, string shopCode)
    {
        var sb = new StringBuilder();

        sb.Append("PayHere at " + agentName);
        sb.Append(" *" + biller);

        sb.Append(" *" + "Partner Code" + " : " + ref2Value);

        if (!String.IsNullOrEmpty(ref1Name))
            sb.Append(" *" + ref1Name + " : " + ref1Value);

        sb.Append(" *Amount : " + amount);
        sb.Append(" *Fee : " + serviceFee);
        sb.Append(" *Total : " + totalAmount);

        if (!String.IsNullOrEmpty(ref4Name) && ref4Name != "Ref")
            sb.Append(" *" + ref4Name + " : " + ref4Value);

        if (!String.IsNullOrEmpty(ref4Name) && ref4Name == "Ref")
            sb.Append(" *" + ref4Name + " : " + ref4Value);
        string smsMsg = "";

        if (sb.ToString().Length > 159)
        {
            smsMsg = sb.ToString().Substring(0, 159);
        }
        else
        {
            smsMsg = sb.ToString();
        }
        return smsMsg;
    }
    #region TxnSearchReport

    public string TxnSearchReportReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string txnid = string.Empty;
        string REF1 = string.Empty;
        string REF2 = string.Empty;
        string REF3 = string.Empty;
        string REF4 = string.Empty;
        string REF5 = string.Empty;
        string agncode = string.Empty;
        string BillerID = string.Empty;
        string txnDateFrom = string.Empty;
        string txnDateTo = string.Empty;
        string amountFrom = string.Empty;
        string amountTo = string.Empty;
        string txnStatus = string.Empty;
        string branchID = string.Empty;
        string summary = string.Empty;
        string mobileno = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateTxnSearchReport(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agncode, out txnDateFrom, out txnDateTo, out BillerID, out amountFrom, out amountTo, out mobileno, out txnid, out summary))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        if (!string.IsNullOrEmpty(txnDateFrom) && txnDateFrom.Length <= 10) txnDateFrom += " 01:00:00.001";

        if (!string.IsNullOrEmpty(txnDateTo) && txnDateTo.Length <= 10) txnDateTo += " 23:59:59.999";

        writeLog("txnStatus:" + txnStatus);

        return TransactionReport(BillerID, agncode, email, txnid, txnDateFrom, txnDateTo, REF1, REF2, REF3, REF4, REF5, amountFrom, amountTo, branchID, txnStatus, mobileno);
    }



    bool IsValidateTxnSearchReport(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID, out string agncode, out string fromdate, out string todate, out string billerid, out string fromamt, out string toamt, out string mobileno, out string txnid, out string summary)
    {
        code = "00";
        desp = "Success";
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        txnid = string.Empty;
        fromdate = string.Empty;
        todate = string.Empty;
        billerid = string.Empty;
        fromamt = string.Empty;
        toamt = string.Empty;
        mobileno = string.Empty;
        summary = string.Empty;
        messageID = string.Empty;
        agncode = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();

        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("BillerID"))
        {
            billerid = ht["BillerID"].ToString();

        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID <BillerID> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("TxnID"))
        {
            txnid = ht["TxnID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing txnID  <txnID> Tag");
            return false;
        }


        if (ht.ContainsKey("FromDate"))
        {
            fromdate = ht["FromDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing FromDate  <FromDate> Tag");
            return false;
        }

        if (ht.ContainsKey("ToDate"))
        {
            todate = ht["ToDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ToDate  <ToDate> Tag");
            return false;
        }
        if (ht.ContainsKey("FromAmount"))
        {
            fromamt = ht["FromAmount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing FromAmount  <FAmount> Tag");
            return false;
        }

        if (ht.ContainsKey("ToAmount"))
        {
            toamt = ht["ToAmount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ToAmount  <TAmount> Tag");
            return false;
        }

        if (ht.ContainsKey("MobileNo"))
        {
            mobileno = ht["MobileNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ToAmount  <MobileNo> Tag");
            return false;
        }
        if (ht.ContainsKey("Summary"))
        {
            summary = ht["Summary"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ToAmount  <MobileNo> Tag");
            return false;
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {

                agncode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }
        return true;
    }

    public string TransactionReport(string BillerID, string agentcode, string agentuserID, string txnID, string txnDateFrom, string txnDateTo, string REF1, string REF2, string REF3, string REF4, string REF5, string amountFrom, string amountTo, string branchID, string txnStatus, string mobileno)
    {
        string errmsg;
        string status = "PA";
        DataSet ds;
        if (_agentWCF.getTransactionSummaryReport(BillerID, agentcode, agentuserID, txnID, txnDateFrom, txnDateTo, REF1, REF2, REF3, REF4, REF5, amountFrom, amountTo, branchID, txnStatus, mobileno, out ds, out errmsg))
        {
            return getTransactionSummaryResponse(ds);
        }

        return status;

    }

    public string TxnSearchReportReqV2(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string txnid = string.Empty;
        string REF1 = string.Empty;
        string REF2 = string.Empty;
        string REF3 = string.Empty;
        string REF4 = string.Empty;
        string REF5 = string.Empty;
        string agncode = string.Empty;
        string BillerID = string.Empty;
        string txnDateFrom = string.Empty;
        string txnDateTo = string.Empty;
        string amountFrom = string.Empty;
        string amountTo = string.Empty;
        string txnStatus = string.Empty;
        string branchID = string.Empty;
        string summary = string.Empty;
        string mobileno = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateTxnSearchReport(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out agncode, out txnDateFrom, out txnDateTo, out BillerID, out amountFrom, out amountTo, out mobileno, out txnid, out summary))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        if (!string.IsNullOrEmpty(txnDateFrom) && txnDateFrom.Length <= 10) txnDateFrom += " 01:00:00.001";

        if (!string.IsNullOrEmpty(txnDateTo) && txnDateTo.Length <= 10) txnDateTo += " 23:59:59.999";

        writeLog("txnStatus:" + txnStatus);

        return TransactionReportV2(BillerID, agncode, email, txnid, txnDateFrom, txnDateTo, REF1, REF2, REF3, REF4, REF5, amountFrom, amountTo, branchID, txnStatus, mobileno);
    }

    public string TransactionReportV2(string BillerID, string agentcode, string agentuserID, string txnID, string txnDateFrom, string txnDateTo, string REF1, string REF2, string REF3, string REF4, string REF5, string amountFrom, string amountTo, string branchID, string txnStatus, string mobileno)
    {
        string errmsg = string.Empty;
        string status = "PA";

        DataSet ds = null;


        if (_agentWCF.getTransactionSummaryReport(BillerID, agentcode, agentuserID, txnID, txnDateFrom, txnDateTo, REF1, REF2, REF3, REF4, REF5, amountFrom, amountTo, branchID, txnStatus, mobileno, out ds, out errmsg))
        {
            return getTransactionSummaryResponseV2(ds, txnDateFrom, txnDateTo, txnID);
        }

        return status;

    }

    public string getTransactionSummaryResponse(DataSet ds)
    {
        string response = string.Empty;

        try
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<TxnSearchReportRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" totalamount=" + "\"" + ds.Tables[1].Rows[0][1].ToString() + "\">");

            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    sb.Append("<Txn COMPANYNAME=" + "\"" + ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" COUNT=" + "\"" + ds.Tables[0].Rows[i]["BILLERCOUNT"].ToString() + "\" txnAmount=" + "\"" + ds.Tables[0].Rows[i]["txnamount"].ToString() + "\"  />");

                }
            }
            sb.Append("</TxnSearchReportRes>");
            return sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Exception occur when fatching Summary Report Data:" + ex.Message);
        }
        return response;

    }

    public string getTransactionSummaryResponseV2(DataSet ds, string fromDateString, string toDateString, string transactionId)
    {
        string response = string.Empty;

        try
        {
            var aggregateTable = ds.Tables[1];
            var row = aggregateTable.Rows[0];
            var eServiceSummaryReport = new EServiceSummaryReportResponseV2
            {
                ResponseCode = "00",
                ResponseDescription = "success",
                Total = row["total"].ToString(),
                Totalamount = row["TOTALTXNAMOUNT"].ToString()
            };

            var transactionTable = ds.Tables[0];
            var transactionList = new List<EServiceTransaction>();
            if (transactionTable.Rows.Count > 0)
            {
                for (int i = 0; i < transactionTable.Rows.Count; i++)
                {
                    var transaction = transactionTable.Rows[i];
                    transactionList.Add(new EServiceTransaction
                    {
                        CompanyName = transaction["COMPANYNAME"].ToString(),
                        Count = transaction["BILLERCOUNT"].ToString(),
                        TransactionAmount = transaction["txnamount"].ToString()
                    });
                }
            }

            eServiceSummaryReport.IsPrintable = IsEServicePrintable(fromDateString, toDateString, transactionId);
            eServiceSummaryReport.Transactions = transactionList;
            var responseXML = (new XMLSerializationService<EServiceSummaryReportResponseV2>()).SerializeData(eServiceSummaryReport);
            return responseXML;
        }
        catch (Exception ex)
        {
            writeLog("Exception occur when fatching Summary Report Data:" + ex.Message);
        }
        return response;

    }

    #endregion

    #region ePaymentSummaryReport

    public string ePaymentSummaryReportReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageId = string.Empty;
        string txnId = string.Empty;
        string agentCode = string.Empty;
        string paymentType = string.Empty;
        string txnDateFrom = string.Empty;
        string txnDateTo = string.Empty;
        string txnStatus = string.Empty;
        string summary = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateEPaymentSummaryReportReq(ht, out code, out desp, out version, out ts, out email, out summary, out password, out messageId, out agentCode, out txnDateFrom, out txnDateTo, out paymentType, out txnId, out txnStatus))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        if (!string.IsNullOrEmpty(txnDateFrom) && txnDateFrom.Length <= 10)
        {
            txnDateFrom += " 01:00:00.001";
        }

        if (!string.IsNullOrEmpty(txnDateTo) && txnDateTo.Length <= 10)
        {
            txnDateTo += " 23:59:59.999";
        }

        writeLog("txnStatus:" + txnStatus);

        return ePaymentSummaryReport(paymentType, agentCode, email, txnId, txnDateFrom, txnDateTo, txnStatus);
    }

    public string ePaymentSummaryReportReqV2(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageId = string.Empty;
        string txnId = string.Empty;
        string agentCode = string.Empty;
        string paymentType = string.Empty;
        string txnDateFrom = string.Empty;
        string txnDateTo = string.Empty;
        string txnStatus = string.Empty;
        string summary = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateEPaymentSummaryReportReqV2(ht, out code, out desp, out version, out ts, out email, out summary, out password, out messageId, out agentCode, out txnDateFrom, out txnDateTo, out paymentType, out txnId, out txnStatus))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        if (!string.IsNullOrEmpty(txnDateFrom) && txnDateFrom.Length <= 10) txnDateFrom += " 01:00:00.001";

        if (!string.IsNullOrEmpty(txnDateTo) && txnDateTo.Length <= 10) txnDateTo += " 23:59:59.999";

        writeLog("txnStatus:" + txnStatus);

        return ePaymentSummaryReportV2(paymentType, agentCode, email, txnId, txnDateFrom, txnDateTo, txnStatus);
    }


    bool IsValidateEPaymentSummaryReportReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string summary, out string password, out string messageId, out string agentCode, out string fromDate, out string toDate, out string paymentType, out string txnId, out string txnStatus)
    {
        code = "00";
        desp = "Success";
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        txnId = string.Empty;
        txnStatus = string.Empty;
        fromDate = string.Empty;
        toDate = string.Empty;
        paymentType = string.Empty;
        summary = string.Empty;
        messageId = string.Empty;
        agentCode = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageId = ht["MessageID"].ToString();

        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("PaymentType"))
        {
            paymentType = ht["PaymentType"].ToString();

        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing PaymentType <PaymentType> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("TxnId"))
        {
            txnId = ht["TxnId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnId  <TxnId> Tag");
            return false;
        }

        if (ht.ContainsKey("TxnStatus"))
        {
            txnStatus = ht["TxnStatus"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnStatus  <TxnStatus> Tag");
            return false;
        }


        if (ht.ContainsKey("FromDate"))
        {
            fromDate = ht["FromDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing FromDate  <FromDate> Tag");
            return false;
        }

        if (ht.ContainsKey("ToDate"))
        {
            toDate = ht["ToDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ToDate  <ToDate> Tag");
            return false;
        }
        if (ht.ContainsKey("Summary"))
        {
            summary = ht["Summary"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Summary  <Summary> Tag");
            return false;
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {

                agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }
        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;
        }
        return true;
    }

    bool IsValidateEPaymentSummaryReportReqV2(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string summary, out string password, out string messageId, out string agentCode, out string fromDate, out string toDate, out string paymentType, out string txnId, out string txnStatus)
    {
        return IsValidateEPaymentSummaryReportReq(ht, out code, out desp, out version, out ts, out email, out summary, out password, out messageId, out agentCode, out fromDate, out toDate, out paymentType, out txnId, out txnStatus);
    }

    public string ePaymentSummaryReport(string paymentType, string agentCode, string agentUserId, string txnId, string txnDateFrom, string txnDateTo, string txnStatus)
    {
        string errmsg = string.Empty;
        string status = "PA";

        DataSet ds = null;

        if (_agentWCF.getEPaymentSummaryReport(paymentType, agentCode, agentUserId, txnId, txnDateFrom, txnDateTo, txnStatus, out ds, out errmsg))
        {
            return getEPaymentSummaryReportRes(ds);
        }

        return status;
    }

    public string ePaymentSummaryReportV2(string paymentType, string agentCode, string agentUserId, string txnId, string txnDateFrom, string txnDateTo, string txnStatus)
    {
        string errmsg = string.Empty;
        string status = "PA";

        DataSet ds = null;

        if (_agentWCF.getEPaymentSummaryReportV2(paymentType, agentCode, agentUserId, txnId, txnDateFrom, txnDateTo, txnStatus, out ds, out errmsg))
        {
            return getEPaymentSummaryReportResV2(ds, txnDateFrom, txnDateTo, txnId);
        }

        return status;
    }

    public string getEPaymentSummaryReportRes(DataSet ds)
    {
        string response = string.Empty;
        string totalCount = string.Empty;
        string totalAmount = string.Empty;
        try
        {
            if (ds.Tables[1].Rows.Count > 0)
            {
                totalCount = ds.Tables[1].Rows[0]["TotalCount"].ToString();
                totalAmount = ds.Tables[1].Rows[0]["TotalAmount"].ToString();
            }

            StringBuilder sb = new StringBuilder();
            sb.Append("<ePaymentSummaryReportRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" TotalCount=" + "\"" + totalCount + "\" totalamount=" + "\"" + totalAmount + "\">");

            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    sb.Append("<ePaymentTxn PaymentType=" + "\"" + ds.Tables[0].Rows[i]["PaymentType"].ToString() + "\" Count=" + "\"" + ds.Tables[0].Rows[i]["TxnCount"].ToString() + "\" Amount=" + "\"" + ds.Tables[0].Rows[i]["TxnAmount"].ToString() + "\"  />");

                }
            }
            sb.Append("</ePaymentSummaryReportRes>");
            return sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Exception occur when fatching Summary Report Data:" + ex.Message);
        }
        return response;
    }


    public string getEPaymentSummaryReportResV2(DataSet ds, string fromDateString, string toDateString, string transactionId)
    {
        var transactionStatusList = new List<TransactionStatus>();
        var tansactionList = new List<Transaction>();
        try
        {
            var transactionStatusAggregateTable = ds.Tables[1];
            if (transactionStatusAggregateTable.Rows.Count > 0)
            {
                for (int i = 0; i < transactionStatusAggregateTable.Rows.Count; i++)
                {
                    var row = transactionStatusAggregateTable.Rows[i];
                    transactionStatusList.Add(new TransactionStatus { Type = row["TransactionStatus"].ToString(), Count = row["TotalCount"].ToString(), Amount = row["TotalAmount"].ToString() });
                }
            }

            var transactionListTable = ds.Tables[0];
            if (transactionListTable.Rows.Count > 0)
            {
                for (int i = 0; i < transactionListTable.Rows.Count; i++)
                {
                    var row = transactionListTable.Rows[i];
                    tansactionList.Add(new Transaction { PaymentType = row["PaymentType"].ToString(), TransactionStatus = row["TransactionStatus"].ToString(), Count = row["TxnCount"].ToString(), Amount = row["TxnAmount"].ToString() });
                }
            }

            var transactionListGroupByTransactionStatus = tansactionList.GroupBy(x => x.TransactionStatus).ToList();
            var transactionStatusListContainingTransactions = transactionStatusList
                      .Join(transactionListGroupByTransactionStatus,
                         transactionStatus => transactionStatus.Type,
                         transactionList => transactionList.Key,
                         (transactionStatus, transactionList) => new TransactionStatus
                         {
                             Type = transactionStatus.Type,
                             Count = transactionStatus.Count,
                             Amount = transactionStatus.Amount,
                             Transactions = transactionList.ToList()
                         }).ToList();


            var ePaymentResponse = new EPaymentSummaryReportResV2
            {
                ResponseCode = "00",
                ResponseDescription = "success",
                TransactionStatuses = transactionStatusListContainingTransactions
            };

            ePaymentResponse.IsPrintable = IsEPaymentPrintable(fromDateString, toDateString, transactionId);

            var response = (new XMLSerializationService<EPaymentSummaryReportResV2>()).SerializeData(ePaymentResponse);
            return response;
        }
        catch (Exception ex)
        {
            writeLog("Exception occur when fatching Summary Report V2 Data:" + ex.Message);
        }
        return string.Empty;
    }

    private bool IsEPaymentPrintable(string fromDateString, string toDateString, string transactionId)
    {
        if (IsValidEPaymentTxnId(transactionId)) return true;
        if (string.IsNullOrEmpty(fromDateString)) return false;

        var fromDate = DateTime.Parse(fromDateString).Date;
        var toDate = string.IsNullOrEmpty(toDateString) ? DateTime.Now.Date : DateTime.Parse(toDateString).Date;
        var printableDateDifference = int.Parse(ConfigurationManager.AppSettings["EPaymentPrintableDateDifference"].ToString());
        var requestDateDifference = (toDate - fromDate).TotalDays;
        return requestDateDifference <= printableDateDifference;
    }


    private bool IsEServicePrintable(string fromDateString, string toDateString, string transactionId)
    {
        if (IsValidEServiceTxnId(transactionId)) return true;
        if (string.IsNullOrEmpty(fromDateString)) return false;

        var fromDate = DateTime.Parse(fromDateString).Date;
        var toDate = string.IsNullOrEmpty(toDateString) ? DateTime.Now.Date : DateTime.Parse(toDateString).Date;
        var printableDateDifference = int.Parse(ConfigurationManager.AppSettings["EServicePrintableDateDifference"].ToString());
        var requestDateDifference = (toDate - fromDate).TotalDays;
        return requestDateDifference <= printableDateDifference;
    }

    private bool IsValidEPaymentTxnId(string transactionId)
    {
        if (string.IsNullOrEmpty(transactionId)) return false;
        var validTxnIdLength = int.Parse(ConfigurationManager.AppSettings["PrintableEPaymentTxnIdLength"].ToString());
        return transactionId.Length == validTxnIdLength;
    }

    private bool IsValidEServiceTxnId(string transactionId)
    {
        if (string.IsNullOrEmpty(transactionId)) return false;
        var validTxnIdLength = int.Parse(ConfigurationManager.AppSettings["PrintableEServiceTxnIdLength"].ToString());
        return transactionId.Length == validTxnIdLength;
    }

    #endregion
    // -------------------------- NEW MOBILE REGISTRATION --------------------------
    #region New Mobile Registration

    public string StatusInquiryReq(string reqXml)
    {
        UserStatusReq userStatusReq = new UserStatusReq();
        RespModel respModel = new RespModel();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateStatusInquiryRequest(ht, out userStatusReq, out respModel))
        {
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }
        DataSet ds = null;
        string errmsg = string.Empty;

        if (_agentWCF.getStatusInquiry(userStatusReq.LoginID, out ds, out errmsg))
        {
            Logger.writeLog("GetStatusInquiry WCF Success : ", ref log);
            try
            {
                UserStatusResp userStatusResp = new UserStatusResp();
                userStatusResp.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
                userStatusResp.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

                userStatusResp.LoginID = userStatusReq.LoginID;
                userStatusResp.RespCode = "101";
                userStatusResp.RespDesc = "User Not Exist.";
                if (ds.Tables[0].Rows.Count > 0)
                {
                    userStatusResp.RespCode = "00";
                    userStatusResp.RespDesc = "Success.";
                    userStatusResp.UserName = ds.Tables[0].Rows[0]["AGENTUSERNAME"].ToString();
                    userStatusResp.Version = userStatusReq.Version;
                    userStatusResp.Timestamp = userStatusReq.Timestamp;
                    userStatusResp.OTP = ds.Tables[0].Rows[0]["OTP"].ToString();
                    userStatusResp.termsAndConditionsAgreement = ds.Tables[0].Rows[0]["TERMSANDCONDITIONS"].ToString();
                    if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsRegistered"].ToString()))
                    {
                        userStatusResp.Version = userStatusReq.Version;
                        userStatusResp.Timestamp = userStatusReq.Timestamp;
                        userStatusResp.UserName = ds.Tables[0].Rows[0]["AGENTUSERNAME"].ToString();
                        userStatusResp.OTP = ds.Tables[0].Rows[0]["OTP"].ToString();
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPGeneratedTime"].ToString()))
                        {
                            var date = ds.Tables[0].Rows[0]["OTPGeneratedTime"].ToString();
                            userStatusResp.OTPGeneratedTime = formatDate(Convert.ToDateTime(date).ToString());
                        }
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPExpiry"].ToString()))
                        {
                            var date = ds.Tables[0].Rows[0]["OTPExpiry"].ToString();
                            userStatusResp.OTPExpiry = formatDate(Convert.ToDateTime(date).ToString());
                        }
                        userStatusResp.OTPVerified = ds.Tables[0].Rows[0]["OTPVerified"].ToString().ToLower() != "false";
                        if (string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPVerified"].ToString()))
                        {
                            userStatusResp.OTPVerified = false;
                        }
                        userStatusResp.OTPResendCount = ds.Tables[0].Rows[0]["OTPResendCount"].ToString();
                        userStatusResp.OTPResendLocked = ds.Tables[0].Rows[0]["OTPResendLocked"].ToString().ToLower() != "false";
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPResendLockedTimestamp"].ToString()))
                        {
                            userStatusResp.OTPResendLockedTimestamp = formatDate(ds.Tables[0].Rows[0]["OTPResendLockedTimestamp"].ToString());
                        }
                        userStatusResp.OTPAttemptedCount = ds.Tables[0].Rows[0]["OTPAttemptedCount"].ToString();
                        if (string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPAttemptedCount"].ToString()))
                        {
                            userStatusResp.OTPAttemptedCount = "0";
                        }
                        userStatusResp.OTPAttemptedLocked = ds.Tables[0].Rows[0]["OTPAttemptedLocked"].ToString().ToLower() != "false";
                        if (string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPAttemptedLocked"].ToString()))
                        {
                            userStatusResp.OTPAttemptedLocked = false;
                        }
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPAttemptedLockedTimestamp"].ToString()))
                        {
                            userStatusResp.OTPAttemptedLockedTimestamp = formatDate(ds.Tables[0].Rows[0]["OTPAttemptedLockedTimestamp"].ToString());
                        }
                        userStatusResp.IsPasswodSet = ds.Tables[0].Rows[0]["IsPasswordSet"].ToString().ToLower() != "false";
                        userStatusResp.IsRegistered = ds.Tables[0].Rows[0]["IsRegistered"].ToString().ToLower() != "false";
                    }
                    else if (ds.Tables[0].Rows[0]["AGENTUSERNAME"] != null) // OLD USERS
                    {
                        if (userStatusResp.LoginID.Length > 6)
                        {
                            userStatusResp.IsRegistered = false;
                            userStatusResp.IsPasswodSet = false;
                            userStatusResp.OTPVerified = false;
                        }
                        else
                        {
                            userStatusResp.IsRegistered = false;
                            userStatusResp.IsPasswodSet = true;
                            userStatusResp.OTPVerified = true;
                        }
                    }
                }

                StringBuilder sb = new StringBuilder();
                sb.Append("<StatusInquiryRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + userStatusResp.RespCode + "</ResCode>");
                sb.Append("<ResDesc>" + userStatusResp.RespDesc + "</ResDesc>");
                sb.Append("<LoginID>" + userStatusResp.LoginID + "</LoginID>");
                sb.Append("<UserName>" + userStatusResp.UserName + "</UserName>");
                sb.Append("<OTP>" + userStatusResp.OTP + "</OTP>");
                sb.Append("<OTPGeneratedTime>" + userStatusResp.OTPGeneratedTime + "</OTPGeneratedTime>");
                sb.Append("<OTPExpiry>" + userStatusResp.OTPExpiry + "</OTPExpiry>");
                sb.Append("<OTPVerified>" + userStatusResp.OTPVerified + "</OTPVerified>");
                sb.Append("<OTPResendCount>" + userStatusResp.OTPResendCount + "</OTPResendCount>");
                sb.Append("<OTPResendLocked>" + userStatusResp.OTPResendLocked + "</OTPResendLocked>");
                sb.Append("<OTPResendLockedTimestamp>" + userStatusResp.OTPResendLockedTimestamp + "</OTPResendLockedTimestamp>");
                sb.Append("<OTPAttemptedCount>" + userStatusResp.OTPAttemptedCount + "</OTPAttemptedCount>");
                sb.Append("<OTPAttemptedLocked>" + userStatusResp.OTPAttemptedLocked + "</OTPAttemptedLocked>");
                sb.Append("<OTPAttemptedLockedTimestamp>" + userStatusResp.OTPAttemptedLockedTimestamp + "</OTPAttemptedLockedTimestamp>");
                sb.Append("<IsPasswodSet>" + userStatusResp.IsPasswodSet + "</IsPasswodSet>");
                sb.Append("<IsRegistered>" + userStatusResp.IsRegistered + "</IsRegistered>");
                sb.Append("<TermsAndConditions>" + userStatusResp.termsAndConditionsAgreement + "</TermsAndConditions>");
                sb.Append("</StatusInquiryRes>");
                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("StatusInquiryReq Error :" + ex.ToString());
            }
        }
        else
        {
            Logger.writeLog("GetStatusInquiry WCF Failed : " + errmsg, ref log);
        }

        return "";
    }

    public string StatusInquiryReqV2(string reqXml)
    {
        writeLog("GetStatusInquiryV2 starts");
        var userStatusReq = new UserStatusReq();
        var respModel = new RespModel();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateStatusInquiryRequest(ht, out userStatusReq, out respModel))
        {
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }
        DataSet ds = null;
        string errmsg = string.Empty;

        if (_agentWCF.getStatusInquiryV2(userStatusReq.LoginID, out ds, out errmsg))
        {
            Logger.writeLog("GetStatusInquiryV2 WCF Success : ", ref log);
            try
            {
                UserStatusResp userStatusResp = new UserStatusResp();
                userStatusResp.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
                userStatusResp.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

                userStatusResp.LoginID = userStatusReq.LoginID;
                userStatusResp.RespCode = "101";
                userStatusResp.RespDesc = "User Not Exist.";
                if (ds.Tables[0].Rows.Count > 0)
                {
                    writeLog("User " + userStatusReq.LoginID + " exists");
                    userStatusResp.RespCode = "00";
                    userStatusResp.RespDesc = "Success.";
                    userStatusResp.UserName = ds.Tables[0].Rows[0]["AGENTUSERNAME"].ToString();
                    userStatusResp.Version = userStatusReq.Version;
                    userStatusResp.Timestamp = userStatusReq.Timestamp;
                    userStatusResp.OTP = ds.Tables[0].Rows[0]["OTP"].ToString();
                    userStatusResp.termsAndConditionsAgreement = ds.Tables[0].Rows[0]["TERMSANDCONDITIONS"].ToString();
                    if (ds.Tables[0].Rows[0]["DEVICEUID"] != null)
                    {
                        writeLog("OTP DEVICEUID is not null ");
                        var otpDeviceUID = (ds.Tables[0].Rows[0]["DEVICEUID"]).ToString();
                        if (!string.IsNullOrEmpty(otpDeviceUID))
                        {
                            userStatusResp.DeviceUID = (ds.Tables[0].Rows[0]["DEVICEUID"]).ToString();
                        }
                    }
                    if (ds.Tables[0].Rows[0]["OTPVerifiedTime"] != null)
                    {
                        writeLog("OTP Verified Time is not null ");
                        var otpVerifiedTime = ds.Tables[0].Rows[0]["OTPVerifiedTime"].ToString();
                        writeLog("OTP Verified Time " + otpVerifiedTime);
                        if (!string.IsNullOrEmpty(otpVerifiedTime))
                        {
                            userStatusResp.OTPVerifiedTime = Convert.ToDateTime((ds.Tables[0].Rows[0]["OTPVerifiedTime"]).ToString());
                        }
                    }
                    if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsRegistered"].ToString()))
                    {
                        userStatusResp.Version = userStatusReq.Version;
                        userStatusResp.Timestamp = userStatusReq.Timestamp;
                        userStatusResp.UserName = ds.Tables[0].Rows[0]["AGENTUSERNAME"].ToString();
                        userStatusResp.OTP = ds.Tables[0].Rows[0]["OTP"].ToString();
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPGeneratedTime"].ToString()))
                        {
                            var date = ds.Tables[0].Rows[0]["OTPGeneratedTime"].ToString();
                            userStatusResp.OTPGeneratedTime = formatDate(Convert.ToDateTime(date).ToString());
                        }
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPExpiry"].ToString()))
                        {
                            var date = ds.Tables[0].Rows[0]["OTPExpiry"].ToString();
                            userStatusResp.OTPExpiry = formatDate(Convert.ToDateTime(date).ToString());
                        }
                        if (string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPVerified"].ToString()))
                        {
                            userStatusResp.OTPVerified = false;
                        }
                        userStatusResp.OTPVerified = ds.Tables[0].Rows[0]["OTPVerified"].ToString().ToLower() != "false";
                        if (userStatusResp.OTPVerified)
                        {
                            if (IsContinueFromAnotherDevice(userStatusResp, userStatusReq.DeviceUID))
                            {
                                userStatusResp.OTPVerified = false;
                            }

                            if (IsOTPVerifiedExpired(userStatusResp.OTPVerifiedTime))
                            {
                                userStatusResp.OTPVerified = false;
                            }
                        }

                        userStatusResp.OTPResendCount = ds.Tables[0].Rows[0]["OTPResendCount"].ToString();
                        userStatusResp.OTPResendLocked = ds.Tables[0].Rows[0]["OTPResendLocked"].ToString().ToLower() != "false";
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPResendLockedTimestamp"].ToString()))
                        {
                            userStatusResp.OTPResendLockedTimestamp = formatDate(ds.Tables[0].Rows[0]["OTPResendLockedTimestamp"].ToString());
                        }
                        userStatusResp.OTPAttemptedCount = ds.Tables[0].Rows[0]["OTPAttemptedCount"].ToString();
                        if (string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPAttemptedCount"].ToString()))
                        {
                            userStatusResp.OTPAttemptedCount = "0";
                        }
                        userStatusResp.OTPAttemptedLocked = ds.Tables[0].Rows[0]["OTPAttemptedLocked"].ToString().ToLower() != "false";
                        if (string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPAttemptedLocked"].ToString()))
                        {
                            userStatusResp.OTPAttemptedLocked = false;
                        }
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OTPAttemptedLockedTimestamp"].ToString()))
                        {
                            userStatusResp.OTPAttemptedLockedTimestamp = formatDate(ds.Tables[0].Rows[0]["OTPAttemptedLockedTimestamp"].ToString());
                        }
                        userStatusResp.IsPasswodSet = ds.Tables[0].Rows[0]["IsPasswordSet"].ToString().ToLower() != "false";
                        if (userStatusResp.IsPasswodSet) userStatusResp.OTPVerified = true;
                        userStatusResp.IsRegistered = ds.Tables[0].Rows[0]["IsRegistered"].ToString().ToLower() != "false";
                    }
                    else if (ds.Tables[0].Rows[0]["AGENTUSERNAME"] != null) // OLD USERS
                    {
                        if (userStatusResp.LoginID.Length > 6)
                        {
                            userStatusResp.IsRegistered = false;
                            userStatusResp.IsPasswodSet = false;
                            userStatusResp.OTPVerified = false;
                        }
                        else
                        {
                            userStatusResp.IsRegistered = false;
                            userStatusResp.IsPasswodSet = true;
                            userStatusResp.OTPVerified = true;
                        }
                    }
                }

                var sb = new StringBuilder();
                sb.Append("<StatusInquiryRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + userStatusResp.RespCode + "</ResCode>");
                sb.Append("<ResDesc>" + userStatusResp.RespDesc + "</ResDesc>");
                sb.Append("<LoginID>" + userStatusResp.LoginID + "</LoginID>");
                sb.Append("<UserName>" + userStatusResp.UserName + "</UserName>");
                sb.Append("<OTP>" + userStatusResp.OTP + "</OTP>");
                sb.Append("<OTPGeneratedTime>" + userStatusResp.OTPGeneratedTime + "</OTPGeneratedTime>");
                sb.Append("<OTPExpiry>" + userStatusResp.OTPExpiry + "</OTPExpiry>");
                sb.Append("<OTPVerified>" + userStatusResp.OTPVerified + "</OTPVerified>");
                sb.Append("<OTPResendCount>" + userStatusResp.OTPResendCount + "</OTPResendCount>");
                sb.Append("<OTPResendLocked>" + userStatusResp.OTPResendLocked + "</OTPResendLocked>");
                sb.Append("<OTPResendLockedTimestamp>" + userStatusResp.OTPResendLockedTimestamp + "</OTPResendLockedTimestamp>");
                sb.Append("<OTPAttemptedCount>" + userStatusResp.OTPAttemptedCount + "</OTPAttemptedCount>");
                sb.Append("<OTPAttemptedLocked>" + userStatusResp.OTPAttemptedLocked + "</OTPAttemptedLocked>");
                sb.Append("<OTPAttemptedLockedTimestamp>" + userStatusResp.OTPAttemptedLockedTimestamp + "</OTPAttemptedLockedTimestamp>");
                sb.Append("<IsPasswodSet>" + userStatusResp.IsPasswodSet + "</IsPasswodSet>");
                sb.Append("<IsRegistered>" + userStatusResp.IsRegistered + "</IsRegistered>");
                sb.Append("<TermsAndConditions>" + userStatusResp.termsAndConditionsAgreement + "</TermsAndConditions>");
                sb.Append("</StatusInquiryRes>");
                writeLog(sb.ToString());
                return sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("StatusInquiryReq Error :" + ex.ToString());
            }
        }
        else
        {
            Logger.writeLog("GetStatusInquiry WCF Failed : " + errmsg, ref log);
        }

        return "";
    }



    public bool IsContinueFromAnotherDevice(UserStatusResp userStatusResponse, string deviceUID)
    {
        return userStatusResponse.DeviceUID != deviceUID;
    }

    public bool IsContinueFromAnotherDevice(string oldDeviceID, string newDeviceID)
    {
        return oldDeviceID != newDeviceID;
    }

    public bool IsOTPVerifiedExpired(DateTime OTPVerifiedTime)
    {
        writeLog(" IsOTPVerifiedExpired starts");
        var expiredMinutes = Convert.ToInt32(ConfigurationManager.AppSettings["OTPVerifiedExpiredMinute"].ToString());
        return OTPVerifiedTime.AddMinutes(expiredMinutes) < DateTime.Now;
    }

    public string OTPVerifyReq(string reqXml)
    {
        var code = string.Empty;
        var desp = string.Empty;
        var version = string.Empty;
        var ts = string.Empty;
        var email = string.Empty;
        var username = string.Empty;
        var messageID = string.Empty;
        var otp = string.Empty;
        var deviceid = string.Empty;
        var ds = new DataSet();
        var errmsg = string.Empty;
        var ht = Utils.getHTableFromXML(reqXml);


        if (!IsValidateVerifyOTP(ht, out code, out desp, out version, out ts, out email, out username, out messageID, out deviceid, out otp))
        {
            return Utils.GetErrorResponse(code, desp);
        }

        if (_agentWCF.getStatusInquiry(email, out ds, out errmsg))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                var dbotp = ds.Tables[0].Rows[0]["OTP"].ToString();
                writeLog("DbOTP is : " + dbotp);

                var expirydate = ds.Tables[0].Rows[0]["OTPExpiry"].ToString();
                writeLog("Expirydate is : " + expirydate);

                if (otp == dbotp)
                {
                    writeLog("Otp is valid.");
                    if (Convert.ToDateTime(expirydate) >= DateTime.Now)
                    {
                        writeLog("Otp is verify.");
                        var sb = new StringBuilder();
                        sb.Append("<OTPVerifyRes>");
                        sb.Append("<Version>" + version + "</Version>");
                        sb.Append("<TimeStamp>" + ts + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desp + "</ResDesc>");
                        sb.Append("<IsVerify>Y</IsVerify>");
                        sb.Append("</OTPVerifyRes>");
                        writeLog(sb.ToString());
                        return sb.ToString();
                    }

                    writeLog("OTP expired.");
                    return Utils.GetErrorResponse("06", "OTP expired already.");
                }

                writeLog("Invalid otp.");
                return Utils.GetErrorResponse("06", "Invalid otp.");
            }
        }
        return Utils.GetErrorResponse("06", errmsg);
    }

    public string OTPReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ This Is OTP Request $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
        writeLog("ReqXML:" + reqXml);
        try
        {
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            string resp = bis.OTPReq(reqXml);
            writeLog("$$$$$$$$$$$$$$$ This Is OTP Response $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
            writeLog("ResXML:" + resp);
            return resp;
        }
        catch (Exception ex)
        {
            writeLog("OTPReq Error :" + ex.ToString());
            throw;
        }
    }

    public string OTPReqV2(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ This Is OTP Request $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
        writeLog("ReqXML:" + reqXml);
        try
        {
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
            string resp = bis.OTPReqV2(reqXml);
            writeLog("$$$$$$$$$$$$$$$ This Is OTP Response $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
            writeLog("ResXML:" + resp);
            return resp;
        }
        catch (Exception ex)
        {
            writeLog("OTPReq Error :" + ex.ToString());
            throw;
        }
    }
    public string SetResendCountReq(string reqXml)
    {
        writeLog("****************** THIS IS SetResendCountReq ******************");
        var respModel = new RespModel();
        var resendCntReq = new ResendCountReq();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateSetResendCount(ht, out resendCntReq, out respModel))
        {
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }
        DataSet ds = null;
        string errmsg = string.Empty;

        if (_agentWCF.setResendCount(resendCntReq.LoginID, out errmsg))
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<SetOTPResendRes>");
            sb.Append("<Version>1.0</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>" + ((int)Utils.HTTPResponseCodes.Success).ToString() + "</ResCode>");
            sb.Append("<ResDesc>" + Utils.HTTPResponseCodes.Success.ToDisplayName() + "</ResDesc>");
            sb.Append("</SetOTPResendRes>");
            return sb.ToString();
        }

        return "";
    }

    public string ResetOTPResendReq(string reqXml)
    {
        writeLog("****************** THIS IS ResetOTPResendReq ******************");
        var resetOTPReq = new ResetOTPReq();
        var respModel = new RespModel();
        var sb = new StringBuilder();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidResetOtpReq(ht, out resetOTPReq, out respModel)) return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);

        DataSet ds = null;
        string errmsg = string.Empty;

        try
        {
            if (_agentWCF.resetOTPResend(resetOTPReq.LoginID, out errmsg))
            {
                sb.Append("<ResetOTPResendRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + ((int)Utils.HTTPResponseCodes.Success).ToString() + "</ResCode>");
                sb.Append("<ResDesc>" + Utils.HTTPResponseCodes.Success.ToDisplayName() + "</ResDesc>");
                sb.Append("</ResetOTPResendRes>");
                return sb.ToString();
            }

            return Utils.GetErrorResponse(((int)Utils.HTTPResponseCodes.InternalServerError).ToString(), Utils.HTTPResponseCodes.InternalServerError.ToDisplayName());

        }
        catch (Exception ex)
        {
            writeLog("Error : " + ex.ToString());
            return Utils.GetErrorResponse(((int)Utils.HTTPResponseCodes.InternalServerError).ToString(), ex.ToString());
        }
    }

    public string SetAttemptCountReq(string reqXml)
    {
        writeLog("****************** THIS IS SetAttemptCountReq ******************");
        writeLog(reqXml);
        var respModel = new RespModel();
        var attemptCntReq = new AttemptCountReq();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateSetAttemptCount(ht, out attemptCntReq, out respModel))
        {
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }
        DataSet ds = null;
        string errmsg = string.Empty;

        if (_agentWCF.setAttemptCount(attemptCntReq.LoginID, attemptCntReq.OTPVerified, out errmsg))
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<SetAttemptCountRes>");
            sb.Append("<Version>1.0</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>" + ((int)Utils.HTTPResponseCodes.Success).ToString() + "</ResCode>");
            sb.Append("<ResDesc>" + Utils.HTTPResponseCodes.Success.ToDisplayName() + "</ResDesc>");
            sb.Append("</SetAttemptCountRes>");
            return sb.ToString();
        }

        return "";
    }

    public string SetAttemptCountReqV2(string reqXml)
    {
        writeLog("****************** THIS IS SetAttemptCountReq ******************");
        writeLog(reqXml);
        var respModel = new RespModel();
        var attemptCntReq = new AttemptCountReq();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateSetAttemptCountV2(ht, out attemptCntReq, out respModel))
        {
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }
        string errmsg = string.Empty;

        if (_agentWCF.setAttemptCountV2(attemptCntReq.LoginID, attemptCntReq.OTPVerified, attemptCntReq.DeviceUID, out errmsg))
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<SetAttemptCountRes>");
            sb.Append("<Version>1.0</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>" + ((int)Utils.HTTPResponseCodes.Success).ToString() + "</ResCode>");
            sb.Append("<ResDesc>" + Utils.HTTPResponseCodes.Success.ToDisplayName() + "</ResDesc>");
            sb.Append("</SetAttemptCountRes>");
            return sb.ToString();
        }

        return "";
    }

    public string ResetOTPAttemptedReq(string reqXml)
    {
        writeLog("****************** THIS IS ResetOTPAttemptedReq ******************");
        var resetOTPReq = new ResetOTPReq();
        var respModel = new RespModel();
        StringBuilder sb = new StringBuilder();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidResetOtpReq(ht, out resetOTPReq, out respModel))
        {
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }
        string errmsg = string.Empty;

        try
        {
            if (_agentWCF.resetOTPAttempts(resetOTPReq.LoginID, out errmsg))
            {
                sb.Append("<ResetOTPAttemptedRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + ((int)Utils.HTTPResponseCodes.Success).ToString() + "</ResCode>");
                sb.Append("<ResDesc>" + Utils.HTTPResponseCodes.Success.ToDisplayName() + "</ResDesc>");
                sb.Append("</ResetOTPAttemptedRes>");
            }
            else
            {
                return Utils.GetErrorResponse(((int)Utils.HTTPResponseCodes.InternalServerError).ToString(), Utils.HTTPResponseCodes.InternalServerError.ToDisplayName());
            }
        }
        catch (Exception ex)
        {
            return Utils.GetErrorResponse(((int)Utils.HTTPResponseCodes.InternalServerError).ToString(), ex.ToString());
        }
        return sb.ToString();
    }

    public string UpdateProfileReq(string reqXml)
    {
        try
        {
            writeLog("****************** THIS IS UpdateProfileReq ******************");
            writeLog("Update Profile ReqXml : " + reqXml);
            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();

            return bis.UpdateProfileReq(reqXml);
        }
        catch (Exception ex)
        {
            writeLog("UpdateProfileReq Error : " + ex.ToString());
        }
        return "";
    }

    public string UpdateProfileV2Req(string reqXml)
    {
        try
        {
            writeLog("****************** THIS IS UpdateProfileV2Req ******************");

            string logData = reqXml;
            if (reqXml.Contains("UpdateProfileV2Req"))
            {
                logData = Utils.RemovePhotoByteString(reqXml);
            }
            writeLog("Update Profile Req V2 Xml : " + logData);

            MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();

            return bis.UpdateProfileReqV2(reqXml);
        }
        catch (Exception ex)
        {
            writeLog("UpdateProfileV2Req Error : " + ex.ToString());
        }
        return "";
    }

    public string GetProfileReq(string reqXml)
    {
        writeLog("****************** THIS IS GetProfileReq ******************");
        var profileReq = new GetProfileReq();
        var respModel = new RespModel();
        var sb = new StringBuilder();
        string verifyText = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidGetProfileReq(ht, out profileReq, out respModel))
        {
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }
        DataSet ds = null;
        string errmsg = string.Empty;

        try
        {
            if (_agentWCF.getAgentProfile(profileReq.AgentUserID, profileReq.phNo, out ds, out errmsg))
            {
                Logger.writeLog("WCF Success : ", ref log);
                GetProfileResp profileResp = new GetProfileResp();

                profileResp.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
                profileResp.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    profileResp.Gender = ds.Tables[0].Rows[0]["GENDER"].ToString();
                    profileResp.Dob = ds.Tables[0].Rows[0]["DOB"].ToString();
                    profileResp.PhNo = ds.Tables[0].Rows[0]["PHNO"].ToString();
                    profileResp.SecretWord = ds.Tables[0].Rows[0]["SECRETWORD"].ToString();
                    profileResp.Nrc = ds.Tables[0].Rows[0]["NRC"].ToString();
                    profileResp.ShopName = ds.Tables[0].Rows[0]["AGENTBRANCHNAME"].ToString();
                    profileResp.BranchCode = ds.Tables[0].Rows[0]["AGENTBRANCHCODE"].ToString();
                    profileResp.Address = ds.Tables[0].Rows[0]["AGENTBRANCHADDRESS"].ToString();
                    profileResp.Email = ds.Tables[0].Rows[0]["USEREMAIL"].ToString() == MobileApiConstants.dash ? string.Empty : ds.Tables[0].Rows[0]["USEREMAIL"].ToString();
                    profileResp.IsShop = ds.Tables[0].Rows[0]["ISSHOP"].ToString();
                    profileResp.ShopType = ds.Tables[0].Rows[0]["SHOPTYPE"].ToString();
                    profileResp.LatitudeLoc = ds.Tables[0].Rows[0]["LATITUDELOC"].ToString();
                    profileResp.Longitude = ds.Tables[0].Rows[0]["LONGITUDELOC"].ToString();

                    profileResp.Division = (ds.Tables[0].Rows[0]["Division"] == DBNull.Value || ds.Tables[0].Rows[0]["Division"].ToString() == "0") ? 8 : Convert.ToInt32(ds.Tables[0].Rows[0]["DIVISION"].ToString());
                    profileResp.Township = (ds.Tables[0].Rows[0]["Township"] == DBNull.Value || ds.Tables[0].Rows[0]["Township"].ToString() == "0") ? 193 : Convert.ToInt32(ds.Tables[0].Rows[0]["TOWNSHIP"].ToString());

                    writeLog("Division " + profileResp.Division + " Township " + profileResp.Township);

                    string SelfiePhoto = string.Empty;
                    string SelfiePhotoWithIdCard = string.Empty;

                    //get s3 photo 64 byte
                    if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SelfiePhotoUrl"].ToString()) && !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SelfiePhotoWithIdUrl"].ToString()))
                    {
                        (new AuthenticationService()).GetProfilePhoto(ds.Tables[0].Rows[0]["SelfiePhotoUrl"].ToString(), ds.Tables[0].Rows[0]["SelfiePhotoWithIdUrl"].ToString(), out SelfiePhoto, out SelfiePhotoWithIdCard);
                    }

                    profileResp.SelfiePhoto = SelfiePhoto;
                    profileResp.SelfiePhotoWithIdCard = SelfiePhotoWithIdCard;
                    profileResp.VerifyStatus = ds.Tables[0].Rows[0]["VerifyStatus"].ToString();
                    profileResp.VerifyStatusDesc = ds.Tables[0].Rows[0]["VerifyStatusDesc"].ToString();

                    if (profileResp.VerifyStatus == "N" || profileResp.VerifyStatus == "R")  //N = Not Verified, R= Reject
                    {
                        verifyText = ConfigurationManager.AppSettings["VerifyText"];
                    }

                    sb.Append("<GetProfileRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + profileResp.RespCode + "</ResCode>");
                    sb.Append("<ResDesc>" + profileResp.RespDesc + "</ResDesc>");
                    sb.Append("<Gender>" + profileResp.Gender + "</Gender>");
                    sb.Append("<Dob>" + profileResp.Dob + "</Dob>");
                    sb.Append("<PhoneNo>" + profileResp.PhNo + "</PhoneNo>");
                    if (profileResp.SecretWord == "-")
                    {
                        profileResp.SecretWord = "";
                    }
                    sb.Append("<SecretWord>" + profileResp.SecretWord + "</SecretWord>");
                    sb.Append("<NRC>" + profileResp.Nrc + "</NRC>");
                    sb.Append("<ShopName>" + profileResp.ShopName + "</ShopName>");
                    sb.Append("<BranchCode>" + profileResp.BranchCode + "</BranchCode>");
                    sb.Append("<Address>" + HttpUtility.HtmlEncode(profileResp.Address) + "</Address>");
                    sb.Append("<Email>" + profileResp.Email + "</Email>");
                    sb.Append("<IsShop>" + profileResp.IsShop + "</IsShop>");
                    sb.Append("<ShopType>" + profileResp.ShopType + "</ShopType>");
                    if (string.IsNullOrEmpty(profileResp.LatitudeLoc) || string.IsNullOrEmpty(profileResp.Longitude))
                    {
                        profileResp.LatitudeLoc = "16.774303";
                        profileResp.Longitude = "96.158793";
                    }
                    sb.Append("<LatitudeLoc>" + profileResp.LatitudeLoc + "</LatitudeLoc>");
                    sb.Append("<LongitudeLoc>" + profileResp.Longitude + "</LongitudeLoc>");
                    sb.Append("<DivisionID>" + profileResp.Division + "</DivisionID>");
                    sb.Append("<TownshipID>" + profileResp.Township + "</TownshipID>");
                    sb.Append("<SelfiePhoto>" + profileResp.SelfiePhoto.ToString() + "</SelfiePhoto>");
                    sb.Append("<SelfiePhotoWithIdCard>" + profileResp.SelfiePhotoWithIdCard.ToString() + "</SelfiePhotoWithIdCard>");
                    sb.Append("<VerifyStatus>" + profileResp.VerifyStatus + "</VerifyStatus>");
                    sb.Append("<VerifyStatusDesc>" + profileResp.VerifyStatusDesc + "</VerifyStatusDesc>");
                    sb.Append("<VerifyText>" + verifyText + "</VerifyText>");
                    sb.Append("</GetProfileRes>");
                    return sb.ToString();
                }

                sb.Append("<GetProfileRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp></TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>User doens't exist.</ResDesc>");
                sb.Append("<Gender></Gender>");
                sb.Append("<Dob></Dob>");
                sb.Append("<PhoneNo></PhoneNo>");
                sb.Append("<SecretWord></SecretWord>");
                sb.Append("<NRC></NRC>");
                sb.Append("<Division></Division>");
                sb.Append("<Township></Township>");
                sb.Append("<Address></Address>");
                sb.Append("<Email></Email>");
                sb.Append("<IsShop></IsShop>");
                sb.Append("<ShopType></ShopType>");
                sb.Append("<LatitudeLoc></LatitudeLoc>");
                sb.Append("<LongitudeLoc></LongitudeLoc>");
                sb.Append("<SelfiePhoto></SelfiePhoto>");
                sb.Append("<SelfiePhotoWithIdCard></SelfiePhotoWithIdCard>");
                sb.Append("<VerifyStatus></VerifyStatus>");
                sb.Append("<VerifyStatusDesc></VerifyStatusDesc>");
                sb.Append("<VerifyText></VerifyText>");
                sb.Append("</GetProfileRes>");
                return sb.ToString();

            }

            writeLog("GetProfileReq Mobile WCF Error :" + errmsg);
            return Utils.GetErrorResponse("09", errmsg);

        }
        catch (Exception ex)
        {
            writeLog("GetProfileReq Mobile WCF Error :" + ex.ToString());
            return Utils.GetErrorResponse("09", "GetProfileReq Mobile API Error");
        }

    }

   

    #endregion

    #region Validations

    private bool IsValidateVerifyOTP(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string username, out string messageID, out string deviceid, out string otp)
    {
        code = "00";
        desp = "Success";
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        username = string.Empty;
        messageID = string.Empty;
        deviceid = string.Empty;
        otp = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            email = ht["LoginID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <LoginID> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Message ID <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("UserName"))
        {
            username = ht["UserName"].ToString();
        }

        if (ht.ContainsKey("DeviceUID"))
        {
            deviceid = ht["DeviceUID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Message ID <DeviceUID> Tag");
            return false;
        }

        if (ht.ContainsKey("OTP"))
        {
            otp = ht["OTP"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Message ID <OTP> Tag");
            return false;
        }

        return true;
    }

    public bool IsValidUpdateLoginReq(Hashtable ht, out UpdateLoginReq updateLoginReq, out RespModel respModel)
    {
        updateLoginReq = new UpdateLoginReq();
        respModel = new RespModel();

        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            updateLoginReq.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            updateLoginReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            updateLoginReq.Timestamp = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentUserID"))
        {
            updateLoginReq.AgentUserID = ht["AgentUserID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing AgentUserID XML <AgentUserID> Tag");
            return false;
        }
        if (ht.ContainsKey("PhoneNo"))
        {
            updateLoginReq.PhNo = ht["PhoneNo"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing PhoneNo XML <PhoneNo> Tag");
            return false;
        }
        if (ht.ContainsKey("NewPassword"))
        {
            updateLoginReq.NewPassword = ht["NewPassword"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing NewPassword XML <NewPassword> Tag");
            return false;
        }

        return true;
    }

    public bool IsValidCheckExistingAgentUserIDReq(Hashtable ht, out CheckExistingAgentUserIDReq checkExistingAgentUserIDReq, out RespModel respModel)
    {
        checkExistingAgentUserIDReq = new CheckExistingAgentUserIDReq();
        respModel = new RespModel();

        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            checkExistingAgentUserIDReq.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            checkExistingAgentUserIDReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            checkExistingAgentUserIDReq.Timestamp = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentUserID"))
        {
            checkExistingAgentUserIDReq.AgentUserID = ht["AgentUserID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing AgentUserID XML <AgentUserID> Tag");
            return false;
        }

        return true;
    }

    public bool IsValidGetProfileReq(Hashtable ht, out GetProfileReq getProfileReq, out RespModel respModel)
    {
        getProfileReq = new GetProfileReq();
        respModel = new RespModel();

        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            getProfileReq.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            getProfileReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            getProfileReq.Timestamp = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentUserID"))
        {
            getProfileReq.AgentUserID = ht["AgentUserID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing AgentUserID XML <AgentUserID> Tag");
            return false;
        }
        return true;
    }

    public bool IsValidUpdateProfileReq(Hashtable ht, out UpdateProfileReq updateProfileReq, out RespModel respModel)
    {
        updateProfileReq = new UpdateProfileReq();
        respModel = new RespModel();

        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            updateProfileReq.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            updateProfileReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            updateProfileReq.Timestamp = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        return true;
    }

    public bool IsValidateStatusInquiryRequest(Hashtable ht, out UserStatusReq userStatusReq, out RespModel respModel)
    {
        userStatusReq = new UserStatusReq();
        respModel = new RespModel();

        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            userStatusReq.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            userStatusReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            userStatusReq.Timestamp = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            userStatusReq.LoginID = ht["LoginID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing LoginID <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("DeviceUID"))
        {
            userStatusReq.DeviceUID = ht["DeviceUID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing DeviceUID xml <DeviceUID> Tag");
            return false;
        }
        if (ht.ContainsKey("UserName"))
        {
            userStatusReq.UserName = ht["UserName"].ToString();
        }

        return true;
    }

    public bool IsValidResetOtpReq(Hashtable ht, out ResetOTPReq resetOTPReq, out RespModel respModel)
    {
        respModel = new RespModel();
        resetOTPReq = new ResetOTPReq();
        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            respModel.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            respModel.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            respModel.Timestamp = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            resetOTPReq.LoginID = ht["LoginID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing LoginID <TimeStamp> Tag");
            return false;
        }

        return true;
    }

    public bool IsValidateSetAttemptCount(Hashtable ht, out AttemptCountReq attemptCntReq, out RespModel respModel)
    {

        respModel = new RespModel();
        attemptCntReq = new AttemptCountReq();
        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            respModel.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            respModel.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            respModel.Timestamp = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            attemptCntReq.LoginID = ht["LoginID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing LoginID <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("OTPVerified"))
        {
            attemptCntReq.OTPVerified = ht["OTPVerified"].ToString().ToLower() == "false" ? false : true;
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing <OTPVerified> Tag");
            return false;
        }

        return true;
    }

    public bool IsValidateSetAttemptCountV2(Hashtable ht, out AttemptCountReq attemptCntReq, out RespModel respModel)
    {

        respModel = new RespModel();
        attemptCntReq = new AttemptCountReq();
        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            respModel.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            respModel.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            respModel.Timestamp = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            attemptCntReq.LoginID = ht["LoginID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing LoginID <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("OTPVerified"))
        {
            attemptCntReq.OTPVerified = ht["OTPVerified"].ToString().ToLower() == "false" ? false : true;
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing <OTPVerified> Tag");
            return false;
        }

        if (ht.ContainsKey("DeviceUID"))
        {
            attemptCntReq.DeviceUID = ht["DeviceUID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing <DeviceUID> Tag");
            return false;
        }


        return true;
    }

    public bool IsValidateSetResendCount(Hashtable ht, out ResendCountReq resendCntReq, out RespModel respModel)
    {
        respModel = new RespModel();
        resendCntReq = new ResendCountReq();
        respModel.RespCode = ((int)Utils.HTTPResponseCodes.Success).ToString();
        respModel.RespDesc = Utils.HTTPResponseCodes.Success.ToDisplayName();

        if (ht.ContainsKey("Version"))
        {
            respModel.Version = ht["Version"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            respModel.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            respModel.Timestamp = ht["MessageID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            resendCntReq.LoginID = ht["LoginID"].ToString();
        }
        else
        {
            respModel.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            respModel.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing LoginID <TimeStamp> Tag");
            return false;
        }

        return true;
    }
    #endregion

    #region CreateUserReq

    public string CreateUserReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ This Is Create User Request $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
        writeLog("ReqXML:" + reqXml);

        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        string resp = bis.RegisterUser(reqXml);
        writeLog("$$$$$$$$$$$$$$$ This Is Create User Response $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
        writeLog("ResXML:" + resp);
        return resp;
    }

    #region CreateUserReq

    bool IsValidateCreateUserReq(Hashtable ht, out CreateUserReq createUReq)
    {
        createUReq = new CreateUserReq();
        createUReq.RespCode = "00";
        createUReq.RespDesc = "Success";

        if (ht.ContainsKey("Version"))
        {
            createUReq.Version = ht["Version"].ToString();

        }
        else
        {
            createUReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            createUReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;

        }
        if (ht.ContainsKey("TimeStamp"))
        {
            createUReq.Timestamp = ht["TimeStamp"].ToString();

        }
        else
        {
            createUReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            createUReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            createUReq.MessageID = ht["MessageID"].ToString();
        }
        else
        {
            createUReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            createUReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            createUReq.PhoneNo = ht["LoginID"].ToString();
        }
        else
        {
            createUReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            createUReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing Name <PhoneNo> Tag");
            return false;
        }
        if (ht.ContainsKey("UserName"))
        {
            createUReq.Name = ht["UserName"].ToString();
        }
        else
        {
            createUReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            createUReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing Name <Name> Tag");
            return false;
        }

        if (String.IsNullOrEmpty(createUReq.Version) || string.IsNullOrEmpty(createUReq.MessageID) || String.IsNullOrEmpty(createUReq.Timestamp) || String.IsNullOrEmpty(createUReq.Name) || String.IsNullOrEmpty(createUReq.PhoneNo))
        {
            createUReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            createUReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return true;

    }

    #endregion

    #region SetPassword
    public string SetPasswordReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ This Is Set Password Request $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
        writeLog("ReqXML:" + reqXml);

        SetPasswordReq setPasswordReq = new SetPasswordReq();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        StringBuilder sb = new StringBuilder();

        if (!IsValidateSetPasswordReq(ht, out setPasswordReq))
        {
            return Utils.GetErrorResponse(setPasswordReq.RespCode, setPasswordReq.RespDesc);
        }

        string errmsg = string.Empty;
        string userid = generateAgUserID(setPasswordReq.UserName);

        if (_agentWCF.SetPassword(setPasswordReq.LoginID, setPasswordReq.Password, setPasswordReq.PasswordSalt, out errmsg))
        {
            try
            {
                sb.Append("<SetPasswordRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + ((int)Utils.HTTPResponseCodes.Success).ToString() + "</ResCode>");
                sb.Append("<ResDesc>" + Utils.HTTPResponseCodes.Success.ToDisplayName() + "</ResDesc>");
                sb.Append("</SetPasswordRes>");
            }
            catch (Exception ex)
            {
                writeLog("Error : " + ex.ToString());
                return Utils.GetErrorResponse(((int)Utils.HTTPResponseCodes.InternalServerError).ToString(), ex.ToString());
            }
        }

        return sb.ToString();
    }

    #region HELPER METHODS
    bool IsValidateSetPasswordReq(Hashtable ht, out SetPasswordReq setPasswordReq)
    {
        setPasswordReq = new SetPasswordReq();
        setPasswordReq.RespCode = "00";
        setPasswordReq.RespDesc = "Success";
        setPasswordReq.Version = string.Empty;
        setPasswordReq.Timestamp = string.Empty;
        setPasswordReq.LoginID = string.Empty;
        setPasswordReq.MessageID = string.Empty;
        setPasswordReq.Password = string.Empty;
        setPasswordReq.PasswordSalt = string.Empty;


        if (ht.ContainsKey("Version"))
        {
            setPasswordReq.Version = ht["Version"].ToString();
        }
        else
        {

            setPasswordReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            setPasswordReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();

            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            setPasswordReq.Timestamp = ht["TimeStamp"].ToString();
        }
        else
        {
            setPasswordReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            setPasswordReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            setPasswordReq.LoginID = ht["LoginID"].ToString();
        }
        else
        {
            setPasswordReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            setPasswordReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing Email <LoginID> Tag");
            return false;
        }



        if (ht.ContainsKey("MessageID"))
        {
            setPasswordReq.Password = ht["MessageID"].ToString();
        }
        else
        {
            setPasswordReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            setPasswordReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Password"))
        {
            setPasswordReq.Password = ht["Password"].ToString();
        }
        else
        {
            setPasswordReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            setPasswordReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("PasswordSalt"))
        {
            setPasswordReq.PasswordSalt = ht["PasswordSalt"].ToString();
        }
        else
        {
            setPasswordReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            setPasswordReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing Password <PasswordSalt> Tag");
            return false;
        }

        if (ht.ContainsKey("UserName"))
        {
            setPasswordReq.UserName = ht["UserName"].ToString();
        }
        else
        {
            setPasswordReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            setPasswordReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Missing UserName <UserName> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(setPasswordReq.Version) || String.IsNullOrEmpty(setPasswordReq.Timestamp) || String.IsNullOrEmpty(setPasswordReq.LoginID) || String.IsNullOrEmpty(setPasswordReq.UserName) || String.IsNullOrEmpty(setPasswordReq.Password))
        {
            setPasswordReq.RespCode = ((int)Utils.HTTPResponseCodes.BadRequest).ToString();
            setPasswordReq.RespDesc = Utils.HTTPResponseCodes.BadRequest.ToDisplayName();
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;
    }

    public static string ComputeHash(string password, string saltKey)
    {
        byte[] saltBytes = null, plainTextBytes = null, plainTextWithSaltBytes = null, hashBytes = null, hashWithSaltBytes = null;
        string hashValue = "";
        HashAlgorithm algorithm = null;

        try
        {
            saltBytes = Convert.FromBase64String(saltKey);

            // Convert plain text into a byte array.
            plainTextBytes = Encoding.UTF8.GetBytes(password);

            // Allocate array, which will hold plain text and salt.
            plainTextWithSaltBytes = new byte[plainTextBytes.Length + saltBytes.Length];

            // Copy plain text bytes into resulting array.
            for (int i = 0; i < plainTextBytes.Length; i++)
                plainTextWithSaltBytes[i] = plainTextBytes[i];

            // Append salt bytes to the resulting array.
            for (int i = 0; i < saltBytes.Length; i++)
                plainTextWithSaltBytes[plainTextBytes.Length + i] = saltBytes[i];

            // Compute hash value of our plain text with appended salt.
            algorithm = new SHA1Managed();
            hashBytes = algorithm.ComputeHash(plainTextWithSaltBytes);

            // Create array which will hold hash and original salt bytes.
            hashWithSaltBytes = new byte[hashBytes.Length + saltBytes.Length];

            // Copy hash bytes into resulting array.
            for (int i = 0; i < hashBytes.Length; i++)
                hashWithSaltBytes[i] = hashBytes[i];

            // Append salt bytes to the result.
            for (int i = 0; i < saltBytes.Length; i++)
                hashWithSaltBytes[hashBytes.Length + i] = saltBytes[i];

            // Convert result into a base64-encoded string.
            hashValue = Convert.ToBase64String(hashWithSaltBytes);
        }
        catch
        {
            throw;
        }
        finally
        {
            saltBytes = null;
            plainTextBytes = null;
            plainTextWithSaltBytes = null;
            hashBytes = null;
            hashWithSaltBytes = null;
        }

        return hashValue;
    }

    public static string stringToBase64(string st)
    {
        byte[] b = new byte[st.Length];
        for (int i = 0; i < st.Length; i++)
        {
            b[i] = Convert.ToByte(st[i]);
        }
        return Convert.ToBase64String(b);
    }

    public string generateAgUserID(string agUserName)
    {

        string userid = getShortName(agUserName);
        int num;

        userid = userid.Substring(0, 5) + "0";
        num = Convert.ToInt16(userid.Substring(5, 1));

        if (num < 9)
        {
            for (int i = num; i < 9; i++)
            {
                userid = userid.Substring(0, 5) + (i + 1).ToString();
                return userid;
            }
        }
        //=====================================

        userid = userid.Substring(0, 4) + "0" + userid.Substring(5, 1);
        num = Convert.ToInt16(userid.Substring(4, 2));
        if (num < 99)
        {
            for (int i = num; i < 99; i++)
            {
                userid = userid.Substring(0, 4) + (i + 1).ToString();
                return userid;
            }
        }
        //=====================================                           
        userid = userid.Substring(0, 3) + "0" + userid.Substring(4, 2);
        num = Convert.ToInt16(userid.Substring(3, 3));
        if (num < 999)
        {
            for (int i = num; i < 999; i++)
            {
                userid = userid.Substring(0, 3) + (i + 1).ToString();
                return userid;
            }
        }
        else
        {
            userid = userid.Substring(0, 2) + "0" + userid.Substring(3, 3);
            num = Convert.ToInt16(userid.Substring(3, 3));
            if (num < 9999)
            {
                for (int i = num; i < 9999; i++)
                {
                    userid = userid.Substring(0, 2) + (i + 1).ToString();
                    return userid;
                }
            }
        }
        return "";
    }

    public static string getShortName(string name)
    {
        string shortName = "";

        string[] nameArr = name.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        if (nameArr.Length == 1)
        {
            if (nameArr[0].Length > 2)
            {
                shortName += nameArr[0].Substring(0, 3);
            }
            else if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
        }
        else if (nameArr.Length == 2)
        {
            if (nameArr[0].Length > 2)
            {
                shortName += nameArr[0].Substring(0, 3);
            }
            else if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
            //==================
            if (nameArr[1].Length > 2)
            {
                shortName += nameArr[1].Substring(0, 3);
            }
            else if (nameArr[1].Length > 1)
            {
                shortName += nameArr[1].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[1].Substring(0, 1);
            }
        }
        else if (nameArr.Length == 3)
        {
            if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
            //==================

            if (nameArr[1].Length > 1)
            {
                shortName += nameArr[1].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[1].Substring(0, 1);
            }
            //==================

            if (nameArr[2].Length > 1)
            {
                shortName += nameArr[2].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[2].Substring(0, 1);
            }
        }
        else
        {
            if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
            //==================

            if (nameArr[1].Length > 1)
            {
                shortName += nameArr[1].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[1].Substring(0, 1);
            }
            //==================

            if (nameArr[3].Length > 1)
            {
                shortName += nameArr[3].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[3].Substring(0, 1);
            }
        }
        shortName = shortName.PadRight(6, '1');
        return shortName.ToLower();
    }
    #endregion

    #endregion

    public string formatDate(string dt)
    {
        DateTime dtTmp = Convert.ToDateTime(dt);
        return dtTmp.ToString("dd/M/yyyy HH:mm:ss");
    }
    #endregion

    #region UserAmountReq by Myat Noe

    public string UserAmountReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string aggrementType = string.Empty;
        string TodayTxnCount = string.Empty;
        string TodayTxnAmount = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        string LogIn_DeviceID = string.Empty;
        string DB_DeviceID = string.Empty;
        string IsPair = string.Empty;
        string devicetoken = string.Empty;
        string agentCode = string.Empty;
        string appVersion = string.Empty;
        string deviceInfo = string.Empty;
        string terminalId = string.Empty;
        string showbal = string.Empty;
        string newappversion = string.Empty;
        string token = string.Empty;
        string agentUserID = string.Empty;
        string loginType = string.Empty;
        var profileId = string.Empty;
        var isDemoModeOn = "N";
        string verifyStatus = string.Empty;
        string verifyDialogueShow = string.Empty;
        string verifyDialogueTitle = string.Empty;
        string isEpaymentAvailable = string.Empty;
        string starRate = string.Empty;

        verifyDialogueShow = ConfigurationManager.AppSettings["VerifyDialogueShow"].ToString();
        newappversion = ConfigurationManager.AppSettings["newversion"].ToString();
        verifyDialogueTitle = ConfigurationManager.AppSettings["VerifyDialogueTitle"];

        string isupdate = "N";
        if (!IsValidateLoginReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out LogIn_DeviceID, out devicetoken, out appVersion, out deviceInfo, out terminalId, out loginType))
        {
            return Utils.GetErrorResponse(code, desp);
        }
        DataSet ds = null;
        string errmsg = string.Empty;

        if (_agentWCF.getAgentUserLogin(email, password, out ds, out errmsg))
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string imgUrl = "";
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        TodayTxnCount = ds.Tables[1].Rows[0]["TODAYTXNCOUNT"] == null ? "0" : ds.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                    }

                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        TodayTxnAmount = ds.Tables[2].Rows[0]["TODAYTXNAMOUNT"] == null ? "0" : ds.Tables[2].Rows[0]["TODAYTXNAMOUNT"].ToString();
                    }

                    string botStdBarCodeStr = Utils.getCBMStandard("0000000000005", "", this.agentcode, "000000000000", "10000");

                    writeLog("BarCode String " + botStdBarCodeStr + " AgentCOde " + this.agentcode);

                    string barcodeurl = Utils.generateQRCode(botStdBarCodeStr, agentcode);
                    agentUserID = ds.Tables[0].Rows[0]["AGENTUSERID"].ToString();
                    string branchcode = ds.Tables[0].Rows[0]["BRANCHCODE"] == null ? "-" : ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    string branchname = ds.Tables[0].Rows[0]["BRANCHNAME"] == null ? "-" : ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    string branchaddress = ds.Tables[0].Rows[0]["BRANCHADDRESS"] == null ? "-" : ds.Tables[0].Rows[0]["BRANCHADDRESS"].ToString();
                    string supportphone = ds.Tables[0].Rows[0]["SUPPORTPHONE"] == null ? "-" : ds.Tables[0].Rows[0]["SUPPORTPHONE"].ToString();
                    string creditlimit = ds.Tables[0].Rows[0]["CREDITLIMIT"] == null ? "-" : ds.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                    string creditterm = ds.Tables[0].Rows[0]["CREDITTERM"] == null ? "-" : ds.Tables[0].Rows[0]["CREDITTERM"].ToString();
                    string credittermstart = ds.Tables[0].Rows[0]["CREDITTERMSTART"] == null ? "-" : ds.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                    aggrementType = ds.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 31-03-2015
                    DB_DeviceID = ds.Tables[0].Rows[0]["DEVICEUID"].ToString();
                    IsPair = ds.Tables[0].Rows[0]["ISPAIRED"].ToString();
                    string MobileAppVersion = appVersion.Replace(".", "");
                    string BackendAppVersion = newappversion.Replace(".", "");
                    isupdate = (int.Parse(MobileAppVersion) >= int.Parse(BackendAppVersion)) ? "N" : "Y";
                    agentCode = ds.Tables[0].Rows[0]["AGENTCODE"].ToString();
                    showbal = (ds.Tables[0].Rows[0]["SHOWBALANCE"] == DBNull.Value) ? "N" : ds.Tables[0].Rows[0]["SHOWBALANCE"].ToString();
                    token = (ds.Tables[0].Rows[0]["Token"] == DBNull.Value) ? "TokenExpired" : ds.Tables[0].Rows[0]["Token"].ToString();

                    var merchantDs = new DataSet();
                    var isMerchant = "N";

                    isEpaymentAvailable = "N";
                    if (_agentWCF.CheckIsMerchant(agentCode, string.Empty, out merchantDs, out errmsg) && (merchantDs.Tables[0].Rows.Count > 0))
                    {
                        foreach (DataRow merchant in merchantDs.Tables[0].Rows)
                        {
                            if (merchant["IsActiveMerchant"] != null && merchant["IsActiveMerchant"].ToString() == "Y")
                            {
                                isEpaymentAvailable = "Y";
                                break;
                            }
                        }
                    }

                    profileId = ds.Tables[0].Rows[0]["PROFILEID"] == null ? "-" : ds.Tables[0].Rows[0]["PROFILEID"].ToString();
                    var profileList = ConfigurationManager.AppSettings["ProfileList"].ToString();
                    if (!string.IsNullOrEmpty(profileList) && (!string.IsNullOrEmpty(profileId)))
                    {
                        var thisProfileList = profileList.Split(',').ToList();
                        var thisProfile = thisProfileList.FirstOrDefault(x => x == profileId);
                        if (!string.IsNullOrEmpty(thisProfile))
                        {
                            isDemoModeOn = "Y";
                        }
                    }

                    verifyStatus = ds.Tables[0].Rows[0]["VerifyStatus"].ToString();
                    starRate = ds.Tables[0].Rows[0]["StarRate"].ToString();

                    code = "00";
                    desp = "Success";
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<LoginRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<MessageID>" + messageID + "</MessageID>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desp + "</ResDesc>");
                    sb.Append("<UserName>" + ds.Tables[0].Rows[0]["AGENTUSERNAME"].ToString() + "</UserName>");
                    sb.Append("<AgentID>" + ds.Tables[0].Rows[0]["AGENTID"].ToString() + "</AgentID>");
                    sb.Append("<AgentName>" + ds.Tables[0].Rows[0]["AGENTNAME"].ToString() + "</AgentName>");
                    sb.Append("<AgentLogo>" + imgUrl + "</AgentLogo>");
                    sb.Append("<AgentCode>" + agentCode + "</AgentCode>");
                    sb.Append("<AggrementType>" + aggrementType + "</AggrementType>");
                    sb.Append("<Balance>" + ds.Tables[0].Rows[0]["AVAILABLEBALANCE"].ToString() + "</Balance>");
                    sb.Append("<UserLevel>" + ds.Tables[0].Rows[0]["USERLEVEL"].ToString() + "</UserLevel>");
                    sb.Append("<BranchCode>" + branchcode + "</BranchCode>");
                    sb.Append("<BranchName>" + branchname + "</BranchName>");
                    sb.Append("<BranchAddress>" + HttpUtility.HtmlEncode(branchaddress) + "</BranchAddress>");
                    sb.Append("<SupportPhone>" + supportphone + "</SupportPhone>");
                    sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                    sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                    sb.Append("<CreditLimitAmount>" + creditlimit + "</CreditLimitAmount >");
                    sb.Append("<CreditLimitDay>" + creditterm + "</CreditLimitDay>");
                    sb.Append("<CreditLimitStartDay>" + credittermstart + "</CreditLimitStartDay>");
                    sb.Append("<ShowBalance>" + showbal + "</ShowBalance>");
                    sb.Append("<IsUpdate>" + isupdate + "</IsUpdate>");
                    sb.Append("<MyQR>" + barcodeurl + "</MyQR>");
                    sb.Append("<AgentUserID>" + agentUserID + "</AgentUserID>");
                    sb.Append("<Token>" + token + "</Token>");
                    sb.Append("<IsMerchant>" + isMerchant + "</IsMerchant>");
                    sb.Append("<IsEpaymentAvailable>" + isEpaymentAvailable + "</IsEpaymentAvailable>");
                    sb.Append("<IsDemoModeOn>" + isDemoModeOn + "</IsDemoModeOn>");
                    sb.Append("<VerifyStatus>" + verifyStatus + "</VerifyStatus>");
                    sb.Append("<VerifyDialogueShow>" + verifyDialogueShow + "</VerifyDialogueShow>");
                    sb.Append("<VerifyDialogueTitle>" + verifyDialogueTitle + "</VerifyDialogueTitle>");
                    sb.Append("<StarRate>" + starRate + "</StarRate>");
                    sb.Append("</LoginRes>");
                    return sb.ToString();
                }
            }
            catch (Exception ex)
            {

                writeLog("Error In Login Req" + ex.Message);
            }


        }
        return string.Empty;
    }

    #endregion

    #region CheckTokenReq

    public string CheckTokenReq(string reqXML)
    {
        var sb = new StringBuilder();
        sb.Append("<CheckTokenRes>");
        sb.Append("<Version>1.0</Version>");
        sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
        sb.Append("<ResCode>00</ResCode>");
        sb.Append("<ResDesc>Success</ResDesc>");
        sb.Append("</CheckTokenRes>");

        return sb.ToString();
    }

    #endregion

    public string UpdateLoginIDReq(string reqXml)
    {
        writeLog("****************** THIS IS UpdateLoginIDReq ******************");
        writeLog("****************** reqXML ****************** : "+reqXml);
        var updateLoginReq = new UpdateLoginReq();
        var respModel = new RespModel();
        var sb = new StringBuilder();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidUpdateLoginReq(ht, out updateLoginReq, out respModel)) return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);

        string errMessage = "";
        try
        {
            if (_agentWCF.updateLoginID(updateLoginReq.AgentUserID, updateLoginReq.PhNo, updateLoginReq.NewPassword, out errMessage))
            {
                sb.Append("<UpdateLoginIDRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + ((int)Utils.HTTPResponseCodes.Success).ToString() + "</ResCode>");
                sb.Append("<ResDesc>" + Utils.HTTPResponseCodes.Success.ToDisplayName() + "</ResDesc>");
                sb.Append("</UpdateLoginIDRes>");
            }
            else
            {
                return Utils.GetErrorResponse("06", errMessage);
            }
        }
        catch (Exception ex)
        {
            return Utils.GetErrorResponse(((int)Utils.HTTPResponseCodes.InternalServerError).ToString(), ex.ToString());
        }
        return sb.ToString();
    }

    public string CheckExistingAgentUserIDReq(string reqXml)
    {
        writeLog("****************** CheckExistingLoginID ******************");

        var checkExistingAgentUserIDReq = new CheckExistingAgentUserIDReq();
        var respModel = new RespModel();
        var sb = new StringBuilder();

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidCheckExistingAgentUserIDReq(ht, out checkExistingAgentUserIDReq, out respModel))
        {
            return Utils.GetErrorResponse(respModel.RespCode, respModel.RespDesc);
        }

        string errMessage = "";
        try
        {
            if (_agentWCF.checkExistingAgentUserID(checkExistingAgentUserIDReq.AgentUserID, out errMessage))
            {
                sb.Append("<CheckExistingAgentUserIDRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + ((int)Utils.HTTPResponseCodes.Success).ToString() + "</ResCode>");
                sb.Append("<ResDesc>" + Utils.HTTPResponseCodes.Success.ToDisplayName() + "</ResDesc>");
                sb.Append("</CheckExistingAgentUserIDRes>");
                return sb.ToString();
            }
            return Utils.GetErrorResponse(((int)Utils.HTTPResponseCodes.InternalServerError).ToString(), errMessage);
        }
        catch (Exception ex)
        {
            writeLog("Error : " + ex.ToString());
            return Utils.GetErrorResponse(((int)Utils.HTTPResponseCodes.InternalServerError).ToString(), ex.ToString());
        }
    }

    private bool IsValidateBaseRequestParamters(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string messageID)
    {
        code = string.Empty;
        desp = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Message ID <MessageID> Tag");
            return false;
        }

        return true;
    }

    private bool IsValidateBaseRequestParamters(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string messageID)
    {
        code = string.Empty;
        desp = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        messageID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Message ID <MessageID> Tag");
            return false;
        }

        return true;
    }

    #region New_TransactionListReq

    public string TxnReq(string reqXml)
    {
        string code = string.Empty;
        string desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        int txnperpage = 0, pageno = 0;
        string locLatitude = string.Empty;
        string locLongitude = string.Empty;
        string smsMsg = string.Empty;
        string NRC = string.Empty;
        string expirye = string.Empty;
        string type = string.Empty;
        string agentid = string.Empty;
        string agentuseruniqueid = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);


        if (!IsValidateTxnReq(ht, out code, out desp, out version, out ts, out email, out password, out txnperpage, out pageno, out messageID, out type, out agentid, out agentuseruniqueid))
        {
            return Utils.GetErrorResponse(code, desp);
        }
        string errmsg = string.Empty;
        DataSet ds = null;

        if (type == "A")
        {
            if (_agentWCF.getAllTransaction(this.agentcode, agentid, email, txnperpage, pageno, out ds, out errmsg))
            {
                try
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<TxnRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" topup_total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" txn_total=" + "\"" + ds.Tables[3].Rows[0][0].ToString() + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[2].Rows.Count; i++)
                        {
                            string imgURL = string.Empty;
                            try
                            {
                                imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString() + ".png";
                            }
                            catch (Exception ex)
                            {
                                writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                            }

                            decimal agentFee = Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[2].Rows[i]["SERVICEFEE"].ToString()) ? "0" : ds.Tables[2].Rows[i]["SERVICEFEE"].ToString());
                            decimal total = agentFee + Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[2].Rows[i]["TRANSACTIONAMOUNT"].ToString()) ? "0" : ds.Tables[2].Rows[i]["TRANSACTIONAMOUNT"].ToString());
                            string agentName = ds.Tables[2].Rows[i]["AGENTNAME"].ToString();

                            string REFID2;
                            string REFID1, REFID1Name = string.Empty;
                            string REFID3, REFID3Name = string.Empty;
                            string biller;
                            string amount;
                            double totalAmount = 0;
                            string ref3Value;
                            string serviceFee;
                            string ref1Name;
                            string ref1Value;
                            string ref2Value;
                            string ref2Name;
                            string txnID;
                            string taxID;
                            string ref4Value;
                            string mapTaxID = string.Empty;
                            REFID1 = ds.Tables[2].Rows[i]["REFID1"].ToString();
                            REFID1Name = ds.Tables[2].Rows[i]["REF1NAME"].ToString();
                            REFID2 = ds.Tables[2].Rows[i]["REFID2"].ToString();
                            REFID3 = ds.Tables[2].Rows[i]["REFID3"].ToString();
                            REFID3Name = ds.Tables[2].Rows[i]["REF3NAME"].ToString();
                            biller = ds.Tables[2].Rows[i]["COMPANYNAME"].ToString();

                            ref1Value = ds.Tables[2].Rows[i]["REFID1"].ToString();
                            ref1Name = ds.Tables[2].Rows[i]["REF1NAME"].ToString();
                            ref2Value = ds.Tables[2].Rows[i]["REFID2"].ToString();
                            ref2Name = ds.Tables[2].Rows[i]["REF2NAME"].ToString();
                            ref3Value = ds.Tables[2].Rows[i]["REFID3"].ToString();
                            ref4Value = ds.Tables[2].Rows[i]["REFID4"].ToString();


                            taxID = ds.Tables[2].Rows[i]["TAXID"].ToString();
                            txnID = ds.Tables[2].Rows[i]["TRANSACTIONID"].ToString();
                            mapTaxID = ds.Tables[2].Rows[i]["MAPTAXID"].ToString();

                            amount = ds.Tables[2].Rows[i]["TRANSACTIONAMOUNT"].ToString();
                            serviceFee = ds.Tables[2].Rows[i]["SERVICEFEE"].ToString();

                            if (
                                mapTaxID == "0000000000006" ||
                                mapTaxID == "0000000000017" ||

                                mapTaxID == "0000000000019" ||
                                mapTaxID == "1230000000000")
                            {

                                REFID3 = "";
                                REFID3Name = "";
                            }
                            if (mapTaxID == "0000000000018" || mapTaxID == "0000000000010")
                            {
                                REFID1 = "";
                                REFID1Name = "";
                            }
                            if (mapTaxID == "0000000000019")
                            {
                                string[] words = ref4Value.Split(' ');
                                NRC = words[0].ToString();
                                expirye = words[1].ToString();
                            }

                            SMSHelper smsH = new SMSHelper();
                            writeLog("TaxID : " + taxID + "MapTaxID:" + mapTaxID);

                            if (mapTaxID == "0000000000028")//MMS Biller
                            {
                                string[] words = ref4Value.Split(' ');
                                string PIN = words[0].ToString();
                                string Expiry = words[1].ToString();
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessagelegacyMusic(agentName, mapTaxID, biller, "PIN", "", "", "Ref", PIN, "", "", txnID.ToString(),
                                      double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            }
                            else if (mapTaxID == "2222222222222" || mapTaxID == "3333333333333" || mapTaxID == "4444444444444"
                               || mapTaxID == "5555555555555" || mapTaxID == "6666666666666" || mapTaxID == "0000000000024" ||
                                mapTaxID == "0000000000054" || mapTaxID == "0000000000061" || mapTaxID == "0000000000062" || mapTaxID == "0000000000063" || mapTaxID == "0000000000064" || mapTaxID == "0000000000065" || mapTaxID == "0000000000066") //CDMA800/MPTGSM/MECTEL/TELENOR/OOREDOO/CDMA450/MYTEL Biller
                            {
                                writeLog("This is Telcos Topup.");
                                if (!IsOoredooEPin(mapTaxID)) REFID3 = Utils.maskString(REFID3);

                                smsMsg = string.Empty;
                                string[] words = ref4Value.Split(' ');
                                string PIN = words[0].ToString();
                                string Expiry = words[1].ToString();
                                if (ref3Value != "Airtime")
                                {
                                    smsMsg = smsH.getMessageTopup(agentName, mapTaxID, biller, PIN, ref3Value, Expiry,
                                       double.Parse(amount).ToString("#,###.00"), branchCode); //updated by hnt 20-March-2015 change biller Name to Biller
                                }



                            }
                            else if (mapTaxID == "0000000000001" || mapTaxID == "0000000000002" || mapTaxID == "0000000000003" || mapTaxID == "0000000000004" || mapTaxID == "0000000000015" || mapTaxID == "0000000000016" || mapTaxID == "0000000000030" || mapTaxID == "1111111111111" || mapTaxID == "0000000000012" || mapTaxID == "0000000000057" || mapTaxID == ConfigurationManager.AppSettings["SteamWalletSGDMapTaxId"].ToString())
                            {
                                //iTune/GooglePlay/Skype/Myantalk/SteamWallet/FaceBook/Vakok
                                writeLog("This is GiftCards.");
                                string[] words = ref4Value.Split(' ');
                                string PIN = words[0].ToString();
                                string Expiry = words[1].ToString();
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);

                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000029")//RENT2Own
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, "Contract No", "", "", "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                          double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            }
                            else if (mapTaxID == "0000000000005")
                            {
                                smsMsg = string.Empty;
                            }
                            else if (mapTaxID == "0000000000050")
                            {
                                writeLog("This is 1Stop+");
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller1Stop(agentName, mapTaxID, biller, ref1Name, ref2Name, "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                               double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000017")//EasyPoints/
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Description", "", "Ref", ref3Value, ref2Value, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000018" || mapTaxID == "0000000000010")//MLM/MercyCorpsGenerate
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Description", "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000006")//Putet
                            {
                                writeLog("This is Putet.");
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Duration", "", "Ref", ref3Value, ref2Value, "", txnID.ToString(),
                                           double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000019")//GGISnakeBite
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, "Policy No", "Ref", "", "", ref1Value, txnID.ToString(), expirye, "",
                                     double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            }
                            else if (mapTaxID == "0000000000022")//METERBILL
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, ref1Name, REFID3Name, "Receipt No", "Ref", ref1Value, ref3Value, ref2Value, txnID.ToString(),
                                                   double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000023")//MahaRepayment
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, "Slip No", "Customer ID", "Receipt No", "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                              double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            }
                            else if (mapTaxID == "0000000000031")//4TV
                            {
                                string[] words = ref4Value.Split(' ');
                                string Expiry = words[1].ToString();
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, REFID3Name, "Expiry", "Ref", ref1Value, ref3Value, Expiry, txnID.ToString(),
                                                      double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000052")//CanalPlus
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, REFID3Name, "Expiry", "Ref", ref1Value, ref3Value, ref4Value, txnID.ToString(),
                                                      double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000032")//123 Remit CashIn
                            {
                                writeLog("This is CashIn.");
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Payer Name", "", "", "Ref", ref2Value, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000033")//123 Remit CashOut
                            {
                                writeLog("This is CashOut.");
                                totalAmount = double.Parse(amount) - double.Parse(serviceFee);
                                total = Convert.ToDecimal(totalAmount);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Payee Name", "", "", "Ref", ref2Value, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }

                            else if (mapTaxID == "0000000000055")//iflix
                            {
                                writeLog("This is iflix.");
                                string[] words = ref4Value.Split(' ');
                                string PIN = words[0].ToString();
                                string Expiry = words[1].ToString();


                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000058")
                            {
                                writeLog("This is TelenorBB.");
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, "IME/Expiry", REFID3Name, "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                                   double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }

                            else
                            {

                                writeLog("This is Bill Payment & Others.");

                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);


                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, ref2Name, "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                               double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);



                            }

                            if (mapTaxID != "0000000000019")
                            {
                                sb.Append("<Txn type=S txnID=" + "\"" + ds.Tables[2].Rows[i]["TRANSACTIONID"].ToString() + "\" txnDate=" + "\"" +
                                    ds.Tables[2].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                    ds.Tables[2].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                    ds.Tables[2].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                    REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                    REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                    ds.Tables[2].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                    REFID1Name + "\" ref2Name=" + "\"" +
                                    ds.Tables[2].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name + "\" ref4Name=" + "\"" +
                                    ds.Tables[2].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                    ds.Tables[2].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                    ds.Tables[2].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                    ds.Tables[2].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" + imgURL + "\" locLatitude=" + "\"" +
                                    ds.Tables[2].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                    ds.Tables[2].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee + "\" total=" + "\"" +
                                    total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg + "\"  TaxID=" + "\"" + taxID + "\" />");
                            }
                            else
                            {
                                sb.Append("<Txn type=S txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() + "\" txnDate=" + "\"" +
                                       ds.Tables[2].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                       ds.Tables[2].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                       ds.Tables[2].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                       ds.Tables[2].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                       NRC + "\" ref4=" + "\"" + NRC + " " + expirye + "\" ref5=" + "\"" +
                                       ds.Tables[2].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                       ds.Tables[2].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                       ds.Tables[2].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + "NRC" + "\" ref4Name=" + "\"" +
                                       "NRC/Expiry" + "\" ref5Name=" + "\"" +
                                       ds.Tables[2].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                       ds.Tables[2].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                       ds.Tables[2].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" + imgURL + "\" locLatitude=" + "\"" +
                                       ds.Tables[2].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                       ds.Tables[2].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee + "\" total=" + "\"" +
                                       total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg + "\"  TaxID=" + "\"" + taxID + "\" />");

                            }
                        }


                    }

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            string imgURL = string.Empty;
                            string smsmsg = string.Empty;
                            string payercode = string.Empty;
                            string payername = string.Empty;
                            try
                            {
                                string biller = GetBillerName(ds.Tables[0].Rows[i]["PAN"].ToString());
                                imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + biller + ".png";
                                if (ds.Tables[0].Rows[i]["PAN"].ToString() == "MercyCorps")
                                {
                                    smsmsg = getMessageBillerMercyCrops(ds.Tables[0].Rows[i]["AGENTNAME"].ToString(), "", "Mercy-Corps Redeem", "Digital Code", "Partner Code", "", "Ref", ds.Tables[0].Rows[i]["APPROVALCODE"].ToString(), ds.Tables[0].Rows[i]["AGENTCODE"].ToString(), "", ds.Tables[0].Rows[i]["TRANREF"].ToString(),
                                         ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString(), ds.Tables[0].Rows[i]["TOPUPFEE"].ToString(), (double.Parse(ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString()) + double.Parse(ds.Tables[0].Rows[i]["TOPUPFEE"].ToString())).ToString("#,##0.00"), branchCode);
                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                            }

                            if ((ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["pan"].ToString().Trim()) || (ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["zalaPan"].ToString()))
                            {
                                payercode = (ds.Tables[0].Rows[i]["REF1"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["REF1"].ToString());
                                payername = (ds.Tables[0].Rows[i]["PAYERNAME"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["PAYERNAME"].ToString());
                            }
                            else
                            {
                                payercode = (ds.Tables[0].Rows[i]["INVOICENO"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["INVOICENO"].ToString());
                                payername = (ds.Tables[0].Rows[i]["RESPCODE"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["RESPCODE"].ToString());
                            }


                            sb.Append("<Topup type=R partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AGENTCODE"].ToString() + "\" partnerName=" + "\"" +
                                ds.Tables[0].Rows[i]["AGENTNAME"].ToString() + "\" pan=" + "\"" +
                                ds.Tables[0].Rows[i]["PAN"].ToString() + "\" invoiceNo=" + "\"" +
                                payercode + "\" responseCode=" + "\"" +
                                payername + "\" approvalCode=" + "\"" +
                                ds.Tables[0].Rows[i]["APPROVALCODE"].ToString() + "\" txnRef=" + "\"" +
                                ds.Tables[0].Rows[i]["TRANREF"].ToString() + "\" txnDateTime=" + "\"" +
                                ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" amount=" + "\"" +
                                ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString() + "\" fee=" + "\"" +
                                ds.Tables[0].Rows[i]["TOPUPFEE"].ToString() + "\" status=" + "\"" +
                                ds.Tables[0].Rows[i]["TOPUPSTATUS"].ToString() + "\" topupDateTime=" + "\"" +

                                ds.Tables[0].Rows[i]["TOPUPDATE"].ToString() + "\" billerLogo=" + "\"" +
                                imgURL + "\" SMS=" + "\"" + smsmsg + "\" />");
                        }
                    }
                    sb.Append("</TxnRes>");
                    return sb.ToString();
                }
                catch (Exception ex)
                {
                    writeLog("Error in TxnReq : " + ex.ToString());
                }


            }
        }
        else if (type == "S")
        {
            if (_agentWCF.getTransactionlist(this.agentcode, email, txnperpage, pageno, out ds, out errmsg))
            {
                try
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<TxnRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            string imgURL = string.Empty;
                            try
                            {

                                imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + ds.Tables[0].Rows[i]["BILLERID"].ToString() + ".png";
                            }
                            catch (Exception ex)
                            {
                                writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                            }

                            decimal agentFee = Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["SERVICEFEE"].ToString()) ? "0" : ds.Tables[0].Rows[i]["SERVICEFEE"].ToString());
                            decimal total = agentFee + Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString()) ? "0" : ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString());
                            string agentName = ds.Tables[0].Rows[i]["AGENTNAME"].ToString();

                            string REFID2;
                            string REFID1, REFID1Name = string.Empty;
                            string REFID3, REFID3Name = string.Empty;
                            string biller;
                            string amount;
                            double totalAmount = 0;
                            string ref3Value;
                            string serviceFee;
                            string ref1Name;
                            string ref1Value;
                            string ref2Value;
                            string ref2Name;
                            string txnID;
                            string taxID;
                            string ref4Value;
                            string mapTaxID = string.Empty;
                            REFID1 = ds.Tables[0].Rows[i]["REFID1"].ToString();
                            REFID1Name = ds.Tables[0].Rows[i]["REF1NAME"].ToString();
                            REFID2 = ds.Tables[0].Rows[i]["REFID2"].ToString();
                            REFID3 = ds.Tables[0].Rows[i]["REFID3"].ToString();
                            REFID3Name = ds.Tables[0].Rows[i]["REF3NAME"].ToString();
                            biller = ds.Tables[0].Rows[i]["COMPANYNAME"].ToString();

                            ref1Value = ds.Tables[0].Rows[i]["REFID1"].ToString();
                            ref1Name = ds.Tables[0].Rows[i]["REF1NAME"].ToString();
                            ref2Value = ds.Tables[0].Rows[i]["REFID2"].ToString();
                            ref2Name = ds.Tables[0].Rows[i]["REF2NAME"].ToString();
                            ref3Value = ds.Tables[0].Rows[i]["REFID3"].ToString();
                            ref4Value = ds.Tables[0].Rows[i]["REFID4"].ToString();


                            taxID = ds.Tables[0].Rows[i]["TAXID"].ToString();
                            txnID = ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString();
                            mapTaxID = ds.Tables[0].Rows[i]["MAPTAXID"].ToString();

                            amount = ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString();
                            serviceFee = ds.Tables[0].Rows[i]["SERVICEFEE"].ToString();

                            if (
                                mapTaxID == "0000000000006" ||
                                mapTaxID == "0000000000017" ||

                                mapTaxID == "0000000000019" ||
                                mapTaxID == "1230000000000")
                            {


                                REFID3 = "";
                                REFID3Name = "";
                            }
                            if (mapTaxID == "0000000000018" || mapTaxID == "0000000000010")
                            {
                                REFID1 = "";
                                REFID1Name = "";
                            }
                            if (mapTaxID == "0000000000019")
                            {
                                string[] words = ref4Value.Split(' ');
                                NRC = words[0].ToString();
                                expirye = words[1].ToString();
                            }

                            SMSHelper smsH = new SMSHelper();
                            writeLog("TaxID : " + taxID + "MapTaxID:" + mapTaxID);

                            if (mapTaxID == "0000000000028")//MMS Biller
                            {
                                string[] words = ref4Value.Split(' ');
                                string PIN = words[0].ToString();
                                string Expiry = words[1].ToString();
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessagelegacyMusic(agentName, mapTaxID, biller, "PIN", "", "", "Ref", PIN, "", "", txnID.ToString(),
                                      double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            }
                            else if (mapTaxID == "2222222222222" || mapTaxID == "3333333333333" || mapTaxID == "4444444444444"
                               || mapTaxID == "5555555555555" || mapTaxID == "6666666666666" || mapTaxID == "0000000000024" ||
                                mapTaxID == "0000000000054" || mapTaxID == "0000000000061" || mapTaxID == "0000000000062" || mapTaxID == "0000000000063" || mapTaxID == "0000000000064" || mapTaxID == "0000000000065" || mapTaxID == "0000000000066") //CDMA800/MPTGSM/MECTEL/TELENOR/OOREDOO/CDMA450/MYTEL Biller
                            {
                                writeLog("This is Telcos Topup.");
                                REFID3 = Utils.maskString(REFID3);
                                smsMsg = string.Empty;
                                string[] words = ref4Value.Split(' ');
                                string PIN = words[0].ToString();
                                string Expiry = words[1].ToString();
                                if (ref3Value != "Airtime")
                                {
                                    smsMsg = smsH.getMessageTopup(agentName, mapTaxID, biller, PIN, ref3Value, Expiry,
                                       double.Parse(amount).ToString("#,###.00"), branchCode); //updated by hnt 20-March-2015 change biller Name to Biller
                                }



                            }
                            else if (mapTaxID == "0000000000001" || mapTaxID == "0000000000002" || mapTaxID == "0000000000003" || mapTaxID == "0000000000004" || mapTaxID == "0000000000015" || mapTaxID == "0000000000016" || mapTaxID == "0000000000030" || mapTaxID == "1111111111111" || mapTaxID == "0000000000012" || mapTaxID == "0000000000057" || mapTaxID == ConfigurationManager.AppSettings["SteamWalletSGDMapTaxId"].ToString())
                            {
                                //iTune/GooglePlay/Skype/Myantalk/SteamWallet/FaceBook/Vakok
                                writeLog("This is GiftCards.");
                                string[] words = ref4Value.Split(' ');
                                string PIN = words[0].ToString();
                                string Expiry = words[1].ToString();
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                if (mapTaxID == "0000000000030")//Vakok
                                {
                                    smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Serial", "Expiry", "Ref", PIN, ref3Value, Expiry, txnID.ToString(),
                                              double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                                }
                                else
                                {
                                    smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                                }



                            }
                            else if (mapTaxID == "0000000000029")//RENT2Own
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, "Contract No", "", "", "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                          double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            }
                            else if (mapTaxID == "0000000000005")
                            {
                                smsMsg = string.Empty;
                            }
                            else if (mapTaxID == "0000000000050")
                            {
                                writeLog("This is 1Stop+");
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller1Stop(agentName, mapTaxID, biller, ref1Name, ref2Name, "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                               double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000017")//EasyPoints/
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Description", "", "Ref", ref3Value, ref2Value, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000018" || mapTaxID == "0000000000010")//MLM/MercyCorpsGenerate
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Description", "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000006")//Putet
                            {
                                writeLog("This is Putet.");
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Duration", "", "Ref", ref3Value, ref2Value, "", txnID.ToString(),
                                           double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000019")//GGISnakeBite
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, "Policy No", "Ref", "", "", ref1Value, txnID.ToString(), expirye, "",
                                     double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            }
                            else if (mapTaxID == "0000000000022")//METERBILL
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, ref1Name, REFID3Name, "Receipt No", "Ref", ref1Value, ref3Value, ref2Value, txnID.ToString(),
                                                   double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000023")//MahaRepayment
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBillerGGI(agentName, mapTaxID, biller, "Slip No", "Customer ID", "Receipt No", "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                              double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);

                            }
                            else if (mapTaxID == "0000000000031")//4TV
                            {
                                string[] words = ref4Value.Split(' ');
                                string Expiry = words[1].ToString();
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, REFID3Name, "Expiry", "Ref", ref1Value, ref3Value, Expiry, txnID.ToString(),
                                                      double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000052")//CanalPlus
                            {
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, REFID3Name, "Expiry", "Ref", ref1Value, ref3Value, ref4Value, txnID.ToString(),
                                                      double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000032")//123 Remit CashIn
                            {
                                writeLog("This is CashIn.");
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Payer Name", "", "", "Ref", ref2Value, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000033")//123 Remit CashOut
                            {
                                writeLog("This is CashOut.");
                                totalAmount = double.Parse(amount) - double.Parse(serviceFee);
                                total = Convert.ToDecimal(totalAmount);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, biller, "Payee Name", "", "", "Ref", ref2Value, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }

                            else if (mapTaxID == "0000000000055")//iflix
                            {
                                writeLog("This is iflix.");
                                string[] words = ref4Value.Split(' ');
                                string PIN = words[0].ToString();
                                string Expiry = words[1].ToString();


                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount.ToString("#,##0.00"), branchCode);
                            }
                            else if (mapTaxID == "0000000000058")
                            {
                                writeLog("This is TelenorBB.");
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);
                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, "IME/Expiry",
                                    REFID3Name, "Ref", ref1Value, ref2Value, ref3Value, txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                    totalAmount.ToString("#,##0.00"), branchCode);
                            }

                            else
                            {

                                writeLog("This is Bill Payment & Others.");
                                totalAmount = double.Parse(amount) + double.Parse(serviceFee);

                                smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, ref2Name, "",
                                    "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                    totalAmount.ToString("#,##0.00"), branchCode);
                            }

                            if (mapTaxID != "0000000000019")
                            {
                                sb.Append("<Txn type=S txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() + "\" txnDate=" + "\"" +
                                    ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                    ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                    ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                    REFID1 + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                    REFID3 + "\" ref4=" + "\"" + ref4Value + "\" ref5=" + "\"" +
                                    ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                    REFID1Name + "\" ref2Name=" + "\"" +
                                    ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + REFID3Name + "\" ref4Name=" + "\"" +
                                    ds.Tables[0].Rows[i]["REF4NAME"].ToString() + "\" ref5Name=" + "\"" +
                                    ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                    ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                    ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" + imgURL + "\" locLatitude=" + "\"" +
                                    ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                    ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee + "\" total=" + "\"" +
                                    total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg + "\"  TaxID=" + "\"" + taxID + "\" />");
                            }
                            else
                            {
                                sb.Append("<Txn type=S txnID=" + "\"" + ds.Tables[0].Rows[i]["TRANSACTIONID"].ToString() + "\" txnDate=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" txnDesc=" + "\"" +
                                       ds.Tables[0].Rows[i]["PRODUCTDESC"].ToString() + "\" txnAmount=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONAMOUNT"].ToString() + "\" ref1=" + "\"" +
                                       ds.Tables[0].Rows[i]["REFID1"].ToString() + "\" ref2=" + "\"" + REFID2 + "\" ref3=" + "\"" +
                                       NRC + "\" ref4=" + "\"" + NRC + " " + expirye + "\" ref5=" + "\"" +
                                       ds.Tables[0].Rows[i]["REFID5"].ToString() + "\" ref1Name=" + "\"" +
                                       ds.Tables[0].Rows[i]["REF1NAME"].ToString() + "\" ref2Name=" + "\"" +
                                       ds.Tables[0].Rows[i]["REF2NAME"].ToString() + "\" ref3Name=" + "\"" + "NRC" + "\" ref4Name=" + "\"" +
                                       "NRC/Expiry" + "\" ref5Name=" + "\"" +
                                       ds.Tables[0].Rows[i]["REF5NAME"].ToString() + "\" BillerName=" + "\"" +
                                       ds.Tables[0].Rows[i]["COMPANYNAME"].ToString() + "\" txnStatus=" + "\"" +
                                       ds.Tables[0].Rows[i]["TRANSACTIONSTATUS"].ToString() + "\" billerLogo=" + "\"" + imgURL + "\" locLatitude=" + "\"" +
                                       ds.Tables[0].Rows[i]["LATITUDE"].ToString() + "\" locLongitude=" + "\"" +
                                       ds.Tables[0].Rows[i]["LONGITUDE"].ToString() + "\" agentFee=" + "\"" + agentFee + "\" total=" + "\"" +
                                       total + "\" agentName=" + "\"" + agentName + "\" sms=" + "\"" + smsMsg + "\"  TaxID=" + "\"" + taxID + "\" />");

                            }
                        }
                    }
                    sb.Append("</TxnRes>");
                    return sb.ToString();
                }
                catch (Exception ex)
                {
                    writeLog("Error in TxnListReq : " + ex.ToString());
                }
            }
        }
        else
        {
            if (_agentWCF.getTopupHistoryList(pageno, txnperpage, agentid, agentuseruniqueid, out ds, out errmsg))
            {
                try
                {
                    StringBuilder sb = new StringBuilder();
                    sb.Append("<TxnRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            string imgURL = string.Empty;
                            string smsmsg = string.Empty;
                            string payercode = string.Empty;
                            string payername = string.Empty;
                            try
                            {
                                string biller = GetBillerName(ds.Tables[0].Rows[i]["PAN"].ToString());
                                imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + biller + ".png";
                                if (ds.Tables[0].Rows[i]["PAN"].ToString() == "MercyCorps")
                                {
                                    smsmsg = getMessageBillerMercyCrops(ds.Tables[0].Rows[i]["AGENTNAME"].ToString(), "", "Mercy-Corps Redeem", "Digital Code", "Partner Code", "", "Ref", ds.Tables[0].Rows[i]["APPROVALCODE"].ToString(), ds.Tables[0].Rows[i]["AGENTCODE"].ToString(), "", ds.Tables[0].Rows[i]["TRANREF"].ToString(),
                                         ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString(), ds.Tables[0].Rows[i]["TOPUPFEE"].ToString(), (double.Parse(ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString()) + double.Parse(ds.Tables[0].Rows[i]["TOPUPFEE"].ToString())).ToString("#,##0.00"), branchCode);
                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                            }

                            if ((ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["pan"].ToString().Trim()) || (ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["zalaPan"].ToString()))
                            {
                                payercode = (ds.Tables[0].Rows[i]["REF1"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["REF1"].ToString());
                                payername = (ds.Tables[0].Rows[i]["PAYERNAME"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["PAYERNAME"].ToString());
                            }
                            else
                            {
                                payercode = (ds.Tables[0].Rows[i]["INVOICENO"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["INVOICENO"].ToString());
                                payername = (ds.Tables[0].Rows[i]["RESPCODE"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["RESPCODE"].ToString());
                            }




                            sb.Append("<Topup type=R partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AGENTCODE"].ToString() + "\" partnerName=" + "\"" +
                                ds.Tables[0].Rows[i]["AGENTNAME"].ToString() + "\" pan=" + "\"" +
                                ds.Tables[0].Rows[i]["PAN"].ToString() + "\" invoiceNo=" + "\"" +
                                payercode + "\" responseCode=" + "\"" +
                                payername + "\" approvalCode=" + "\"" +
                                ds.Tables[0].Rows[i]["APPROVALCODE"].ToString() + "\" txnRef=" + "\"" +
                                ds.Tables[0].Rows[i]["TRANREF"].ToString() + "\" txnDateTime=" + "\"" +
                                ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" amount=" + "\"" +
                                ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString() + "\" fee=" + "\"" +
                                ds.Tables[0].Rows[i]["TOPUPFEE"].ToString() + "\" status=" + "\"" +
                                ds.Tables[0].Rows[i]["TOPUPSTATUS"].ToString() + "\" topupDateTime=" + "\"" +

                                ds.Tables[0].Rows[i]["TOPUPDATE"].ToString() + "\" billerLogo=" + "\"" +
                                imgURL + "\" SMS=" + "\"" + smsmsg + "\" />");
                        }
                    }
                    sb.Append("</TxnRes>");
                    return sb.ToString();
                }
                catch (Exception ex)
                {
                    writeLog("Error in RopupListListReq : " + ex.ToString());
                }
            }
        }


        return string.Empty;
    }

    bool IsOoredooEPin(string taxId)
    {
        return taxId == "6666666666666";
    }

    bool IsValidateTxnReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out int txnperpage, out int pageno, out string messageID, out string type, out string agentid, out string agentuseruniqueid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        type = string.Empty;
        txnperpage = 0;
        pageno = 0;
        agentid = string.Empty;
        agentuseruniqueid = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("TxnPerPage"))
        {
            try
            {
                txnperpage = Convert.ToInt16(ht["TxnPerPage"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <TxnPerPage> Tag");
            return false;
        }

        if (ht.ContainsKey("PageNo"))
        {
            try
            {
                pageno = Convert.ToInt16(ht["PageNo"]);
            }
            catch { }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <PageNo> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("type"))
        {
            type = ht["type"].ToString();
        }
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || txnperpage < 1 || pageno < 1 || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out errmsg, out ds);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                this.agentid = int.Parse(ds.Tables[0].Rows[0]["AGENTID"].ToString());
                this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                agentid = ds.Tables[0].Rows[0]["AGENTID"].ToString();
                agentuseruniqueid = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERUNIQUEID"]);

            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }

    #endregion

    #region ReloadBalanceSearchReq

    public string ReloadDropDownListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        var version = string.Empty;
        var ts = string.Empty;
        var messageID = string.Empty;
        var email = string.Empty;
        var deviceUID = string.Empty;
        var token = string.Empty;
        var response = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateReloadDropDownListReq(ht, out code, out desp, out version, out ts, out deviceUID, out messageID, out token))
        {
            return Utils.GetErrorString(version, code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        try
        {
            var _agentWCF = new MA2AAPI.MA2AAPIWCF.ServiceClient();
            if (!_agentWCF.GetReloadPartnersForReport(out ds, out errmsg))
            {
                // Error in getting Push Notification Req
                writeLog("Error in ReloadListReq : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable dtReloadPartners = ds.Tables[0];

            StringBuilder sb = new StringBuilder();
            sb.Append("<ReloadDropDownListRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<MessageID>" + messageID + "</MessageID>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<ReloadPartners>");
            foreach (DataRow reloadPartner in dtReloadPartners.Rows)
            {
                sb.Append("<ReloadPartner>");
                sb.Append("<Name>" + reloadPartner["Name"] + "</Name>");
                sb.Append("<DisplayName>" + (string.IsNullOrEmpty(reloadPartner["DropDownDisplayText"].ToString()) ? reloadPartner["Name"] : reloadPartner["DropDownDisplayText"]) + "</DisplayName>");
                sb.Append("<ValueName>" + (string.IsNullOrEmpty(reloadPartner["DropDownDisplayValue"].ToString()) ? reloadPartner["Name"] : reloadPartner["DropDownDisplayValue"]) + "</ValueName>");
                sb.Append("</ReloadPartner>");
            }
            sb.Append("</ReloadPartners>");
            sb.Append("</ReloadDropDownListRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in ReloadDropDownListReq : " + ex.ToString());
            response = Utils.GetErrorString(version, "99", "System Error");
        }


        return response;
    }

    // Check Push Notification List
    private bool IsValidateReloadDropDownListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string deviceUID, out string messageID, out string token)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        deviceUID = string.Empty;
        messageID = string.Empty;
        token = string.Empty;

        if (!IsValidateBaseRequestParamtersForReloadDropdownList(ht, out code, out desp, out version, out ts, out messageID))
        {
            writeLog("Error in Validation : Basic Authentication fail");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(messageID))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;
    }

    private bool IsValidateBaseRequestParamtersForReloadDropdownList(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageID)
    {
        code = string.Empty;
        desp = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        messageID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Message ID <MessageID> Tag");
            return false;
        }

        return true;
    }

    public string ReloadSearchReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        int txnperpage = 0, pageno = 0;
        string fromDate = string.Empty;
        string toDate = string.Empty;
        string topupType = string.Empty;
        string topupStatus = string.Empty;
        string mpuCardNo = string.Empty;
        string txnRef = string.Empty;
        string deviceUid = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateReloadSearchReq(ht, out code, out desp, out version, out ts,
        out email, out password, out messageID, out token, out txnperpage, out pageno,
        out fromDate, out toDate, out topupType, out topupStatus, out mpuCardNo, out txnRef, out deviceUid))
        {
            return Utils.GetErrorString("1.0", code, desp);
        }

        if (!string.IsNullOrEmpty(fromDate))
        {
            if (fromDate.Length <= 10)
            {
                fromDate = fromDate + " 01:00:00.001";
            }
        }

        if (!string.IsNullOrEmpty(toDate))
        {
            if (toDate.Length <= 10)
            {
                toDate = toDate + " 23:59:59.999";
            }
        }

        string errmsg = string.Empty;
        DataSet ds = null;

        if (_agentWCF.getReloadSearch(pageno, txnperpage, agentcode, fromDate, toDate, topupType, topupStatus, mpuCardNo, txnRef, out ds, out errmsg))
        {
            string result = string.Empty;

            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<ReloadSearchRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" totalAmount=\"" + ds.Tables[1].Rows[0][1].ToString() + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string imgURL = string.Empty;
                        string smsmsg = string.Empty;
                        string payercode = string.Empty;
                        string payername = string.Empty;
                        try
                        {
                            string biller = GetBillerName(ds.Tables[0].Rows[i]["PAN"].ToString());
                            imgURL = ConfigurationManager.AppSettings["BillerLogoUrl"].ToString() + biller + ".png";
                            if (ds.Tables[0].Rows[i]["PAN"].ToString() == "MercyCorps")
                            {
                                smsmsg = getMessageBillerMercyCrops(ds.Tables[0].Rows[i]["AGENTNAME"].ToString(), "", "Mercy-Corps Redeem", "Digital Code", "Partner Code", "", "Ref", ds.Tables[0].Rows[i]["APPROVALCODE"].ToString(), ds.Tables[0].Rows[i]["AGENTCODE"].ToString(), "", ds.Tables[0].Rows[i]["TRANREF"].ToString(),
                                     ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString(), ds.Tables[0].Rows[i]["TOPUPFEE"].ToString(), (double.Parse(ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString()) + double.Parse(ds.Tables[0].Rows[i]["TOPUPFEE"].ToString())).ToString("#,##0.00"), branchCode);
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                        }

                        if ((ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["pan"].ToString().Trim()) || (ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["zalaPan"].ToString()) || (ds.Tables[0].Rows[i]["PAN"].ToString() == ConfigurationManager.AppSettings["PayBillsPayment"].ToString()))
                        {
                            payercode = (ds.Tables[0].Rows[i]["REF1"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["REF1"].ToString());
                            payername = (ds.Tables[0].Rows[i]["PAYERNAME"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["PAYERNAME"].ToString());
                        }
                        else
                        {
                            payercode = (ds.Tables[0].Rows[i]["INVOICENO"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["INVOICENO"].ToString());
                            payername = (ds.Tables[0].Rows[i]["RESPCODE"] == DBNull.Value ? "-" : ds.Tables[0].Rows[i]["RESPCODE"].ToString());
                        }

                        sb.Append("<Topup partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AGENTCODE"].ToString() + "\" partnerName=" + "\"" +
                        ds.Tables[0].Rows[i]["AGENTNAME"].ToString() + "\" pan=" + "\"" +
                        ds.Tables[0].Rows[i]["PAN"].ToString() + "\" invoiceNo=" + "\"" +
                        payercode + "\" responseCode=" + "\"" +
                        payername + "\" approvalCode=" + "\"" +
                        ds.Tables[0].Rows[i]["APPROVALCODE"].ToString() + "\" txnRef=" + "\"" +
                        ds.Tables[0].Rows[i]["TRANREF"].ToString() + "\" txnDateTime=" + "\"" +
                        ds.Tables[0].Rows[i]["TRANSACTIONDATETIME"].ToString() + "\" amount=" + "\"" +
                        ds.Tables[0].Rows[i]["TOPUPAMOUNT"].ToString() + "\" fee=" + "\"" +
                        ds.Tables[0].Rows[i]["TOPUPFEE"].ToString() + "\" status=" + "\"" +
                        ds.Tables[0].Rows[i]["TOPUPSTATUS"].ToString() + "\" topupDateTime=" + "\"" +

                        ds.Tables[0].Rows[i]["TOPUPDATE"].ToString() + "\" billerLogo=" + "\"" +
                        imgURL
                        + "\" USERDEFINED1=" + "\"" + ds.Tables[0].Rows[i]["USERDEFINED1"].ToString()
                        + "\" USERDEFINED2=" + "\"" + ds.Tables[0].Rows[i]["USERDEFINED2"].ToString()
                        + "\" USERDEFINED3=" + "\"" + ds.Tables[0].Rows[i]["USERDEFINED3"].ToString()
                        + "\" Note=" + "\"" + ds.Tables[0].Rows[i]["REF2"].ToString()
                        + "\" PaymentType=" + "\"" + ds.Tables[0].Rows[i]["PAYMENTTYPE"].ToString()
                        + "\" SMS=" + "\"" + smsmsg + "\" />");
                    }
                }
                sb.Append("</ReloadSearchRes>");
                result = sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in ReloadSearchReq : " + ex.ToString());
                result = Utils.GetErrorString("1.0", "99", "SystemError");
            }

            return result;
        }
        else
        {
            return Utils.GetErrorString("1.0", "99", "SystemError");
        }
    }

    public string AcceptenceSearchReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        int txnperpage = 0, pageno = 0;
        string fromDate = string.Empty;
        string toDate = string.Empty;
        string paymentType = string.Empty;
        string paymentStatus = string.Empty;
        string mpuCardNo = string.Empty;
        string txnRef = string.Empty;
        string deviceUid = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateAcceptenceSearchReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out token, out txnperpage, out pageno,
        out fromDate, out toDate, out paymentType, out paymentStatus, out txnRef, out deviceUid))
        {
            return Utils.GetErrorString("1.0", code, desp);
        }

        if (!string.IsNullOrEmpty(fromDate) && fromDate.Length <= 10)
        {
            fromDate += " 01:00:00.001";
        }

        if (!string.IsNullOrEmpty(toDate) && toDate.Length <= 10)
        {
            toDate += " 23:59:59.999";
        }

        string errmsg = string.Empty;
        DataSet ds = null;

        if (_agentWCF.getAcceptenceSearch(pageno, txnperpage, agentcode, email, fromDate, toDate, paymentType, paymentStatus, txnRef, out ds, out errmsg))
        {
            string result = string.Empty;

            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<AcceptenceSearchRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" totalAmount=\"" + ds.Tables[1].Rows[0][1].ToString() + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string imgURL = string.Empty;
                        string smsmsg = string.Empty;
                        string merchant = string.Empty;
                        string paymentCode = string.Empty;

                        try
                        {
                            SMSHelper smsH = new SMSHelper();
                            var amount = ds.Tables[0].Rows[i]["TransactionAmount"].ToString();
                            smsmsg = smsH.GetMerchantMessage(ds.Tables[0].Rows[i]["MerchantTransactionId"].ToString().ToString(), ds.Tables[0].Rows[i]["AgentName"].ToString(), string.Empty, ds.Tables[0].Rows[i]["PaymentType"].ToString(), "PaymentType", "PaymentCode", string.Empty, string.Empty, ds.Tables[0].Rows[i]["PaymentType"].ToString(), ds.Tables[0].Rows[i]["PaymentCode"].ToString(), string.Empty, string.Empty, Convert.ToDouble(amount).ToString(), branchCode);

                            merchant = ds.Tables[0].Rows[i]["PaymentType"].ToString();
                            if (merchant == "MSP")
                            {
                                paymentCode = "\" paymentCode = \"" + ds.Tables[0].Rows[i]["PaymentCode"].ToString();
                            }
                            imgURL = ConfigurationManager.AppSettings["MerchantLogoUrlPath"].ToString() + merchant + ".png";
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                        }

                        if (ds.Tables[0].Rows[i]["PaymentMode"].ToString() == "CARD")
                        {
                            var transInfo = ds.Tables[0].Rows[i]["PaymentCode"].ToString().Split(';');
                            string cardInfo = "";
                            if (transInfo.Count() > 2)
                            {
                                cardInfo = " cardNo=\"" + transInfo[0] + "\"" + " traceNo=\"" + transInfo[1] + "\"" + " batchNo=\"" + transInfo[2] + "\"";
                            }

                            sb.Append("<Acceptence partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AgentCode"].ToString() + "\" partnerName=" + "\"" +
                            ds.Tables[0].Rows[i]["AgentName"].ToString() + "\" paymentType=" + "\"" +
                            ds.Tables[0].Rows[i]["PaymentTypeDescription"].ToString() + paymentCode + "\" txnRef=" + "\"" +
                            ds.Tables[0].Rows[i]["MerchantTransactionId"].ToString() + "\" txnDateTime=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionDateTime"].ToString() + "\" amount=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionAmount"].ToString() + "\" DiscountFee=" + "\"" +
                            ds.Tables[0].Rows[i]["MerchantFee"].ToString() + "\" status=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionStatus"].ToString() + "\" mobileNumber=" + "\"" +
                            ds.Tables[0].Rows[i]["MobileNumber"].ToString() + "\" merchantLogo=" + "\"" +
                            imgURL + "\" SMS=" + "\"" + smsmsg + "\""
                            + " isVoidable=\"" + ds.Tables[0].Rows[i]["IsVoidable"] + "\" "
                            + " paymentMode=\"" + ds.Tables[0].Rows[i]["PaymentMode"] + "\" "
                            + " entryMode=\"" + Utils.getEntryMode(ds.Tables[0].Rows[i]["EntryMode"] + "") + "\" "
                            + " approvalCode=\"" + ds.Tables[0].Rows[i]["ApprovalCode"] + "\" "
                            + " transactionRefNo=\"" + ds.Tables[0].Rows[i]["TransactionRefNo"] + "\" "
                            + cardInfo
                            + " />");
                        }
                        else
                        {
                            sb.Append("<Acceptence partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AgentCode"].ToString() + "\" partnerName=" + "\"" +
                            ds.Tables[0].Rows[i]["AgentName"].ToString() + "\" paymentType=" + "\"" +
                            ds.Tables[0].Rows[i]["PaymentTypeDescription"].ToString() + paymentCode + "\" txnRef=" + "\"" +
                            ds.Tables[0].Rows[i]["MerchantTransactionId"].ToString() + "\" txnDateTime=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionDateTime"].ToString() + "\" amount=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionAmount"].ToString() + "\" DiscountFee=" + "\"" +
                            ds.Tables[0].Rows[i]["MerchantFee"].ToString() + "\" status=" + "\"" +
                            ds.Tables[0].Rows[i]["TransactionStatus"].ToString() + "\" mobileNumber=" + "\"" +
                            ds.Tables[0].Rows[i]["MobileNumber"].ToString() + "\" merchantLogo=" + "\"" +
                            imgURL + "\" SMS=" + "\"" + smsmsg + "\" />");
                        }


                    }
                }
                sb.Append("</AcceptenceSearchRes>");
                result = sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in AcceptenceSearchRes : " + ex.ToString());
                result = Utils.GetErrorString("1.0", "99", "SystemError");
            }

            return result;
        }
        else
        {
            return Utils.GetErrorString("1.0", "99", "SystemError");
        }
    }

    public string AcceptenceSearchReqV2(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        int txnperpage = 0, pageno = 0;
        string fromDate = string.Empty;
        string toDate = string.Empty;
        string paymentType = string.Empty;
        string paymentStatus = string.Empty;
        string mpuCardNo = string.Empty;
        string txnRef = string.Empty;
        string deviceUid = string.Empty;
        string token = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateAcceptenceSearchReq(ht, out code, out desp, out version, out ts, out email, out password, out messageID, out token, out txnperpage, out pageno,
        out fromDate, out toDate, out paymentType, out paymentStatus, out txnRef, out deviceUid))
        {
            return Utils.GetErrorString("1.0", code, desp);
        }

        if (!string.IsNullOrEmpty(fromDate) && fromDate.Length <= 10) fromDate += " 01:00:00.001";

        if (!string.IsNullOrEmpty(toDate) && toDate.Length <= 10) toDate += " 23:59:59.999";

        string errmsg = string.Empty;
        DataSet ds = null;

        if (_agentWCF.getAcceptenceSearchV2(pageno, txnperpage, agentcode, email, fromDate, toDate, paymentType, paymentStatus, txnRef, out ds, out errmsg))
        {
            string result = string.Empty;

            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<AcceptenceSearchRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" totalAmount=\"" + ds.Tables[1].Rows[0][1].ToString() + "\" txnPerPage=" + "\"" + txnperpage + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string imgURL = string.Empty;
                        string smsmsg = string.Empty;
                        string merchant = string.Empty;
                        string paymentCode = string.Empty;

                        try
                        {
                            SMSHelper smsH = new SMSHelper();
                            var amount = ds.Tables[0].Rows[i]["TransactionAmount"].ToString();
                            smsmsg = smsH.GetMerchantMessage(ds.Tables[0].Rows[i]["MerchantTransactionId"].ToString().ToString(), ds.Tables[0].Rows[i]["AgentName"].ToString(), string.Empty, ds.Tables[0].Rows[i]["PaymentType"].ToString(), "PaymentType", "PaymentCode", string.Empty, string.Empty, ds.Tables[0].Rows[i]["PaymentType"].ToString(), ds.Tables[0].Rows[i]["PaymentCode"].ToString(), string.Empty, string.Empty, Convert.ToDouble(amount).ToString(), branchCode);

                            merchant = ds.Tables[0].Rows[i]["PaymentType"].ToString();
                            if (merchant == "MSP")
                            {
                                paymentCode = "\" paymentCode = \"" + ds.Tables[0].Rows[i]["PaymentCode"].ToString();
                            }
                            if (merchant == "A+ Wallet")
                            {
                                imgURL = ConfigurationManager.AppSettings["MerchantLogoUrlPath"].ToString() + "APlus.png";
                            }
                            else
                            {
                                imgURL = ConfigurationManager.AppSettings["MerchantLogoUrlPath"].ToString() + merchant + ".png";
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error ByteArrayToImageFilebyMemoryStream : " + ex.ToString());
                        }

                        var transaction = ds.Tables[0].Rows[i];
                        if (ds.Tables[0].Rows[i]["PaymentMode"].ToString() == "CARD")
                        {
                            var transInfo = transaction["PaymentCode"].ToString().Split(';');
                            string cardInfo = "";
                            if (transInfo.Count() > 2)
                            {
                                cardInfo = " cardNo=\"" + transInfo[0] + "\"" + " traceNo=\"" + transaction["TraceNo"].ToString() + "\"" + " batchNo=\"" + transInfo[2] + "\"";
                            }

                            sb.Append("<Acceptence partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AgentCode"].ToString() + "\" partnerName=" + "\"" +
                           transaction["AgentName"].ToString() + "\" paymentType=" + "\"" +
                            transaction["PaymentTypeDescription"].ToString() + paymentCode + "\" txnRef=" + "\"" +
                            transaction["MerchantTransactionId"].ToString() + "\" txnDateTime=" + "\"" +
                            transaction["TransactionDateTime"].ToString() + "\" amount=" + "\"" +
                            transaction["TransactionAmount"].ToString() + "\" DiscountFee=" + "\"" +
                            transaction["MerchantFee"].ToString() + "\" status=" + "\"" +
                            transaction["TransactionStatus"].ToString() + "\" merchantLogo=" + "\"" +
                            imgURL + "\" SMS=" + "\"" + smsmsg + "\""
                            + " isVoidable=\"" + ds.Tables[0].Rows[i]["IsVoidable"] + "\" "
                            + " paymentMode=\"" + ds.Tables[0].Rows[i]["PaymentMode"] + "\" "
                            + " entryMode=\"" + Utils.getEntryMode(ds.Tables[0].Rows[i]["EntryMode"] + "") + "\" "
                            + " approvalCode=\"" + ds.Tables[0].Rows[i]["ApprovalCode"] + "\" "
                            + " transactionRefNo=\"" + ds.Tables[0].Rows[i]["TransactionRefNo"] + "\" "
                            + cardInfo
                            + " tID=\"" + ds.Tables[0].Rows[i]["CardTerminalId"] + "\" "
                            + " mID=\"" + ds.Tables[0].Rows[i]["MerchantId"] + "\" "
                            + " />");
                        }
                        else
                        {
                            sb.Append("<Acceptence partnerCode=" + "\"" + ds.Tables[0].Rows[i]["AgentCode"].ToString() + "\" partnerName=" + "\"" +
                            transaction["AgentName"].ToString() + "\" paymentType=" + "\"" +
                            transaction["PaymentTypeDescription"].ToString() + paymentCode + "\" txnRef=" + "\"" +
                            transaction["MerchantTransactionId"].ToString() + "\" txnDateTime=" + "\"" +
                            transaction["TransactionDateTime"].ToString() + "\" amount=" + "\"" +
                            transaction["TransactionAmount"].ToString() + "\" DiscountFee=" + "\"" +
                            transaction["MerchantFee"].ToString() + "\" status=" + "\"" +
                            transaction["TransactionStatus"].ToString() + "\" mobileNumber=" + "\"" +
                            transaction["MobileNumber"].ToString() + "\" merchantLogo=" + "\"" +
                            imgURL + "\" SMS=" + "\"" + smsmsg + "\" />");
                        }


                    }
                }
                sb.Append("</AcceptenceSearchRes>");
                result = sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in AcceptenceSearchRes : " + ex.ToString());
                result = Utils.GetErrorString("1.0", "99", "SystemError");
            }

            return result;
        }
        else
        {
            return Utils.GetErrorString("1.0", "99", "SystemError");
        }
    }

    public string BinCheckReq(string reqXml)
    {
        string code;
        string desp;
        string version;
        string timestamp;
        string messageID;
        string cardNo;
        string errMsg;
        string email;

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidateBinCheckReq(ht, out code, out desp, out version, out timestamp, out messageID, out email, out cardNo))
        {
            return Utils.GetErrorString("1.0", "99", desp);
        }

        DataSet ds = null;

        if (_agentWCF.getBinByCardNo(cardNo, out ds, out errMsg))
        {
            string result = string.Empty;

            try
            {
                StringBuilder sb = new StringBuilder();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    var binRow = ds.Tables[0].Rows[0];

                    sb.Append("<BinCheckRes>");
                    sb.Append(string.Format("<Version>{0}</Version>", version));
                    sb.Append(string.Format("<TimeStamp>{0}</TimeStamp>", timestamp));
                    sb.Append(string.Format("<MessageID>{0}</MessageID>", messageID));
                    sb.Append("<ResCode>00</ResCode>");
                    sb.Append("<ResDesc></ResDesc>");
                    sb.Append(string.Format("<CardType>{0}</CardType>", binRow["CardType"].ToString()));
                    sb.Append(string.Format("<PaymentType>{0}</PaymentType>", binRow["PaymentType"].ToString()));
                    sb.Append("</BinCheckRes>");

                }
                else
                {
                    return Utils.GetErrorString("1.0", "99", "Sorry, we cannot accept this card.");
                }
                result = sb.ToString();
            }
            catch (Exception ex)
            {
                writeLog("Error in AcceptenceSearchRes : " + ex.ToString());
                result = Utils.GetErrorString("1.0", "99", "SystemError");
            }

            return result;
        }
        else
        {
            return Utils.GetErrorString("1.0", "99", "SystemError");
        }
    }

    private bool IsValidateBinCheckReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageID, out string email, out string cardNo)
    {
        code = string.Empty;
        desp = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        messageID = string.Empty;
        cardNo = string.Empty;
        email = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Message ID <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("CardNo"))
        {
            cardNo = ht["CardNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing CardNo <MessageID> Tag");
            return false;
        }

        return true;
    }


    private bool IsValidDeepLinkProfileReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageID, out string email)
    {
        code = string.Empty;
        desp = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        messageID = string.Empty;
        email = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Message ID <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        return true;
    }

    private bool IsValidateReloadSearchReq(Hashtable ht, out string code, out string desp, out string version, out string ts,
        out string email, out string password, out string messageID, out string token, out int txtPerPage, out int pageNo,
        out string fromDate, out string toDate, out string topupType, out string topupStatus, out string mpuCardNo, out string txnRef, out string deviceUid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        token = string.Empty;
        txtPerPage = 0;
        pageNo = 0;
        fromDate = string.Empty;
        toDate = string.Empty;
        topupType = string.Empty;
        topupStatus = string.Empty;
        mpuCardNo = string.Empty;
        txnRef = string.Empty;
        deviceUid = string.Empty;

        if (!IsValidateBaseRequestParamters(ht, out code, out desp, out version, out ts, out email, out password, out messageID))
        {
            writeLog("Error in Validation : Basic Authentication fail");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }

        if (ht.ContainsKey("TxnPerPage"))
        {
            txtPerPage = Convert.ToInt32(ht["TxnPerPage"].ToString());
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TxnPerPage> Tag");
            return false;
        }

        if (ht.ContainsKey("PageNo"))
        {
            pageNo = Convert.ToInt32(ht["PageNo"].ToString());
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <PageNo> Tag");
            return false;
        }

        if (ht.ContainsKey("FromDate"))
        {
            fromDate = ht["FromDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <FromDate> Tag");
            return false;
        }

        if (ht.ContainsKey("ToDate"))
        {
            toDate = ht["ToDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <ToDate> Tag");
            return false;
        }

        if (ht.ContainsKey("TopupType"))
        {
            topupType = ht["TopupType"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TopupType> Tag");
            return false;
        }

        if (ht.ContainsKey("TopupStatus"))
        {
            topupStatus = ht["TopupStatus"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TopupStatus> Tag");
            return false;
        }

        if (ht.ContainsKey("MPUCardNo"))
        {
            mpuCardNo = ht["MPUCardNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MPUCardNo> Tag");
            return false;
        }

        if (ht.ContainsKey("TxnRef"))
        {
            txnRef = ht["TxnRef"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TxnRef> Tag");
            return false;
        }

        if (ht.ContainsKey("DeviceUID"))
        {
            deviceUid = ht["DeviceUID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <DeviceUID> Tag");
            return false;
        }

        return authentication(email, password, out code, out desp);
    }

    private bool IsValidateAcceptenceSearchReq(Hashtable ht, out string code, out string desp, out string version, out string ts,
        out string email, out string password, out string messageID, out string token, out int txtPerPage, out int pageNo,
        out string fromDate, out string toDate, out string paymentType, out string paymentStatus, out string txnRef, out string deviceUid)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        token = string.Empty;
        txtPerPage = 0;
        pageNo = 0;
        fromDate = string.Empty;
        toDate = string.Empty;
        paymentType = string.Empty;
        paymentStatus = string.Empty;
        txnRef = string.Empty;
        deviceUid = string.Empty;

        if (!IsValidateBaseRequestParamters(ht, out code, out desp, out version, out ts, out email, out password, out messageID))
        {
            writeLog("Error in Validation : Basic Authentication fail");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }

        if (ht.ContainsKey("TxnPerPage"))
        {
            txtPerPage = Convert.ToInt32(ht["TxnPerPage"].ToString());
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TxnPerPage> Tag");
            return false;
        }

        if (ht.ContainsKey("PageNo"))
        {
            pageNo = Convert.ToInt32(ht["PageNo"].ToString());
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <PageNo> Tag");
            return false;
        }

        if (ht.ContainsKey("FromDate"))
        {
            fromDate = ht["FromDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <FromDate> Tag");
            return false;
        }

        if (ht.ContainsKey("ToDate"))
        {
            toDate = ht["ToDate"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <ToDate> Tag");
            return false;
        }

        if (ht.ContainsKey("PaymentType"))
        {
            paymentType = ht["PaymentType"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <PaymentType> Tag");
            return false;
        }

        if (ht.ContainsKey("PaymentStatus"))
        {
            paymentStatus = ht["PaymentStatus"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <PaymentStatus> Tag");
            return false;
        }

        if (ht.ContainsKey("TxnRef"))
        {
            txnRef = ht["TxnRef"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TxnRef> Tag");
            return false;
        }

        if (ht.ContainsKey("DeviceUID"))
        {
            deviceUid = ht["DeviceUID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <DeviceUID> Tag");
            return false;
        }

        return authentication(email, password, out code, out desp);
    }

    #endregion

    #region Private Methods


    private string GetBillerName(string pan)
    {
        string billerName = string.Empty;

        if (pan == ConfigurationManager.AppSettings["663CashOut"].ToString().Trim())
        {
            billerName = ConfigurationManager.AppSettings["663CashOutImg"].ToString();
        }
        else if (pan == ConfigurationManager.AppSettings["pan"].ToString().Trim() || pan == "1-Stop+")
        {
            billerName = ConfigurationManager.AppSettings["1stopplus"].ToString();
        }
        else if (pan == "MercyCorps")
        {
            billerName = ConfigurationManager.AppSettings["MercyCorps"].ToString();
        }
        else if (pan == "1-2-3")
        {
            billerName = ConfigurationManager.AppSettings["onetwothree"].ToString();
        }
        else if (pan == ConfigurationManager.AppSettings["zalaPan"].ToString())
        {
            billerName = ConfigurationManager.AppSettings["ZalaImg"].ToString();
        }
        else if (pan == ConfigurationManager.AppSettings["CB"].ToString())
        {
            billerName = ConfigurationManager.AppSettings["CB"].ToString();
        }
        else if (pan == ConfigurationManager.AppSettings["KBZ"].ToString())
        {
            billerName = ConfigurationManager.AppSettings["KBZ"].ToString();
        }
        else if (pan == ConfigurationManager.AppSettings["NearMeGiftCardPan"].ToString())
        {
            billerName = ConfigurationManager.AppSettings["NearMeGiftCardBillerName"].ToString();
        }
        else if (pan == ConfigurationManager.AppSettings["WavePay"].ToString())
        {
            billerName = ConfigurationManager.AppSettings["WavePay"].ToString();
        }
        else if (pan == ConfigurationManager.AppSettings["OK$"].ToString())
        {
            billerName = ConfigurationManager.AppSettings["OK$"].ToString();
        }
        else if (pan == ConfigurationManager.AppSettings["PayBillsPayment"].ToString())
        {
            billerName = ConfigurationManager.AppSettings["PayBillsIdForReloadLogo"].ToString();
        }
        else if (pan.Replace(" ","").ToLower() == (ConfigurationManager.AppSettings["ReloadProfileAYA"].ToString()).Replace(" ","").ToLower()){
            billerName = ConfigurationManager.AppSettings["AYA"].ToString();
        }
        else if (pan.Replace(" ", "").ToLower() == (ConfigurationManager.AppSettings["ReloadProfileKBZ"].ToString()).Replace(" ", "").ToLower())
        {
            billerName = ConfigurationManager.AppSettings["KBZ"].ToString();
        }
        else if (pan.Replace(" ", "").ToLower() == (ConfigurationManager.AppSettings["ReloadProfileCB"].ToString()).Replace(" ", "").ToLower())
        {
            billerName = ConfigurationManager.AppSettings["CB"].ToString();
        }
        else
        {
            billerName = ConfigurationManager.AppSettings["MPU"].ToString();
        }
        return billerName;
    }

    #endregion

    #region Online Shop List by Category

    public string OnlineShopReq(string reqXml)
    {
        string version = string.Empty;
        string timeStamp = string.Empty;
        string messageId = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        string agentCode = string.Empty;
        string token = string.Empty;

        string responseCode = string.Empty;
        string responseDescription = string.Empty;


        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateOnlineShopReq(ht, out responseCode, out responseDescription, out version, out timeStamp, out messageId, out email, out password, out agentCode, out token))
        {
            return Utils.GetErrorString(version, responseCode, responseDescription);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        string response = string.Empty;

        try
        {
            if (!_agentWCF.getShopListByCategory(out ds, out errmsg))
            {
                // Error in getting Category and Biller
                writeLog("Error in getShopListByCategory : " + errmsg);
                return Utils.GetErrorString(version, "99", "System Error");
            }

            DataTable dtCategory = ds.Tables[0];
            DataTable dtShop = ds.Tables[1];

            StringBuilder sb = new StringBuilder();
            int i = 0;

            sb.Append("<OnlineShopRes>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<MessageID>" + messageId + "</MessageID>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<ResDesc>Success</ResDesc>");
            sb.Append("<OnlineShopCategories>");
            foreach (DataRow drCategory in dtCategory.Rows)
            {
                string onlineShopCategory = string.Format("<OnlineShopCategory CategoryName='{0}' CategoryLogo='{1}'>", drCategory["CATEGORYNAME"].ToString(), drCategory["LOGOURL"].ToString());
                sb.Append(onlineShopCategory);
                while (i < dtShop.Rows.Count && drCategory["ONLINECATEGORYID"].ToString() == dtShop.Rows[i]["ONLINECATEGORYID"].ToString())
                {
                    string merchant = string.Format("<Merchant merID='{0}' merName='{1}' merLogo='{2}' merUrl='{3}' />", dtShop.Rows[i]["ONLINESHOPID"].ToString(), dtShop.Rows[i]["SHOPNAME"].ToString(), dtShop.Rows[i]["LOGOURL"].ToString(), dtShop.Rows[i]["SHOPURL"].ToString());
                    sb.Append(merchant);
                    i++;
                }
                sb.Append("</OnlineShopCategory>");
            }
            sb.Append("</OnlineShopCategories>");
            sb.Append("</OnlineShopRes>");
            response = sb.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Error in OnlineShopReq : " + ex.ToString());
            response = Utils.GetErrorString(version, "99", "System Error.");
        }

        return response;
    }

    bool IsValidateOnlineShopReq(Hashtable ht, out string responseCode, out string responseDescription, out string version, out string timeStamp, out string messageId, out string email, out string password, out string agentId, out string token) //, out int txnperpage, out int pageno
    {
        responseCode = "00";
        responseDescription = "Success";

        version = string.Empty;
        timeStamp = string.Empty;
        messageId = string.Empty;
        email = string.Empty;
        password = string.Empty;
        agentId = string.Empty;
        token = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            responseCode = "06";
            responseDescription = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }

        if (ht.ContainsKey("TimeStamp"))
        {
            timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            responseCode = "06";
            responseDescription = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageId = ht["MessageID"].ToString();
        }
        else
        {
            responseCode = "06";
            responseDescription = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            responseCode = "06";
            responseDescription = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            responseCode = "06";
            responseDescription = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentId = ht["AgentCode"].ToString();
        }
        else
        {
            responseCode = "06";
            responseDescription = "Invalid Request";
            writeLog("Error in Validation : Missing <AgentID> Tag");
            return false;
        }
        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(timeStamp) || String.IsNullOrEmpty(email)
            || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(messageId) || String.IsNullOrEmpty(agentId))
        {
            responseCode = "07";
            responseDescription = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(email, password, out responseCode, out responseDescription);
    }
    #endregion

    #region Terms And Conditions
    //This is getting TermsAndConditions
    public string TermsAndConditionsReq(string reqXml)
    {
        string code = string.Empty;
        string description = string.Empty;
        string version = string.Empty;
        string timeStamp = string.Empty;
        string messageId = string.Empty;
        string myanmarVersionUrl = string.Empty;
        string englishVersionUrl = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (IsValidateTermsAndConditonsReq(ht, out code, out description, out version, out timeStamp, out messageId))
        {
            code = "00";
            description = "Success";
            myanmarVersionUrl = ConfigurationManager.AppSettings["MyanmarVersionUrl"].ToString();
            englishVersionUrl = ConfigurationManager.AppSettings["EnglishVersionUrl"].ToString();
            StringBuilder sb = new StringBuilder();
            sb.Append("<TermsAndConditionsRes>");
            sb.Append("<Version>1.0</Version>");
            sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<MessageID>" + messageId + "</MessageID>");
            sb.Append("<ResCode>" + code + "</ResCode>");
            sb.Append("<ResDesc>" + description + "</ResDesc>");
            sb.Append("<MyanmarVersionUrl>" + myanmarVersionUrl + "</MyanmarVersionUrl>");
            sb.Append("<EnglishVersionUrl>" + englishVersionUrl + "</EnglishVersionUrl>");
            sb.Append("</TermsAndConditionsRes>");
            //Log
            writeLog("TermsAndConditions Response : " + sb.ToString());
            return sb.ToString();
        }

        return Utils.GetErrorResponse(code, description);


    }
    private bool IsValidateTermsAndConditonsReq(Hashtable ht, out string code, out string description, out string version, out string timeStamp,
        out string messageId)
    {
        code = "00";
        description = "Success";
        version = string.Empty;
        timeStamp = string.Empty;
        messageId = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageId = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing <MessageID> Tag");
            return false;
        }
        return true;
    }
    //This is updating TermsAndConditions Agreement
    public string UpdateTermsAndConditionsAgreementReq(string reqXml)
    {
        string code = string.Empty;
        string description = string.Empty;
        string version = string.Empty;
        string timeStamp = string.Empty;
        string messageId = string.Empty;
        string email = string.Empty;
        string errMsg = string.Empty;
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        try
        {
            if (!IsValidateUpdateTermsAndConditionsAgreementReq(ht, out code, out description, out version, out timeStamp, out messageId,
            out email))
            {
                var response = Utils.GetErrorResponse(code, description);
                writeLog("UpdateTermsAndConditionsAgreementRes Error Response : " + response);
                return response;
            }
            if (_agentWCF.updateTermsAndConditionsAgreement(email, out errMsg))
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<UpdateTermsAndConditionsAgreementRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<MessageID>" + messageId + "</MessageID>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + description + "</ResDesc>");
                sb.Append("</UpdateTermsAndConditionsAgreementRes>");
                //Log
                writeLog("UpdateTermsAndConditionsAgreementRes Response : " + sb.ToString());
                return sb.ToString();
            }

            code = "05";
            description = "Update TermsAndConditionsAgreement Failed.";
            var errorResponse = Utils.GetErrorResponse(code, description);
            return errorResponse;
        }
        catch (Exception ex)
        {
            writeLog("Error In UpdateTermsAndConditionsAgreement Req : " + ex.Message);
        }
        return string.Empty;

    }
    private bool IsValidateUpdateTermsAndConditionsAgreementReq(Hashtable ht, out string code, out string description, out string version,
        out string timeStamp, out string messageId, out string email)
    {
        code = "00";
        description = "Success";
        version = string.Empty;
        timeStamp = string.Empty;
        messageId = string.Empty;
        email = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageId = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            description = "Invalid Request";
            writeLog("Error in Validation : Missing <Email> Tag");
            return false;
        }
        return true;
    }

    #endregion

    public string GetAgentGeoLocation(string reqXml)
    {
        var code = string.Empty;
        var desp = string.Empty;
        var version = string.Empty;
        var ts = string.Empty;
        var email = string.Empty;
        var password = string.Empty;
        var latitude = string.Empty;
        var longitude = string.Empty;
        var length = string.Empty;

        var ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateGeoLocationReq(ht, out code, out desp, out version, out ts, out email, out password, out latitude, out longitude, out length)) //, out txnperpage, out pageno
        {
            return Utils.GetErrorResponse(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        if (_agentWCF.GetAgenGeoLocation(out ds, out errmsg))
        {
            return CalculateLatLong(Convert.ToDouble(latitude), Convert.ToDouble(longitude), Convert.ToInt32(length), version, ts, ds);
        }

        return Utils.GetErrorResponse(code, errmsg);

    }

    bool IsValidateGeoLocationReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string latitude, out string longitude, out string length) //, out int txnperpage, out int pageno
    {
        code = "00";
        desp = "Success";
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        latitude = string.Empty;
        longitude = string.Empty;
        length = string.Empty;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("Latitude"))
        {
            latitude = ht["Latitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing billerID <Latitude> Tag");
            return false;
        }

        if (ht.ContainsKey("Longitude"))
        {
            longitude = ht["Longitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing billerID <Longitude> Tag");
            return false;
        }

        if (ht.ContainsKey("Length"))
        {
            length = ht["Length"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing billerID <Length> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;
    }

    public string CalculateLatLong(double latitude, double longitude, int length, string version, string ts, DataSet ds)
    {
        var center = new GeoCoordinate(latitude, longitude);
        var sb = new StringBuilder();
        var count = 0;
        if (ds.Tables[0].Rows.Count > 0)
        {
            sb.Append("<GetAgentGeoLocationRes>");
            sb.Append("<ResCode>00</ResCode>");
            sb.Append("<ResDesc>success</ResDesc>");
            sb.Append("<Version>" + version + "</Version>");
            sb.Append("<TimeStamp>" + ts + "</TimeStamp>");
            sb.Append("<Agents>");

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                var lat = ds.Tables[0].Rows[i]["LATITUDELOC"].ToString();
                var lon = ds.Tables[0].Rows[i]["LONGITUDELOC"].ToString();

                if (!string.IsNullOrEmpty(lat) && !string.IsNullOrEmpty(lon))
                {
                    if (lat == "-") continue;
                    if (lon == "-") continue;

                    var latResult = lat.Any(x => !char.IsLetter(x));
                    var lonResult = lon.Any(x => !char.IsLetter(x));
                    if (!latResult && !lonResult) continue;

                    var latdouble = Convert.ToDouble(lat);
                    var londouble = Convert.ToDouble(lon);

                    if (latdouble < -90 || latdouble > 90) continue;
                    if (londouble < -180 || londouble > 180) continue;

                    var geoCoordinate = new GeoCoordinate(latdouble, londouble);
                    var locationinMeter = geoCoordinate.GetDistanceTo(center);

                    if (locationinMeter > length) continue;

                    count++;
                    var branchaddress = ds.Tables[0].Rows[i]["AGENTBRANCHADDRESS"].ToString();
                    sb.Append("<Agent>");
                    sb.Append("<AGENTID>" + ds.Tables[0].Rows[i]["AGENTID"].ToString() + "</AGENTID>");
                    sb.Append("<AGENTCODE>" + ds.Tables[0].Rows[i]["AGENTCODE"].ToString() + "</AGENTCODE>");
                    sb.Append("<AGENTNAME>" + ds.Tables[0].Rows[i]["AGENTNAME"].ToString() + "</AGENTNAME>");
                    sb.Append("<AGENTNAMEMM>" + ds.Tables[0].Rows[i]["AGENTNAMEMM"].ToString() + "</AGENTNAMEMM>");
                    sb.Append("<AGENTLOGO>" + ds.Tables[0].Rows[i]["AGENTLOGO"].ToString() + "</AGENTLOGO>");
                    sb.Append("<AGENTBRANCHCODE>" + ds.Tables[0].Rows[i]["AGENTBRANCHCODE"].ToString() + "</AGENTBRANCHCODE>");
                    sb.Append("<AGENTBRANCHNAME>" + ds.Tables[0].Rows[i]["AGENTBRANCHNAME"].ToString() + "</AGENTBRANCHNAME>");
                    sb.Append("<AGENTBRANCHADDRESS>" + HttpUtility.HtmlEncode(branchaddress) + "</AGENTBRANCHADDRESS>");
                    sb.Append("<DIVISION>" + ds.Tables[0].Rows[i]["DIVISION"].ToString() + "</DIVISION>");
                    sb.Append("<TOWNSHIP>" + ds.Tables[0].Rows[i]["TOWNSHIP"].ToString() + "</TOWNSHIP>");
                    sb.Append("<AGENTSUPPORTPHONE>" + ds.Tables[0].Rows[i]["AGENTSUPPORTPHONE"].ToString() + "</AGENTSUPPORTPHONE>");
                    sb.Append("<LATITUDELOC>" + ds.Tables[0].Rows[i]["LATITUDELOC"].ToString() + "</LATITUDELOC>");
                    sb.Append("<LONGITUDELOC>" + ds.Tables[0].Rows[i]["LONGITUDELOC"].ToString() + "</LONGITUDELOC>");
                    sb.Append("<OPENINGHOUR>" + ds.Tables[0].Rows[i]["OPENINGHOUR"].ToString() + "</OPENINGHOUR>");
                    sb.Append("<SHOPTYPE>" + ds.Tables[0].Rows[i]["SHOPTYPE"].ToString() + "</SHOPTYPE>");
                    sb.Append("</Agent>");
                }
            }

            writeLog("Total agents are : " + count);
            sb.Append("</Agents>");
            sb.Append("</GetAgentGeoLocationRes>");
            writeLog("GetAgentGeoLocationRes : " + sb.ToString());
            return sb.ToString();

        }
        if (count <= 0)
        {
            return Utils.GetErrorResponse("99", "Agents not found.");
        }

        return sb.ToString();
    }

    public string B2BCancelReq(string reqXml)
    {
        MA2AAPI.BISWCF.ServiceClient bis = new MA2AAPI.BISWCF.ServiceClient();
        return bis.B2BCancel(reqXml);
    }

    public string DeepLinkProfileReq(string reqXml)
    {
        string code = string.Empty;
        string desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        string cardNo = string.Empty;
        string email = "";
        string errMsg = "";
        string result = "";

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        if (!IsValidDeepLinkProfileReq(ht, out code, out desp, out version, out ts, out messageID, out email))
        {
            return Utils.GetErrorString("1.0", "99", desp);
        }

        DataSet profileDs;
        if (_agentWCF.GetDeepLinkProfile(email,out profileDs, out errMsg))
        {
            StringBuilder sb = new StringBuilder();

            if (profileDs.Tables[0].Rows.Count > 0)
            {
                var row = profileDs.Tables[0].Rows[0];

                sb.Append("<DeepLinkProfileRes>");
                sb.Append(string.Format("<Version>{0}</Version>", version));
                sb.Append(string.Format("<TimeStamp>{0}</TimeStamp>", ts));
                sb.Append(string.Format("<MessageID>{0}</MessageID>", messageID));
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc></ResDesc>");
                sb.Append(string.Format("<PartnerId>{0}</PartnerId>", row["PartnerId"].ToString()));
                sb.Append(string.Format("<PartnerName>{0}</PartnerName>", row["PartnerName"].ToString()));
                sb.Append(string.Format("<DeepLink>{0}</DeepLink>", row["DeepLink"].ToString()));
                sb.Append(string.Format("<PartnerLogo>{0}</PartnerLogo>", row["PartnerLogo"].ToString()));
                sb.Append("</DeepLinkProfileRes>");

            }
            else
            {
                return GetDeepLinkError("Invalid Partner",version,ts,messageID);
            }
            result = sb.ToString();
        }
        else
        {
            return GetDeepLinkError("Invalid Partner", version, ts, messageID);
        }
        return result;
    }

    private string GetDeepLinkError(string errMsg, string version, string timestamp, string messageId)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("<DeepLinkProfileRes>");
        sb.Append(string.Format("<Version>{0}</Version>", version));
        sb.Append(string.Format("<TimeStamp>{0}</TimeStamp>", timestamp));
        sb.Append(string.Format("<MessageID>{0}</MessageID>", messageId));
        sb.Append("<ResCode>00</ResCode>");
        sb.Append("<ResDesc></ResDesc>");
        sb.Append(string.Format("<PartnerId>{0}</PartnerId>", ""));
        sb.Append(string.Format("<PartnerName>{0}</PartnerName>", ""));
        sb.Append(string.Format("<DeepLink>{0}</DeepLink>", ""));
        sb.Append(string.Format("<PartnerLogo>{0}</PartnerLogo>", ""));
        sb.Append("</DeepLinkProfileRes>");
        return sb.ToString();
    }

    #region BillPayment
    public string RecentBillPaymentTxnListReq(string reqxml)
    {
        writeLog("========================This is in RecentBillPaymentTxnListReq=========================");
        string code = string.Empty;
        string desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string agentUserId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string token = string.Empty;
        int billerId = 0;
        string agentCode = string.Empty;

        var ht = Utils.getHTableFromXML(reqxml);
        StringBuilder sb = new StringBuilder();

        if (!IsValidateRecentBillPaymentTxnListReq(ht,
            out code,
            out desp,
            out version,
            out ts,
            out agentUserId,
            out password,
            out messageID,
            out token,
            out billerId,
            out agentCode))
        {
            return Utils.GetErrorResponse(code, desp);
        }
        DataSet ds = null;
        string errMessage = string.Empty;
        try
        {
            if (_agentWCF.GetRecentBillPaymentTxnList(billerId, agentCode, out ds, out errMessage))
            {
                sb.Append("<RecentBillPaymentTxnListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[0].Rows.Count + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");
                writeLog("RecentBillPaymentTxnList count : " + ds.Tables[0].Rows.Count);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (var i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string businessAgentCode = ds.Tables[0].Rows[i]["AGENTCODE"].ToString();
                        string agentId = ds.Tables[0].Rows[i]["AGENTID"].ToString();
                        var agentLogoBase64String = (ds.Tables[0].Rows[i]["AGENTLOGO"] == DBNull.Value) ? GetDefaultPartnerLogo() : Convert.ToBase64String((byte[])ds.Tables[0].Rows[i]["AGENTLOGO"]);
                        string agentName = ds.Tables[0].Rows[i]["AGENTNAME"].ToString();
                        writeLog("Agent Logo Base64String : " + agentLogoBase64String);
                        sb.Append("<RecentBillPaymentTxn agentCode=" + "\"" + businessAgentCode
                        + "\" agentId=" + "\"" + agentId
                        + "\" agentLogo=" + "\"" + agentLogoBase64String
                        + "\" agentName=" + "\"" + agentName + "\"/>");

                    }
                }
                sb.Append("</RecentBillPaymentTxnListRes>");
                writeLog("RecentBillPaymentTxnListRes : " + sb.ToString());
            }
            else
            {
                writeLog("Error in GetRecentBillPaymentTxnList: " + errMessage);
                return Utils.GetErrorResponse("97", errMessage);
            }

        }
        catch (Exception ex)
        {
            sb.Append("</RecentBillPaymentTxnListRes>");
            writeLog("Exception in RecentBillPaymentTxnListReq : " + ex.Message);
        }
        return sb.ToString();
    }

    private string GetDefaultPartnerLogo()
    {
        writeLog("GetDefaultPartnerLogo");
        using (WebClient webClient = new WebClient())
        {
            string url = ConfigurationManager.AppSettings["DefaultPartnerLogoUrl"].ToString();
            writeLog("Default Partner Logo Url : " + url);
            byte[] imageByteArray = webClient.DownloadData(url);
            return Convert.ToBase64String(imageByteArray);
        }
    }

    bool IsValidateRecentBillPaymentTxnListReq(Hashtable ht,
        out string code,
        out string desp,
        out string version,
        out string ts,
        out string agentUserId,
        out string password,
        out string messageID,
        out string token,
        out int billerId,
        out string agentCode)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentUserId = string.Empty;
        token = string.Empty;
        billerId = 0;
        agentCode = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }

        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentUserId"))
        {
            agentUserId = ht["AgentUserId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing AgentUserId <AgentUserId> Tag");
            return false;
        }

        if (ht.ContainsKey("BillerId"))
        {
            billerId = Convert.ToInt32(ht["BillerId"].ToString());
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing BillerId <BillerId> Tag");
            return false;
        }


        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Token <Token> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentCode"))
        {
            agentCode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Token <AgentCode> Tag");
            return false;
        }

        //Check Null or Empty String
        if (string.IsNullOrEmpty(version)
            || string.IsNullOrEmpty(ts)
            || string.IsNullOrEmpty(messageID)
            || string.IsNullOrEmpty(agentUserId)
            || string.IsNullOrEmpty(password)
            || string.IsNullOrEmpty(token)
            || billerId == 0
            || string.IsNullOrEmpty(agentCode))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(agentUserId, password, out code, out desp);
    }

    public string BusinessCategoryListReq(string reqxml)
    {
        writeLog("========================This is in BusinessCategoryListReq=========================");
        string code = string.Empty;
        string desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string agentUserId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string token = string.Empty;

        var ht = Utils.getHTableFromXML(reqxml);
        StringBuilder sb = new StringBuilder();

        if (!IsValidateBusinessCategoryListReq(ht,
            out code,
            out desp,
            out version,
            out ts,
            out agentUserId,
            out password,
            out messageID,
            out token))
        {
            return Utils.GetErrorResponse(code, desp);
        }
        DataSet ds = null;
        string errMessage = string.Empty;
        try
        {
            if (_agentWCF.GetBusinessCategoryList(out ds, out errMessage))
            {
                sb.Append("<BusinessCategoryListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" total=" + "\"" + ds.Tables[0].Rows[0][0].ToString() + "\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");
                writeLog("BusinessCategoryList count : " + ds.Tables[1].Rows.Count);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (var i = 0; i < ds.Tables[1].Rows.Count; i++)
                    {
                        string businessCategoryId = ds.Tables[1].Rows[i]["Id"].ToString();
                        string name = ds.Tables[1].Rows[i]["Name"].ToString();
                        string logo = ConfigurationManager.AppSettings["BusinessCategoryLogoUrl"].ToString() + businessCategoryId + ".png";
                        sb.Append("<BusinessCategory Id=" + "\"" + businessCategoryId
                        + "\" name=" + "\"" + name
                        + "\" logo=" + "\"" + logo + "\"/>");

                    }
                }
                sb.Append("</BusinessCategoryListRes>");
                writeLog("BusinessCategoryListRes : " + sb.ToString());
            }
            else
            {
                writeLog("Error in GetBusinessCategoryList: " + errMessage);
                return Utils.GetErrorResponse("97", errMessage);
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception in BusinessCategoryListReq : " + ex.Message);
        }
        return sb.ToString();
    }

    bool IsValidateBusinessCategoryListReq(Hashtable ht,
        out string code,
        out string desp,
        out string version,
        out string ts,
        out string agentUserId,
        out string password,
        out string messageID,
        out string token)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentUserId = string.Empty;
        token = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }

        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentUserId"))
        {
            agentUserId = ht["AgentUserId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing AgentUserId <AgentUserId> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Token <Token> Tag");
            return false;
        }

        //Check Null or Empty String
        if (string.IsNullOrEmpty(version)
            || string.IsNullOrEmpty(ts)
            || string.IsNullOrEmpty(messageID)
            || string.IsNullOrEmpty(agentUserId)
            || string.IsNullOrEmpty(password)
            || string.IsNullOrEmpty(token))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(agentUserId, password, out code, out desp);
    }

    public string SearchBusinessNameReq(string reqxml)
    {
        writeLog("========================This is in SearchBusinessCategoryReq=========================");
        string code = string.Empty;
        string desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string agentUserId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string token = string.Empty;
        string searchKeyword = string.Empty;

        var ht = Utils.getHTableFromXML(reqxml);
        StringBuilder sb = new StringBuilder();

        if (!IsValidateSearchBusinessCategoryReq(ht,
            out code,
            out desp,
            out version,
            out ts,
            out agentUserId,
            out password,
            out messageID,
            out token,
            out searchKeyword))
        {
            return Utils.GetErrorResponse(code, desp);
        }
        DataSet ds = null;
        string errMessage = string.Empty;
        try
        {
            if (_agentWCF.SearchAgentByAgentName(searchKeyword, out ds, out errMessage))
            {
                sb.Append("<SearchBusinessNameRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (var i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string agentCode = ds.Tables[0].Rows[i]["AGENTCODE"].ToString();
                        string agentId = ds.Tables[0].Rows[i]["AGENTID"].ToString();
                        var agentLogoBase64String = (ds.Tables[0].Rows[i]["AGENTLOGO"] == DBNull.Value) ? GetDefaultPartnerLogo() : Convert.ToBase64String((byte[])ds.Tables[0].Rows[i]["AGENTLOGO"]);
                        string agentName = ds.Tables[0].Rows[i]["AGENTNAME"].ToString();
                        string branchAddress = ds.Tables[0].Rows[i]["AGENTBRANCHADDRESS"].ToString();
                        string phone = ds.Tables[0].Rows[i]["AGENTSUPPORTPHONE"].ToString();
                        string businessCategoryName = ds.Tables[0].Rows[i]["BusinessCategoryName"].ToString();
                        string description = ds.Tables[0].Rows[i]["BusinessCategoryDescription"].ToString();
                        sb.Append("<SearchBusinessName agentCode=" + "\"" + agentCode
                        + "\" agentId=" + "\"" + agentId
                        + "\" agentLogo=" + "\"" + agentLogoBase64String
                        + "\" agentName=" + "\"" + agentName
                        + "\" address=" + "\"" + HttpUtility.HtmlEncode(branchAddress)
                        + "\" supportPhone=" + "\"" + phone
                        + "\" categoryName=" + "\"" + businessCategoryName
                        + "\" description=" + "\"" + description
                        + "\"/>");

                    }
                }
                sb.Append("</SearchBusinessNameRes>");
                writeLog("SearchBusinessNameRes :" + sb.ToString());
            }
            else
            {
                writeLog("Error in SearchAgentByBusinessCategory : " + errMessage);
                return Utils.GetErrorResponse("97", errMessage);
            }
        }
        catch (Exception ex)
        {
            sb.Append("</SearchBusinessNameRes>");
            writeLog("Exception in SearchBusinessCategoryReq : " + ex.Message);
        }
        return sb.ToString();

    }

    bool IsValidateSearchBusinessCategoryReq(Hashtable ht,
        out string code,
        out string desp,
        out string version,
        out string ts,
        out string agentUserId,
        out string password,
        out string messageID,
        out string token,
        out string searchKeyword)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentUserId = string.Empty;
        token = string.Empty;
        searchKeyword = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }

        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentUserId"))
        {
            agentUserId = ht["AgentUserId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing AgentUserId <AgentUserId> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Token <Token> Tag");
            return false;
        }

        if (ht.ContainsKey("SearchKeyword"))
        {
            searchKeyword = ht["SearchKeyword"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing SearchKeyword <SearchKeyword> Tag");
            return false;
        }

        //Check Null or Empty String
        if (string.IsNullOrEmpty(version)
            || string.IsNullOrEmpty(ts)
            || string.IsNullOrEmpty(messageID)
            || string.IsNullOrEmpty(agentUserId)
            || string.IsNullOrEmpty(password)
            || string.IsNullOrEmpty(token)
            || string.IsNullOrEmpty(searchKeyword))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(agentUserId, password, out code, out desp);
    }

    public string BillPaymentBusinessListReq(string reqxml)
    {
        writeLog("========================This is in BillPaymentBusinessListReq=========================");
        string code = string.Empty;
        string desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string agentUserId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string token = string.Empty;
        int businessCategoryId = 0;

        var ht = Utils.getHTableFromXML(reqxml);
        StringBuilder sb = new StringBuilder();

        if (!IsValidateBillPaymentBusinessListReq(ht,
            out code,
            out desp,
            out version,
            out ts,
            out agentUserId,
            out password,
            out messageID,
            out token,
            out businessCategoryId))
        {
            return Utils.GetErrorResponse(code, desp);
        }
        DataSet ds = null;
        string errMessage = string.Empty;
        try
        {
            if (_agentWCF.GetAgentListByBusinessCategoryId(businessCategoryId, out ds, out errMessage))
            {
                sb.Append("<BillPaymentBusinessListRes ResCode=" + "\"00\"  ResDesc=" + "\"success\" version=" + "\"1.0\" timeStamp=" + "\"" + DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\" messageID=" + "\"" + messageID + "\"" + ">");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (var i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string businessAgentCode = ds.Tables[0].Rows[i]["AGENTCODE"].ToString();
                        string businessAgentId = ds.Tables[0].Rows[i]["AGENTID"].ToString();
                        string businessAgentLogoBase64String = (ds.Tables[0].Rows[i]["AGENTLOGO"] == DBNull.Value) ? GetDefaultPartnerLogo() : Convert.ToBase64String((byte[])ds.Tables[0].Rows[i]["AGENTLOGO"]);
                        string businessAgentName = ds.Tables[0].Rows[i]["AGENTNAME"].ToString();
                        string businessAddress = ds.Tables[0].Rows[i]["AGENTBRANCHADDRESS"].ToString();
                        string businessPhone = ds.Tables[0].Rows[i]["AGENTSUPPORTPHONE"].ToString();
                        string businessCategoryName = ds.Tables[0].Rows[i]["BusinessCategoryName"].ToString();
                        string businessDescription = ds.Tables[0].Rows[i]["BusinessCategoryDescription"].ToString();
                        sb.Append("<BillPaymentBusiness agentCode=" + "\"" + businessAgentCode
                        + "\" agentId=" + "\"" + businessAgentId
                        + "\" agentLogo=" + "\"" + businessAgentLogoBase64String
                        + "\" agentName=" + "\"" + businessAgentName
                        + "\" address=" + "\"" + HttpUtility.HtmlEncode(businessAddress)
                        + "\" supportPhone=" + "\"" + businessPhone
                        + "\" categoryName=" + "\"" + businessCategoryName
                        + "\" description=" + "\"" + businessDescription
                        + "\"/>");

                    }
                }
                sb.Append("</BillPaymentBusinessListRes>");
                writeLog("BillPaymentBusinessListRes :" + sb.ToString());
            }
            else
            {
                writeLog("Error in GetAgentListByBusinessCategoryId : " + errMessage);
                return Utils.GetErrorResponse("97", errMessage);
            }
        }
        catch (Exception ex)
        {
            sb.Append("</BillPaymentBusinessListRes>");
            writeLog("Exception in BillPaymentBusinessListReq : " + ex.Message);
        }
        return sb.ToString();

    }

    bool IsValidateBillPaymentBusinessListReq(Hashtable ht,
        out string code,
        out string desp,
        out string version,
        out string ts,
        out string agentUserId,
        out string password,
        out string messageID,
        out string token,
        out int businessCategoryId)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentUserId = string.Empty;
        token = string.Empty;
        businessCategoryId = 0;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }

        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentUserId"))
        {
            agentUserId = ht["AgentUserId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing AgentUserId <AgentUserId> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("Token"))
        {
            token = ht["Token"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Token <Token> Tag");
            return false;
        }

        if (ht.ContainsKey("BusinessCategoryId"))
        {
            businessCategoryId = Convert.ToInt32(ht["BusinessCategoryId"].ToString());
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing BusinessCategoryId <BusinessCategoryId> Tag");
            return false;
        }

        //Check Null or Empty String
        if (string.IsNullOrEmpty(version)
            || string.IsNullOrEmpty(ts)
            || string.IsNullOrEmpty(messageID)
            || string.IsNullOrEmpty(agentUserId)
            || string.IsNullOrEmpty(password)
            || string.IsNullOrEmpty(token)
            || businessCategoryId == 0)
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(agentUserId, password, out code, out desp);
    }
    #endregion

    #region Reward
    private readonly object lockForBalance = new object();
    public string RewardWinnerReq(string reqXml)
    {
        writeLog("======================== This is in RewardWinnerReq =========================");
        string code = string.Empty;
        string desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string agentUserId = string.Empty;
        string password = string.Empty;
        string messageID = string.Empty;
        string agentCode = string.Empty;
        string rewardId = string.Empty;
        int agentId = 0;
        string deviceToken = string.Empty;
        string deviceInfo = string.Empty;

        var ht = Utils.getHTableFromXML(reqXml);
        StringBuilder sb = new StringBuilder();

        if (!IsValidateRewardWinnerReq(ht,
            out code,
            out desp,
            out version,
            out ts,
            out agentUserId,
            out password,
            out messageID,
            out agentCode,
            out rewardId,
            out agentId,
            out deviceInfo,
            out deviceToken)) return Utils.GetErrorResponse(code, desp);
        try
        {
            var randomRewardAmount = 0.00;
            DataTable rewardTable = new DataTable();
            double availableBalance = 0;
            var defaultWinnerResponse = string.Empty;
            lock (lockForBalance)
            {
                var ds = new DataSet();
                var errMessage = string.Empty;
                messageID += messageID + " | ";
                if (!_agentWCF.GetRewardById(rewardId, agentId, out ds, out errMessage))
                {
                    writeLog(messageID + "Error in GetRewardById : " + errMessage);
                    return Utils.GetErrorResponse("99", string.Empty);
                }
                rewardTable = ds.Tables[0];
                var totalUsedRewardAmountTable = ds.Tables[1];
                var agentAvailableBalance = ds.Tables[2].Rows[0]["AVAILABLEBALANCE"].ToString();
                if (rewardTable.Rows.Count <= 0) defaultWinnerResponse = (new XMLSerializationService<RewardWinnerResponse>()).SerializeData(DefaultWinnerResponse(agentAvailableBalance));
                if (string.IsNullOrEmpty(defaultWinnerResponse))
                {
                    var rewardAmountList = _rewardService.GetRewardAmountList(messageID, rewardTable.Rows[0]);
                    randomRewardAmount = _rewardService.GetRandomRewardAmount(rewardAmountList);

                    var availableRewardBalance = _rewardService.GetRemainingBalance(messageID, rewardTable.Rows[0], totalUsedRewardAmountTable);
                    if (availableRewardBalance < randomRewardAmount) defaultWinnerResponse = (new XMLSerializationService<RewardWinnerResponse>()).SerializeData(DefaultWinnerResponse(agentAvailableBalance));
                    if (string.IsNullOrEmpty(defaultWinnerResponse))
                    {
                        availableBalance = 0;
                        if (!_rewardService.UpdateRewardWinner(messageID, rewardId, agentCode, agentUserId, agentId, randomRewardAmount, out availableBalance)) defaultWinnerResponse = (new XMLSerializationService<RewardWinnerResponse>()).SerializeData(DefaultWinnerResponse(agentAvailableBalance));
                    }
                }
            }
            Task.Factory.StartNew(() => _rewardService.CheckThresholdBalance(rewardTable.Rows[0], rewardId, messageID));

            if (string.IsNullOrEmpty(defaultWinnerResponse))
            {
                if (randomRewardAmount > 0) Task.Factory.StartNew(() => _rewardService.PushNotification(messageID, agentUserId, randomRewardAmount, agentId, deviceInfo, deviceToken));
                var response = new RewardWinnerResponse();
                response.ResCode = "00";
                response.ResDesc = "Success";
                response.RewardAmount = randomRewardAmount.ToString();
                response.AvailableBalance = availableBalance.ToString();

                return (new XMLSerializationService<RewardWinnerResponse>()).SerializeData(response);
            }
            else return defaultWinnerResponse;
        }
        catch (Exception ex)
        {
            writeLog(messageID + "Exception error occurred in RewardWinnerReq : " + ex.Message);
            return string.Empty;
        }
    }

    private RewardWinnerResponse DefaultWinnerResponse(string balance)
    {
        var response = new RewardWinnerResponse();
        response.ResCode = "00";
        response.ResDesc = "Success";
        response.RewardAmount = "0";
        response.AvailableBalance = balance;
        return response;
    }

    private bool IsValidateRewardWinnerReq(Hashtable ht,
        out string code,
        out string desp,
        out string version,
        out string ts,
        out string agentUserId,
        out string password,
        out string messageID,
        out string agentCode,
        out string rewardId,
        out int rewardagentId,
        out string deviceInfo,
        out string deviceToken)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        password = string.Empty;
        messageID = string.Empty;
        agentUserId = string.Empty;
        agentCode = string.Empty;
        rewardId = string.Empty;
        rewardagentId = 0;
        deviceInfo = string.Empty;
        deviceToken = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <Version> Tag");
            return false;
        }

        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentUserId"))
        {
            agentUserId = ht["AgentUserId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <AgentUserId> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentCode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <AgentCode> Tag");
            return false;
        }

        if (ht.ContainsKey("RewardId"))
        {
            rewardId = ht["RewardId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <RewardId> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentId"))
        {
            rewardagentId = Convert.ToInt32(ht["AgentId"].ToString());
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <AgentId> Tag");
            return false;
        }

        if (ht.ContainsKey("DeviceInfo"))
        {
            deviceInfo = ht["DeviceInfo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing <DeviceInfo> Tag");
            return false;
        }

        if (ht.ContainsKey("DeviceToken"))
        {
            deviceToken = ht["DeviceToken"].ToString();
        }

        //Check Null or Empty String
        if (string.IsNullOrEmpty(version)
            || string.IsNullOrEmpty(ts)
            || string.IsNullOrEmpty(messageID)
            || string.IsNullOrEmpty(agentUserId)
            || string.IsNullOrEmpty(password)
            || string.IsNullOrEmpty(agentCode)
            || string.IsNullOrEmpty(rewardId)
            || string.IsNullOrEmpty(deviceInfo)
            || rewardagentId == 0)
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return authentication(agentUserId, password, out code, out desp);
    }
    #endregion

}

