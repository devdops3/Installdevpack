//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MA2AAPI.BISWCF {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BISWCF.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSkyNetPackages", ReplyAction="http://tempuri.org/IService/GetSkyNetPackagesResponse")]
        string GetSkyNetPackages(string requestXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSkyNetPackages", ReplyAction="http://tempuri.org/IService/GetSkyNetPackagesResponse")]
        System.Threading.Tasks.Task<string> GetSkyNetPackagesAsync(string requestXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        MA2AAPI.BISWCF.CompositeType GetDataUsingDataContract(MA2AAPI.BISWCF.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MA2AAPI.BISWCF.CompositeType> GetDataUsingDataContractAsync(MA2AAPI.BISWCF.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/inquiry2Biller", ReplyAction="http://tempuri.org/IService/inquiry2BillerResponse")]
        string inquiry2Biller(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/inquiry2Biller", ReplyAction="http://tempuri.org/IService/inquiry2BillerResponse")]
        System.Threading.Tasks.Task<string> inquiry2BillerAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCanalPlusPackages", ReplyAction="http://tempuri.org/IService/getCanalPlusPackagesResponse")]
        string getCanalPlusPackages(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getCanalPlusPackages", ReplyAction="http://tempuri.org/IService/getCanalPlusPackagesResponse")]
        System.Threading.Tasks.Task<string> getCanalPlusPackagesAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConfirmToBiller", ReplyAction="http://tempuri.org/IService/ConfirmToBillerResponse")]
        string ConfirmToBiller(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConfirmToBiller", ReplyAction="http://tempuri.org/IService/ConfirmToBillerResponse")]
        System.Threading.Tasks.Task<string> ConfirmToBillerAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SystemSettingReq", ReplyAction="http://tempuri.org/IService/SystemSettingReqResponse")]
        string SystemSettingReq(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SystemSettingReq", ReplyAction="http://tempuri.org/IService/SystemSettingReqResponse")]
        System.Threading.Tasks.Task<string> SystemSettingReqAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CountryListReq", ReplyAction="http://tempuri.org/IService/CountryListReqResponse")]
        string CountryListReq(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CountryListReq", ReplyAction="http://tempuri.org/IService/CountryListReqResponse")]
        System.Threading.Tasks.Task<string> CountryListReqAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterReq", ReplyAction="http://tempuri.org/IService/RegisterReqResponse")]
        string RegisterReq(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterReq", ReplyAction="http://tempuri.org/IService/RegisterReqResponse")]
        System.Threading.Tasks.Task<string> RegisterReqAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RepaymentServiceFeeReq", ReplyAction="http://tempuri.org/IService/RepaymentServiceFeeReqResponse")]
        string RepaymentServiceFeeReq(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RepaymentServiceFeeReq", ReplyAction="http://tempuri.org/IService/RepaymentServiceFeeReqResponse")]
        System.Threading.Tasks.Task<string> RepaymentServiceFeeReqAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/doSMS", ReplyAction="http://tempuri.org/IService/doSMSResponse")]
        bool doSMS(long txnID, string mobileNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/doSMS", ReplyAction="http://tempuri.org/IService/doSMSResponse")]
        System.Threading.Tasks.Task<bool> doSMSAsync(long txnID, string mobileNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendUnpairEmail", ReplyAction="http://tempuri.org/IService/SendUnpairEmailResponse")]
        bool SendUnpairEmail(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendUnpairEmail", ReplyAction="http://tempuri.org/IService/SendUnpairEmailResponse")]
        System.Threading.Tasks.Task<bool> SendUnpairEmailAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OTPReq", ReplyAction="http://tempuri.org/IService/OTPReqResponse")]
        string OTPReq(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OTPReq", ReplyAction="http://tempuri.org/IService/OTPReqResponse")]
        System.Threading.Tasks.Task<string> OTPReqAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OTPReqV2", ReplyAction="http://tempuri.org/IService/OTPReqV2Response")]
        string OTPReqV2(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OTPReqV2", ReplyAction="http://tempuri.org/IService/OTPReqV2Response")]
        System.Threading.Tasks.Task<string> OTPReqV2Async(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUser", ReplyAction="http://tempuri.org/IService/RegisterUserResponse")]
        string RegisterUser(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUser", ReplyAction="http://tempuri.org/IService/RegisterUserResponse")]
        System.Threading.Tasks.Task<string> RegisterUserAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateProfileReq", ReplyAction="http://tempuri.org/IService/UpdateProfileReqResponse")]
        string UpdateProfileReq(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateProfileReq", ReplyAction="http://tempuri.org/IService/UpdateProfileReqResponse")]
        System.Threading.Tasks.Task<string> UpdateProfileReqAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateProfileReqV2", ReplyAction="http://tempuri.org/IService/UpdateProfileReqV2Response")]
        string UpdateProfileReqV2(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateProfileReqV2", ReplyAction="http://tempuri.org/IService/UpdateProfileReqV2Response")]
        System.Threading.Tasks.Task<string> UpdateProfileReqV2Async(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertTransactionForPaymentAPI", ReplyAction="http://tempuri.org/IService/InsertTransactionForPaymentAPIResponse")]
        MA2AAPI.BISWCF.InsertTransactionForPaymentAPIResponse InsertTransactionForPaymentAPI(MA2AAPI.BISWCF.InsertTransactionForPaymentAPIRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertTransactionForPaymentAPI", ReplyAction="http://tempuri.org/IService/InsertTransactionForPaymentAPIResponse")]
        System.Threading.Tasks.Task<MA2AAPI.BISWCF.InsertTransactionForPaymentAPIResponse> InsertTransactionForPaymentAPIAsync(MA2AAPI.BISWCF.InsertTransactionForPaymentAPIRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateTransactionForPaymentAPI", ReplyAction="http://tempuri.org/IService/UpdateTransactionForPaymentAPIResponse")]
        bool UpdateTransactionForPaymentAPI(long txnID, string email, string ref1, string ref2, string isAgreement, double availablebalance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateTransactionForPaymentAPI", ReplyAction="http://tempuri.org/IService/UpdateTransactionForPaymentAPIResponse")]
        System.Threading.Tasks.Task<bool> UpdateTransactionForPaymentAPIAsync(long txnID, string email, string ref1, string ref2, string isAgreement, double availablebalance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConfirmRequestToPG", ReplyAction="http://tempuri.org/IService/ConfirmRequestToPGResponse")]
        bool ConfirmRequestToPG(long txnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConfirmRequestToPG", ReplyAction="http://tempuri.org/IService/ConfirmRequestToPGResponse")]
        System.Threading.Tasks.Task<bool> ConfirmRequestToPGAsync(long txnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateErrorWithAddBalance", ReplyAction="http://tempuri.org/IService/UpdateErrorWithAddBalanceResponse")]
        string UpdateErrorWithAddBalance(string rescode, string resdesc, long txnID, string logerrormessage, int agentID, double amount, string isAgreement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateErrorWithAddBalance", ReplyAction="http://tempuri.org/IService/UpdateErrorWithAddBalanceResponse")]
        System.Threading.Tasks.Task<string> UpdateErrorWithAddBalanceAsync(string rescode, string resdesc, long txnID, string logerrormessage, int agentID, double amount, string isAgreement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertTransactionInvoice", ReplyAction="http://tempuri.org/IService/InsertTransactionInvoiceResponse")]
        bool InsertTransactionInvoice(string reqXml, long txnID, string paymentMethod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertTransactionInvoice", ReplyAction="http://tempuri.org/IService/InsertTransactionInvoiceResponse")]
        System.Threading.Tasks.Task<bool> InsertTransactionInvoiceAsync(string reqXml, long txnID, string paymentMethod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TelenorBBInquiry", ReplyAction="http://tempuri.org/IService/TelenorBBInquiryResponse")]
        string TelenorBBInquiry(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TelenorBBInquiry", ReplyAction="http://tempuri.org/IService/TelenorBBInquiryResponse")]
        System.Threading.Tasks.Task<string> TelenorBBInquiryAsync(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FtthOrWtthInquiry", ReplyAction="http://tempuri.org/IService/FtthOrWtthInquiryResponse")]
        string FtthOrWtthInquiry(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FtthOrWtthInquiry", ReplyAction="http://tempuri.org/IService/FtthOrWtthInquiryResponse")]
        System.Threading.Tasks.Task<string> FtthOrWtthInquiryAsync(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MptPackageInquiry", ReplyAction="http://tempuri.org/IService/MptPackageInquiryResponse")]
        string MptPackageInquiry(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MptPackageInquiry", ReplyAction="http://tempuri.org/IService/MptPackageInquiryResponse")]
        System.Threading.Tasks.Task<string> MptPackageInquiryAsync(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParamiGasPackageInquiry", ReplyAction="http://tempuri.org/IService/ParamiGasPackageInquiryResponse")]
        string ParamiGasPackageInquiry(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParamiGasPackageInquiry", ReplyAction="http://tempuri.org/IService/ParamiGasPackageInquiryResponse")]
        System.Threading.Tasks.Task<string> ParamiGasPackageInquiryAsync(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGiftCardDenoList", ReplyAction="http://tempuri.org/IService/GetGiftCardDenoListResponse")]
        string GetGiftCardDenoList(string taxId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGiftCardDenoList", ReplyAction="http://tempuri.org/IService/GetGiftCardDenoListResponse")]
        System.Threading.Tasks.Task<string> GetGiftCardDenoListAsync(string taxId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProductList", ReplyAction="http://tempuri.org/IService/GetProductListResponse")]
        string GetProductList(string taxId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProductList", ReplyAction="http://tempuri.org/IService/GetProductListResponse")]
        System.Threading.Tasks.Task<string> GetProductListAsync(string taxId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OoredooPackageInquiry", ReplyAction="http://tempuri.org/IService/OoredooPackageInquiryResponse")]
        string OoredooPackageInquiry(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OoredooPackageInquiry", ReplyAction="http://tempuri.org/IService/OoredooPackageInquiryResponse")]
        System.Threading.Tasks.Task<string> OoredooPackageInquiryAsync(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MyTelPackageInquiry", ReplyAction="http://tempuri.org/IService/MyTelPackageInquiryResponse")]
        string MyTelPackageInquiry(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MyTelPackageInquiry", ReplyAction="http://tempuri.org/IService/MyTelPackageInquiryResponse")]
        System.Threading.Tasks.Task<string> MyTelPackageInquiryAsync(string reqXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EventInquiry", ReplyAction="http://tempuri.org/IService/EventInquiryResponse")]
        string EventInquiry(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EventInquiry", ReplyAction="http://tempuri.org/IService/EventInquiryResponse")]
        System.Threading.Tasks.Task<string> EventInquiryAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MerchantAcceptanceReq", ReplyAction="http://tempuri.org/IService/MerchantAcceptanceReqResponse")]
        string MerchantAcceptanceReq(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MerchantAcceptanceReq", ReplyAction="http://tempuri.org/IService/MerchantAcceptanceReqResponse")]
        System.Threading.Tasks.Task<string> MerchantAcceptanceReqAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EPaymentVoidReq", ReplyAction="http://tempuri.org/IService/EPaymentVoidReqResponse")]
        string EPaymentVoidReq(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EPaymentVoidReq", ReplyAction="http://tempuri.org/IService/EPaymentVoidReqResponse")]
        System.Threading.Tasks.Task<string> EPaymentVoidReqAsync(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAstrologerList", ReplyAction="http://tempuri.org/IService/GetAstrologerListResponse")]
        string GetAstrologerList(string taxId, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAstrologerList", ReplyAction="http://tempuri.org/IService/GetAstrologerListResponse")]
        System.Threading.Tasks.Task<string> GetAstrologerListAsync(string taxId, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/B2BCancel", ReplyAction="http://tempuri.org/IService/B2BCancelResponse")]
        string B2BCancel(string reqXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/B2BCancel", ReplyAction="http://tempuri.org/IService/B2BCancelResponse")]
        System.Threading.Tasks.Task<string> B2BCancelAsync(string reqXml);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertTransactionForPaymentAPI", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertTransactionForPaymentAPIRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string taxID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string agentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string ref1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string ref2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string amount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string version;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string locLatitude;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public string locLongitude;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public string productdesc;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public string appType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=11)]
        public string messageid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=12)]
        public string paymentMethod;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=13)]
        public string agentCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=14)]
        public string agentBranchCode;
        
        public InsertTransactionForPaymentAPIRequest() {
        }
        
        public InsertTransactionForPaymentAPIRequest(string taxID, string agentID, string email, string ref1, string ref2, string amount, string version, string locLatitude, string locLongitude, string productdesc, string appType, string messageid, string paymentMethod, string agentCode, string agentBranchCode) {
            this.taxID = taxID;
            this.agentID = agentID;
            this.email = email;
            this.ref1 = ref1;
            this.ref2 = ref2;
            this.amount = amount;
            this.version = version;
            this.locLatitude = locLatitude;
            this.locLongitude = locLongitude;
            this.productdesc = productdesc;
            this.appType = appType;
            this.messageid = messageid;
            this.paymentMethod = paymentMethod;
            this.agentCode = agentCode;
            this.agentBranchCode = agentBranchCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertTransactionForPaymentAPIResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertTransactionForPaymentAPIResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertTransactionForPaymentAPIResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string agentTxnID;
        
        public InsertTransactionForPaymentAPIResponse() {
        }
        
        public InsertTransactionForPaymentAPIResponse(bool InsertTransactionForPaymentAPIResult, string agentTxnID) {
            this.InsertTransactionForPaymentAPIResult = InsertTransactionForPaymentAPIResult;
            this.agentTxnID = agentTxnID;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : MA2AAPI.BISWCF.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<MA2AAPI.BISWCF.IService>, MA2AAPI.BISWCF.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetSkyNetPackages(string requestXML) {
            return base.Channel.GetSkyNetPackages(requestXML);
        }
        
        public System.Threading.Tasks.Task<string> GetSkyNetPackagesAsync(string requestXML) {
            return base.Channel.GetSkyNetPackagesAsync(requestXML);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public MA2AAPI.BISWCF.CompositeType GetDataUsingDataContract(MA2AAPI.BISWCF.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MA2AAPI.BISWCF.CompositeType> GetDataUsingDataContractAsync(MA2AAPI.BISWCF.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string inquiry2Biller(string reqXml) {
            return base.Channel.inquiry2Biller(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> inquiry2BillerAsync(string reqXml) {
            return base.Channel.inquiry2BillerAsync(reqXml);
        }
        
        public string getCanalPlusPackages(string reqXml) {
            return base.Channel.getCanalPlusPackages(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> getCanalPlusPackagesAsync(string reqXml) {
            return base.Channel.getCanalPlusPackagesAsync(reqXml);
        }
        
        public string ConfirmToBiller(string reqXml) {
            return base.Channel.ConfirmToBiller(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> ConfirmToBillerAsync(string reqXml) {
            return base.Channel.ConfirmToBillerAsync(reqXml);
        }
        
        public string SystemSettingReq(string reqXml) {
            return base.Channel.SystemSettingReq(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> SystemSettingReqAsync(string reqXml) {
            return base.Channel.SystemSettingReqAsync(reqXml);
        }
        
        public string CountryListReq(string reqXml) {
            return base.Channel.CountryListReq(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> CountryListReqAsync(string reqXml) {
            return base.Channel.CountryListReqAsync(reqXml);
        }
        
        public string RegisterReq(string reqXml) {
            return base.Channel.RegisterReq(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> RegisterReqAsync(string reqXml) {
            return base.Channel.RegisterReqAsync(reqXml);
        }
        
        public string RepaymentServiceFeeReq(string reqXml) {
            return base.Channel.RepaymentServiceFeeReq(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> RepaymentServiceFeeReqAsync(string reqXml) {
            return base.Channel.RepaymentServiceFeeReqAsync(reqXml);
        }
        
        public bool doSMS(long txnID, string mobileNo) {
            return base.Channel.doSMS(txnID, mobileNo);
        }
        
        public System.Threading.Tasks.Task<bool> doSMSAsync(long txnID, string mobileNo) {
            return base.Channel.doSMSAsync(txnID, mobileNo);
        }
        
        public bool SendUnpairEmail(string userID) {
            return base.Channel.SendUnpairEmail(userID);
        }
        
        public System.Threading.Tasks.Task<bool> SendUnpairEmailAsync(string userID) {
            return base.Channel.SendUnpairEmailAsync(userID);
        }
        
        public string OTPReq(string reqXml) {
            return base.Channel.OTPReq(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> OTPReqAsync(string reqXml) {
            return base.Channel.OTPReqAsync(reqXml);
        }
        
        public string OTPReqV2(string reqXml) {
            return base.Channel.OTPReqV2(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> OTPReqV2Async(string reqXml) {
            return base.Channel.OTPReqV2Async(reqXml);
        }
        
        public string RegisterUser(string reqXml) {
            return base.Channel.RegisterUser(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> RegisterUserAsync(string reqXml) {
            return base.Channel.RegisterUserAsync(reqXml);
        }
        
        public string UpdateProfileReq(string reqXml) {
            return base.Channel.UpdateProfileReq(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> UpdateProfileReqAsync(string reqXml) {
            return base.Channel.UpdateProfileReqAsync(reqXml);
        }
        
        public string UpdateProfileReqV2(string reqXml) {
            return base.Channel.UpdateProfileReqV2(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> UpdateProfileReqV2Async(string reqXml) {
            return base.Channel.UpdateProfileReqV2Async(reqXml);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MA2AAPI.BISWCF.InsertTransactionForPaymentAPIResponse MA2AAPI.BISWCF.IService.InsertTransactionForPaymentAPI(MA2AAPI.BISWCF.InsertTransactionForPaymentAPIRequest request) {
            return base.Channel.InsertTransactionForPaymentAPI(request);
        }
        
        public bool InsertTransactionForPaymentAPI(
                    string taxID, 
                    string agentID, 
                    string email, 
                    string ref1, 
                    string ref2, 
                    string amount, 
                    string version, 
                    string locLatitude, 
                    string locLongitude, 
                    string productdesc, 
                    string appType, 
                    string messageid, 
                    string paymentMethod, 
                    string agentCode, 
                    string agentBranchCode, 
                    out string agentTxnID) {
            MA2AAPI.BISWCF.InsertTransactionForPaymentAPIRequest inValue = new MA2AAPI.BISWCF.InsertTransactionForPaymentAPIRequest();
            inValue.taxID = taxID;
            inValue.agentID = agentID;
            inValue.email = email;
            inValue.ref1 = ref1;
            inValue.ref2 = ref2;
            inValue.amount = amount;
            inValue.version = version;
            inValue.locLatitude = locLatitude;
            inValue.locLongitude = locLongitude;
            inValue.productdesc = productdesc;
            inValue.appType = appType;
            inValue.messageid = messageid;
            inValue.paymentMethod = paymentMethod;
            inValue.agentCode = agentCode;
            inValue.agentBranchCode = agentBranchCode;
            MA2AAPI.BISWCF.InsertTransactionForPaymentAPIResponse retVal = ((MA2AAPI.BISWCF.IService)(this)).InsertTransactionForPaymentAPI(inValue);
            agentTxnID = retVal.agentTxnID;
            return retVal.InsertTransactionForPaymentAPIResult;
        }
        
        public System.Threading.Tasks.Task<MA2AAPI.BISWCF.InsertTransactionForPaymentAPIResponse> InsertTransactionForPaymentAPIAsync(MA2AAPI.BISWCF.InsertTransactionForPaymentAPIRequest request) {
            return base.Channel.InsertTransactionForPaymentAPIAsync(request);
        }
        
        public bool UpdateTransactionForPaymentAPI(long txnID, string email, string ref1, string ref2, string isAgreement, double availablebalance) {
            return base.Channel.UpdateTransactionForPaymentAPI(txnID, email, ref1, ref2, isAgreement, availablebalance);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTransactionForPaymentAPIAsync(long txnID, string email, string ref1, string ref2, string isAgreement, double availablebalance) {
            return base.Channel.UpdateTransactionForPaymentAPIAsync(txnID, email, ref1, ref2, isAgreement, availablebalance);
        }
        
        public bool ConfirmRequestToPG(long txnID) {
            return base.Channel.ConfirmRequestToPG(txnID);
        }
        
        public System.Threading.Tasks.Task<bool> ConfirmRequestToPGAsync(long txnID) {
            return base.Channel.ConfirmRequestToPGAsync(txnID);
        }
        
        public string UpdateErrorWithAddBalance(string rescode, string resdesc, long txnID, string logerrormessage, int agentID, double amount, string isAgreement) {
            return base.Channel.UpdateErrorWithAddBalance(rescode, resdesc, txnID, logerrormessage, agentID, amount, isAgreement);
        }
        
        public System.Threading.Tasks.Task<string> UpdateErrorWithAddBalanceAsync(string rescode, string resdesc, long txnID, string logerrormessage, int agentID, double amount, string isAgreement) {
            return base.Channel.UpdateErrorWithAddBalanceAsync(rescode, resdesc, txnID, logerrormessage, agentID, amount, isAgreement);
        }
        
        public bool InsertTransactionInvoice(string reqXml, long txnID, string paymentMethod) {
            return base.Channel.InsertTransactionInvoice(reqXml, txnID, paymentMethod);
        }
        
        public System.Threading.Tasks.Task<bool> InsertTransactionInvoiceAsync(string reqXml, long txnID, string paymentMethod) {
            return base.Channel.InsertTransactionInvoiceAsync(reqXml, txnID, paymentMethod);
        }
        
        public string TelenorBBInquiry(string reqXML) {
            return base.Channel.TelenorBBInquiry(reqXML);
        }
        
        public System.Threading.Tasks.Task<string> TelenorBBInquiryAsync(string reqXML) {
            return base.Channel.TelenorBBInquiryAsync(reqXML);
        }
        
        public string FtthOrWtthInquiry(string reqXML) {
            return base.Channel.FtthOrWtthInquiry(reqXML);
        }
        
        public System.Threading.Tasks.Task<string> FtthOrWtthInquiryAsync(string reqXML) {
            return base.Channel.FtthOrWtthInquiryAsync(reqXML);
        }
        
        public string MptPackageInquiry(string reqXML) {
            return base.Channel.MptPackageInquiry(reqXML);
        }
        
        public System.Threading.Tasks.Task<string> MptPackageInquiryAsync(string reqXML) {
            return base.Channel.MptPackageInquiryAsync(reqXML);
        }
        
        public string ParamiGasPackageInquiry(string reqXML) {
            return base.Channel.ParamiGasPackageInquiry(reqXML);
        }
        
        public System.Threading.Tasks.Task<string> ParamiGasPackageInquiryAsync(string reqXML) {
            return base.Channel.ParamiGasPackageInquiryAsync(reqXML);
        }
        
        public string GetGiftCardDenoList(string taxId) {
            return base.Channel.GetGiftCardDenoList(taxId);
        }
        
        public System.Threading.Tasks.Task<string> GetGiftCardDenoListAsync(string taxId) {
            return base.Channel.GetGiftCardDenoListAsync(taxId);
        }
        
        public string GetProductList(string taxId) {
            return base.Channel.GetProductList(taxId);
        }
        
        public System.Threading.Tasks.Task<string> GetProductListAsync(string taxId) {
            return base.Channel.GetProductListAsync(taxId);
        }
        
        public string OoredooPackageInquiry(string reqXML) {
            return base.Channel.OoredooPackageInquiry(reqXML);
        }
        
        public System.Threading.Tasks.Task<string> OoredooPackageInquiryAsync(string reqXML) {
            return base.Channel.OoredooPackageInquiryAsync(reqXML);
        }
        
        public string MyTelPackageInquiry(string reqXML) {
            return base.Channel.MyTelPackageInquiry(reqXML);
        }
        
        public System.Threading.Tasks.Task<string> MyTelPackageInquiryAsync(string reqXML) {
            return base.Channel.MyTelPackageInquiryAsync(reqXML);
        }
        
        public string EventInquiry(string reqXml) {
            return base.Channel.EventInquiry(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> EventInquiryAsync(string reqXml) {
            return base.Channel.EventInquiryAsync(reqXml);
        }
        
        public string MerchantAcceptanceReq(string reqXml) {
            return base.Channel.MerchantAcceptanceReq(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> MerchantAcceptanceReqAsync(string reqXml) {
            return base.Channel.MerchantAcceptanceReqAsync(reqXml);
        }
        
        public string EPaymentVoidReq(string reqXml) {
            return base.Channel.EPaymentVoidReq(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> EPaymentVoidReqAsync(string reqXml) {
            return base.Channel.EPaymentVoidReqAsync(reqXml);
        }
        
        public string GetAstrologerList(string taxId, string serviceId) {
            return base.Channel.GetAstrologerList(taxId, serviceId);
        }
        
        public System.Threading.Tasks.Task<string> GetAstrologerListAsync(string taxId, string serviceId) {
            return base.Channel.GetAstrologerListAsync(taxId, serviceId);
        }
        
        public string B2BCancel(string reqXml) {
            return base.Channel.B2BCancel(reqXml);
        }
        
        public System.Threading.Tasks.Task<string> B2BCancelAsync(string reqXml) {
            return base.Channel.B2BCancelAsync(reqXml);
        }
    }
}
